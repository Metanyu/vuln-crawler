{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "HIGH"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "critical"
        }
    ],
    "cvssScore": 9.8,
    "disclosureTime": "2020-08-18 17:15:00",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.67608",
        "probability": "0.00325"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-UNMANAGED-CONTIKINGCONTIKING-6137936",
    "identifiers": {
        "CVE": [
            "CVE-2020-14935"
        ],
        "CWE": [
            "CWE-787"
        ]
    },
    "language": "cpp",
    "malicious": false,
    "packageManager": "unmanaged",
    "publicationTime": "2023-12-22 09:00:31",
    "remediation": "Upgrade contiki-ng/contiki-ng to version 4.6 or higher. ",
    "severity": "critical",
    "socialTrendAlert": false,
    "title": "Out-of-bounds Write",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Out-of-bounds Write. Buffer overflows were discovered in Contiki-NG 4.4 through 4.5, in the SNMP bulk get request response encoding function. The function parsing the received SNMP request does not verify the input message's requested variables against the capacity of the internal SNMP engine buffer. When a bulk get request response is assembled, a stack buffer dedicated for OIDs (with a limited capacity) is allocated in snmp_engine_get_bulk(). When snmp_engine_get_bulk() is populating the stack buffer, an overflow condition may occur due to lack of input length validation. This makes it possible to overwrite stack regions beyond the allocated buffer, including the return address from the function. As a result, the code execution path may be redirected to an address provided in the SNMP bulk get payload. If the target architecture uses common addressing space for program and data memory, it may also be possible to supply code in the SNMP request payload, and redirect the execution path to the remotely injected code, by modifying the function's return address. "
    },
    "source_code": [
        {
            "filename": "os/net/app-layer/snmp/snmp-ber.c",
            "diff": "@@ -128,6 +128,11 @@ snmp_ber_encode_null(unsigned char *out, uint32_t *out_len, uint8_t type)\n unsigned char *\n snmp_ber_decode_type(unsigned char *buff, uint32_t *buff_len, uint8_t *type)\n {\n+  if(*buff_len == 0)\n+  {\n+    return NULL;\n+  }\n+\n   *type = *buff++;\n   (*buff_len)--;\n \n@@ -137,6 +142,11 @@ snmp_ber_decode_type(unsigned char *buff, uint32_t *buff_len, uint8_t *type)\n unsigned char *\n snmp_ber_decode_length(unsigned char *buff, uint32_t *buff_len, uint8_t *length)\n {\n+  if(*buff_len == 0)\n+  {\n+    return NULL;\n+  }\n+\n   *length = *buff++;\n   (*buff_len)--;\n \n@@ -150,7 +160,8 @@ snmp_ber_decode_integer(unsigned char *buf, uint32_t *buff_len, uint32_t *num)\n \n   buf = snmp_ber_decode_type(buf, buff_len, &type);\n \n-  if(type != BER_DATA_TYPE_INTEGER) {\n+  if(buf == NULL ||\n+     type != BER_DATA_TYPE_INTEGER) {\n     /*\n      * Sanity check\n      * Invalid type in buffer\n@@ -160,14 +171,20 @@ snmp_ber_decode_integer(unsigned char *buf, uint32_t *buff_len, uint32_t *num)\n \n   buf = snmp_ber_decode_length(buf, buff_len, &len);\n \n-  if(len > 4) {\n+  if(buf == NULL ||\n+     len > 4) {\n     /*\n      * Sanity check\n      * It will not fit in the uint32_t\n      */\n     return NULL;\n   }\n \n+  if(*buff_len < len)\n+  {\n+    return NULL;\n+  }\n+\n   *num = (uint32_t)(*buf++ & 0xFF);\n   (*buff_len)--;\n   for(i = 1; i < len; ++i) {\n@@ -186,7 +203,8 @@ snmp_ber_decode_unsigned_integer(unsigned char *buf, uint32_t *buff_len, uint8_t\n \n   buf = snmp_ber_decode_type(buf, buff_len, &type);\n \n-  if(type != expected_type) {\n+  if(buf == NULL ||\n+     type != expected_type) {\n     /*\n      * Sanity check\n      * Invalid type in buffer\n@@ -196,14 +214,20 @@ snmp_ber_decode_unsigned_integer(unsigned char *buf, uint32_t *buff_len, uint8_t\n \n   buf = snmp_ber_decode_length(buf, buff_len, &len);\n \n-  if(len > 4) {\n+  if(buf == NULL ||\n+     len > 4) {\n     /*\n      * Sanity check\n      * It will not fit in the uint32_t\n      */\n     return NULL;\n   }\n \n+  if(*buff_len < len)\n+  {\n+    return NULL;\n+  }\n+\n   *num = (uint32_t)(*buf++ & 0xFF);\n   (*buff_len)--;\n   for(i = 1; i < len; ++i) {\n@@ -222,7 +246,8 @@ snmp_ber_decode_string_len_buffer(unsigned char *buf, uint32_t *buff_len, const\n \n   buf = snmp_ber_decode_type(buf, buff_len, &type);\n \n-  if(type != BER_DATA_TYPE_OCTET_STRING) {\n+  if(buf == NULL ||\n+    type != BER_DATA_TYPE_OCTET_STRING) {\n     /*\n      * Sanity check\n      * Invalid type in buffer"
        },
        {
            "filename": "os/net/app-layer/snmp/snmp-engine.c",
            "diff": "@@ -206,7 +206,7 @@ snmp_engine(unsigned char *buff, uint32_t buff_len, unsigned char *out, uint32_t\n {\n   static snmp_header_t header;\n   static snmp_varbind_t varbinds[SNMP_MAX_NR_VALUES];\n-  static uint32_t varbind_length;\n+  static uint32_t varbind_length = SNMP_MAX_NR_VALUES;\n \n   buff = snmp_message_decode(buff, buff_len, &header, varbinds, &varbind_length);\n   if(buff == NULL) {"
        },
        {
            "filename": "os/net/app-layer/snmp/snmp-message.c",
            "diff": "@@ -115,7 +115,7 @@ snmp_message_decode(uint8_t *buf, uint32_t buf_len, snmp_header_t *header,\n                     snmp_varbind_t *varbinds, uint32_t *varbind_num)\n {\n   uint8_t type, len;\n-  uint32_t i, oid_len;\n+  uint32_t i, oid_len = SNMP_MSG_OID_MAX_LEN;\n \n   buf = snmp_ber_decode_type(buf, &buf_len, &type);\n   if(buf == NULL) {\n@@ -224,6 +224,10 @@ snmp_message_decode(uint8_t *buf, uint32_t buf_len, snmp_header_t *header,\n   }\n \n   for(i = 0; buf_len > 0; ++i) {\n+    if (i >= *varbind_num)\n+    {\n+      return NULL;\n+    }\n \n     buf = snmp_ber_decode_type(buf, &buf_len, &type);\n     if(buf == NULL) {"
        }
    ],
    "commitTime": "2020-10-14 18:35:43"
}