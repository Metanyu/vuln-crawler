{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "PHYSICAL",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "HIGH"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "critical"
        }
    ],
    "cvssScore": 6.4,
    "disclosureTime": "2023-12-05 01:45:10",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.12549",
        "probability": "0.00045"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-UNMANAGED-AZURERTOSUSBX-6102836",
    "identifiers": {
        "CVE": [
            "CVE-2023-48697"
        ],
        "CWE": [
            "CWE-476"
        ]
    },
    "language": "cpp",
    "malicious": false,
    "packageManager": "unmanaged",
    "publicationTime": "2023-12-07 13:16:53",
    "remediation": "Upgrade azure-rtos/usbx to version 6.3.0 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "NULL Pointer Dereference",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to NULL Pointer Dereference due to memory buffer and pointer issues. An attacker can execute code on the affected device by exploiting functions/processes in the pictbridge and host class, related to PIMA , storage , CDC ACM , ECM , audio , and hub . "
    },
    "source_code": [
        {
            "filename": "common/core/CMakeLists.txt",
            "diff": "@@ -185,6 +185,8 @@ target_sources(${PROJECT_NAME} PRIVATE\n \t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_memory_copy.c\n \t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_memory_free.c\n \t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_memory_free_block_best_get.c\n+\t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_memory_byte_pool_create.c\n+\t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_memory_byte_pool_search.c\n \t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_memory_set.c\n \t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_mutex_create.c\n \t${CMAKE_CURRENT_LIST_DIR}/src/ux_utility_mutex_delete.c"
        },
        {
            "filename": "common/core/inc/ux_device_class_dpump.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_device_class_dpump.h                             PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -50,10 +50,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/core/inc/ux_device_stack.h",
            "diff": "@@ -25,7 +25,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_device_stack.h                                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -53,9 +53,9 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/core/inc/ux_host_stack.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_host_stack.h                                     PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -65,9 +65,9 @@\n /*                                            names conflict C++ keyword, */\n /*                                            added standalone HUB,       */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/core/inc/ux_system.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_system.h                                         PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -53,9 +53,9 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added device CCID name,     */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/core/inc/ux_user_sample.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  PORT SPECIFIC C INFORMATION                            RELEASE        */ \n /*                                                                        */ \n /*    ux_user.h                                           PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*                                                                        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n@@ -99,14 +99,15 @@\n /*                                            added option to enable      */\n /*                                            basic USBX error checking,  */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Xiuwen Cai, CQ Xiao      Modified comment(s),          */\n+/*  10-31-2023     Xiuwen Cai, CQ Xiao      Modified comment(s),          */\n+/*                                            refined memory management,  */\n /*                                            added zero copy support     */\n /*                                            in many device classes,     */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            added option for get string */\n /*                                            requests with zero wIndex,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -141,8 +142,8 @@\n    also refer to ux_port.h for descriptions on each of these options.  */\n \n /* Defined, this value represents minimal allocated memory alignment in number of bytes.\n-   The default is UX_ALIGN_16 (0x0f) to align allocated memory to 16 bytes.  */\n-/* #define UX_ALIGN_MIN UX_ALIGN_16  */\n+   The default is UX_ALIGN_8 (0x07) to align allocated memory to 8 bytes.  */\n+/* #define UX_ALIGN_MIN UX_ALIGN_8  */\n \n /* Defined, this value represents how many ticks per seconds for a specific hardware platform. \n    The default is 1000 indicating 1 tick per millisecond.  */\n@@ -239,7 +240,7 @@\n  */\n /* #define UX_DEVICE_CLASS_CDC_ACM_ZERO_COPY  */\n \n-/* Defined, it enables zero copy and flexible queue support (works if HID owns endpoint buffer).\n+/* Defined, it enables device HID zero copy and flexible queue support (works if HID owns endpoint buffer).\n     Enabled, the internal queue buffer is directly used for transfer, the APIs are kept to keep\n     backword compatibility, to AVOID KEEPING BUFFERS IN APPLICATION.\n     Flexible queue introduces initialization parameter _event_max_number and _event_max_length,\n@@ -252,6 +253,27 @@\n  */\n /* #define UX_DEVICE_CLASS_HID_ZERO_COPY  */\n \n+/* Defined, it enables device CDC_ECM zero copy support (works if CDC_ECM owns endpoint buffer).\n+    Enabled, it requires that the NX IP default packet pool is in cache safe area, and buffer max\n+    size is larger than UX_DEVICE_CLASS_CDC_ECM_ETHERNET_PACKET_SIZE (1536).\n+ */\n+/* #define UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY  */\n+\n+/* Defined, it enables device RNDIS zero copy support (works if RNDIS owns endpoint buffer).\n+    Enabled, it requires that the NX IP default packet pool is in cache safe area, and buffer max\n+    size is larger than UX_DEVICE_CLASS_RNDIS_MAX_PACKET_TRANSFER_SIZE (1600).\n+ */\n+/* #define UX_DEVICE_CLASS_RNDIS_ZERO_COPY  */\n+\n+/* Defined, it enables zero copy support (works if PRINTER owns endpoint buffer).\n+    Defined, it enables zero copy for bulk in/out endpoints (write/read). In this case, the endpoint\n+    buffer is not allocated in class, application must provide the buffer for read/write, and the\n+    buffer must meet device controller driver (DCD) buffer requirements (e.g., aligned and cache\n+    safe if buffer is for DMA).\n+ */\n+/* #define UX_DEVICE_CLASS_PRINTER_ZERO_COPY  */\n+\n+\n /* Defined, this value represents the maximum number of bytes that can be received or transmitted\n    on any endpoint. This value cannot be less than the maximum packet size of any endpoint. The default \n    is 4096 bytes but can be reduced in memory constrained environments. For cd-rom support in the storage "
        },
        {
            "filename": "common/core/inc/ux_utility.h",
            "diff": "@@ -12,8 +12,8 @@\n \n /**************************************************************************/\n /**************************************************************************/\n-/**                                                                       */ \n-/** USBX Component                                                        */ \n+/**                                                                       */\n+/** USBX Component                                                        */\n /**                                                                       */\n /**   Utility                                                             */\n /**                                                                       */\n@@ -26,20 +26,20 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_utility.h                                        PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n /*                                                                        */\n /*  DESCRIPTION                                                           */\n-/*                                                                        */ \n+/*                                                                        */\n /*    This file contains all the header and extern functions used by the  */\n-/*    USBX components that utilize utility functions.                     */ \n-/*                                                                        */ \n-/*  RELEASE HISTORY                                                       */ \n-/*                                                                        */ \n-/*    DATE              NAME                      DESCRIPTION             */ \n-/*                                                                        */ \n+/*    USBX components that utilize utility functions.                     */\n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added timer delete, used UX */\n@@ -57,10 +57,11 @@\n /*                                            added macros for RTOS calls,*/\n /*                                            fixed OHCI PRSC issue,      */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            refined memory management,  */\n /*                                            added new function to check */\n /*                                            parsed size of descriptor,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -86,9 +87,10 @@ VOID             _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_\n VOID             _ux_utility_memory_free(VOID *memory);\n ULONG            _ux_utility_string_length_get(UCHAR *string);\n UINT             _ux_utility_string_length_check(UCHAR *input_string, UINT *string_length_ptr, UINT max_string_length);\n-UX_MEMORY_BLOCK *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, ULONG memory_size_requested);\n+UCHAR           *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size);\n+UINT             _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size);\n VOID             _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length);\n-ULONG            _ux_utility_pci_class_scan(ULONG pci_class, ULONG bus_number, ULONG device_number, \n+ULONG            _ux_utility_pci_class_scan(ULONG pci_class, ULONG bus_number, ULONG device_number,\n                             ULONG function_number, ULONG *current_bus_number,\n                             ULONG *current_device_number, ULONG *current_function_number);\n ULONG            _ux_utility_pci_read(ULONG bus_number, ULONG device_number, ULONG function_number,\n@@ -116,9 +118,9 @@ UINT             _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *sem\n UINT             _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore);\n UINT             _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal);\n UINT             _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore);\n-UINT             _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, \n+UINT             _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name,\n                              VOID (*entry_function)(ULONG), ULONG entry_input,\n-                             VOID *stack_start, ULONG stack_size, \n+                             VOID *stack_start, ULONG stack_size,\n                              UINT priority, UINT preempt_threshold,\n                              ULONG time_slice, UINT auto_start);\n UINT             _ux_utility_thread_delete(UX_THREAD *thread_ptr);\n@@ -129,12 +131,12 @@ UINT             _ux_utility_thread_sleep(ULONG ticks);\n UINT             _ux_utility_thread_suspend(UX_THREAD *thread_ptr);\n UX_THREAD       *_ux_utility_thread_identify(VOID);\n UINT             _ux_utility_timer_create(UX_TIMER *timer, CHAR *timer_name, VOID (*expiration_function) (ULONG),\n-                             ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, \n+                             ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks,\n                              UINT activation_flag);\n UINT             _ux_utility_timer_delete(UX_TIMER *timer);\n UINT             _ux_utility_event_flags_create(UX_EVENT_FLAGS_GROUP*group_ptr, CHAR *name);\n UINT             _ux_utility_event_flags_delete(UX_EVENT_FLAGS_GROUP*group_ptr);\n-UINT             _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags, \n+UINT             _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags,\n                                                  UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option);\n UINT             _ux_utility_event_flags_set(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG flags_to_set,\n                                                  UINT set_option);\n@@ -399,7 +401,7 @@ VOID*            _ux_utility_memory_allocate_add_safe(ULONG align,ULONG cache,UL\n \n \n /* Define the system API mappings.\n-   Note: this section is only applicable to \n+   Note: this section is only applicable to\n    application source code, hence the conditional that turns off this\n    stuff when the include file is processed by the ThreadX source. */\n \n@@ -450,8 +452,8 @@ VOID*            _ux_utility_memory_allocate_add_safe(ULONG align,ULONG cache,UL\n #define ux_utility_event_flags_set                     _ux_utility_event_flags_set\n #define ux_utility_unicode_to_string                   _ux_utility_unicode_to_string\n #define ux_utility_string_to_unicode                   _ux_utility_string_to_unicode\n-#define ux_utility_delay_ms                            _ux_utility_delay_ms \n-#define ux_utility_error_callback_register             _ux_utility_error_callback_register \n+#define ux_utility_delay_ms                            _ux_utility_delay_ms\n+#define ux_utility_error_callback_register             _ux_utility_error_callback_register\n #define ux_system_error_handler                        _ux_system_error_handler\n \n #define ux_utility_time_get                            _ux_utility_time_get"
        },
        {
            "filename": "common/core/src/ux_device_class_dpump_activate.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_dpump_activate                     PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -73,10 +73,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_dpump_activate(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/core/src/ux_device_class_dpump_change.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_dpump_change                       PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -76,10 +76,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_dpump_change(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/core/src/ux_device_class_dpump_initialize.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_dpump_initialize                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,10 +70,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_dpump_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/core/src/ux_device_class_dpump_read.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_dpump_read                         PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,10 +70,10 @@\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_dpump_read(UX_SLAVE_CLASS_DPUMP *dpump, UCHAR *buffer, "
        },
        {
            "filename": "common/core/src/ux_device_class_dpump_read_run.c",
            "diff": "@@ -39,7 +39,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_dpump_read_run                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -78,10 +78,10 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_dpump_read_run(UX_SLAVE_CLASS_DPUMP *dpump, UCHAR *buffer,"
        },
        {
            "filename": "common/core/src/ux_device_class_dpump_write.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_dpump_write                        PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,10 +70,10 @@\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_dpump_write(UX_SLAVE_CLASS_DPUMP *dpump, UCHAR *buffer, "
        },
        {
            "filename": "common/core/src/ux_device_class_dpump_write_run.c",
            "diff": "@@ -39,7 +39,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_dpump_write_run                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -78,10 +78,10 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_dpump_write_run(UX_SLAVE_CLASS_DPUMP *dpump, UCHAR *buffer,"
        },
        {
            "filename": "common/core/src/ux_device_stack_class_register.c",
            "diff": "@@ -172,7 +172,7 @@ ULONG                       class_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_stack_class_register                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -206,7 +206,7 @@ ULONG                       class_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_stack_class_register(UCHAR *class_name,"
        },
        {
            "filename": "common/core/src/ux_device_stack_class_unregister.c",
            "diff": "@@ -156,7 +156,7 @@ ULONG                       class_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_stack_class_unregister                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -187,7 +187,7 @@ ULONG                       class_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_stack_class_unregister(UCHAR *class_name,"
        },
        {
            "filename": "common/core/src/ux_device_stack_control_request_process.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_stack_control_request_process            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -94,10 +94,10 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed vendor request issue, */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            improved interface request  */\n /*                                            process with print class,   */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)"
        },
        {
            "filename": "common/core/src/ux_device_stack_descriptor_send.c",
            "diff": "@@ -41,7 +41,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_stack_descriptor_send                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -89,11 +89,11 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            moved compile option check, */\n /*                                            added support for get string*/\n /*                                            requests with zero wIndex,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)"
        },
        {
            "filename": "common/core/src/ux_device_stack_initialize.c",
            "diff": "@@ -54,7 +54,7 @@ UX_SYSTEM_SLAVE *_ux_system_slave;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_stack_initialize                         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -109,10 +109,10 @@ UX_SYSTEM_SLAVE *_ux_system_slave;\n /*                                            added CCID support,         */\n /*                                            added video support,        */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,\n@@ -474,7 +474,7 @@ UCHAR                           *memory;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_stack_initialize                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -505,7 +505,7 @@ UCHAR                           *memory;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,"
        },
        {
            "filename": "common/core/src/ux_device_stack_uninitialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_stack_uninitialize                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,10 +72,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_stack_uninitialize(VOID)"
        },
        {
            "filename": "common/core/src/ux_hcd_sim_host_initialize.c",
            "diff": "@@ -12,8 +12,8 @@\n \n /**************************************************************************/\n /**************************************************************************/\n-/**                                                                       */ \n-/** USBX Component                                                        */ \n+/**                                                                       */\n+/** USBX Component                                                        */\n /**                                                                       */\n /**   Host Simulator Controller Driver                                    */\n /**                                                                       */\n@@ -30,43 +30,43 @@\n #include \"ux_dcd_sim_slave.h\"\n \n \n-/**************************************************************************/ \n-/*                                                                        */ \n-/*  FUNCTION                                               RELEASE        */ \n-/*                                                                        */ \n-/*    _ux_hcd_sim_host_initialize                         PORTABLE C      */ \n-/*                                                           6.1.10       */\n+/**************************************************************************/\n+/*                                                                        */\n+/*  FUNCTION                                               RELEASE        */\n+/*                                                                        */\n+/*    _ux_hcd_sim_host_initialize                         PORTABLE C      */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n /*                                                                        */\n /*  DESCRIPTION                                                           */\n-/*                                                                        */ \n-/*    This function initializes the simulated host controller             */ \n-/*                                                                        */ \n-/*  INPUT                                                                 */ \n-/*                                                                        */ \n-/*    HCD                                   Pointer to HCD                */ \n-/*                                                                        */ \n-/*  OUTPUT                                                                */ \n-/*                                                                        */ \n-/*    Completion Status                                                   */ \n-/*                                                                        */ \n-/*  CALLS                                                                 */ \n-/*                                                                        */ \n-/*    _ux_hcd_sim_host_periodic_tree_create Create periodic tree          */ \n-/*    _ux_utility_memory_allocate           Allocate memory block         */ \n-/*    _ux_utility_semaphore_put             Semaphore put                 */ \n-/*    _ux_utility_timer_create              Create timer                  */ \n-/*                                                                        */ \n-/*  CALLED BY                                                             */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*    This function initializes the simulated host controller             */\n+/*                                                                        */\n+/*  INPUT                                                                 */\n+/*                                                                        */\n+/*    HCD                                   Pointer to HCD                */\n+/*                                                                        */\n+/*  OUTPUT                                                                */\n+/*                                                                        */\n+/*    Completion Status                                                   */\n+/*                                                                        */\n+/*  CALLS                                                                 */\n+/*                                                                        */\n+/*    _ux_hcd_sim_host_periodic_tree_create Create periodic tree          */\n+/*    _ux_utility_memory_allocate           Allocate memory block         */\n+/*    _ux_utility_semaphore_put             Semaphore put                 */\n+/*    _ux_utility_timer_create              Create timer                  */\n+/*                                                                        */\n+/*  CALLED BY                                                             */\n+/*                                                                        */\n /*    Host Simulator Controller Driver                                    */\n-/*                                                                        */ \n-/*  RELEASE HISTORY                                                       */ \n-/*                                                                        */ \n-/*    DATE              NAME                      DESCRIPTION             */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized based on compile  */\n@@ -81,6 +81,9 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            refined memory management,  */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_hcd_sim_host_initialize(UX_HCD *hcd)\n@@ -89,12 +92,12 @@ UINT  _ux_hcd_sim_host_initialize(UX_HCD *hcd)\n UX_SLAVE_DCD        *dcd;\n UX_DCD_SIM_SLAVE    *dcd_sim_slave;\n UX_HCD_SIM_HOST     *hcd_sim_host;\n-UINT                status;\n+UINT                status = UX_ERROR;\n \n \n     /* The controller initialized here is of host simulator type.  */\n     hcd -> ux_hcd_controller_type =  UX_HCD_SIM_HOST_CONTROLLER;\n-    \n+\n     /* Allocate memory for this host simulator HCD instance.  */\n     hcd_sim_host =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_HCD_SIM_HOST));\n     if (hcd_sim_host == UX_NULL)\n@@ -119,22 +122,25 @@ UINT                status;\n     hcd -> ux_hcd_status =  UX_HCD_STATUS_HALTED;\n \n     /* Allocate the list of EDs. All EDs are allocated on 16 byte memory boundary.  */\n-    hcd_sim_host -> ux_hcd_sim_host_ed_list =  _ux_utility_memory_allocate(UX_ALIGN_16, UX_REGULAR_MEMORY, (ULONG)sizeof(UX_HCD_SIM_HOST_ED) * _ux_system_host -> ux_system_host_max_ed);\n-    if (hcd_sim_host -> ux_hcd_sim_host_ed_list == UX_NULL)\n-        status = UX_MEMORY_INSUFFICIENT;\n-    else\n-        status = UX_SUCCESS;\n+    if (_ux_system_host -> ux_system_host_max_ed != 0)\n+    {\n+        hcd_sim_host -> ux_hcd_sim_host_ed_list =  _ux_utility_memory_allocate(UX_ALIGN_16, UX_REGULAR_MEMORY, (ULONG)sizeof(UX_HCD_SIM_HOST_ED) * _ux_system_host -> ux_system_host_max_ed);\n+        if (hcd_sim_host -> ux_hcd_sim_host_ed_list == UX_NULL)\n+            status = UX_MEMORY_INSUFFICIENT;\n+        else\n+            status = UX_SUCCESS;\n+    }\n \n     /* Allocate the list of TDs. All TDs are allocated on 32 byte memory boundary.  */\n-    if (status == UX_SUCCESS)\n+    if ((status == UX_SUCCESS) && (_ux_system_host -> ux_system_host_max_td != 0))\n     {\n         hcd_sim_host -> ux_hcd_sim_host_td_list =  _ux_utility_memory_allocate(UX_ALIGN_32, UX_REGULAR_MEMORY, (ULONG)sizeof(UX_HCD_SIM_HOST_TD) * _ux_system_host -> ux_system_host_max_td);\n         if (hcd_sim_host -> ux_hcd_sim_host_td_list == UX_NULL)\n             status = UX_MEMORY_INSUFFICIENT;\n     }\n \n     /* Allocate the list of isochronous TDs. All TDs are allocated on 32 byte memory boundary.  */\n-    if (status == UX_SUCCESS)\n+    if ((status == UX_SUCCESS) && (_ux_system_host -> ux_system_host_max_iso_td != 0))\n     {\n         hcd_sim_host -> ux_hcd_sim_host_iso_td_list =  _ux_utility_memory_allocate(UX_ALIGN_32, UX_REGULAR_MEMORY, (ULONG)sizeof(UX_HCD_SIM_HOST_ISO_TD) * _ux_system_host -> ux_system_host_max_iso_td);\n         if (hcd_sim_host -> ux_hcd_sim_host_iso_td_list == UX_NULL)\n@@ -156,7 +162,7 @@ UINT                status;\n \n         /* The periodic scheduler is not active.  */\n         hcd_sim_host -> ux_hcd_sim_host_periodic_scheduler_active =  0;\n-        \n+\n         /* We start a timer that will invoke the simulator every timer tick.  */\n         status = _ux_host_timer_create(&hcd_sim_host -> ux_hcd_sim_host_timer, \"USBX Simulation Timer\",\n                         _ux_hcd_sim_host_timer_function, (ULONG) (ALIGN_TYPE) hcd_sim_host, 1, 1, UX_AUTO_ACTIVATE);\n@@ -197,7 +203,7 @@ UINT                status;\n         }\n     }\n \n-    /* Get the number of ports on the controller. The number of ports needs to be reflected both \n+    /* Get the number of ports on the controller. The number of ports needs to be reflected both\n        for the generic HCD container and the local sim_host container. In the simulator,\n        the number of ports is hardwired to 1 only.  */\n     hcd -> ux_hcd_nb_root_hubs =  1;"
        },
        {
            "filename": "common/core/src/ux_hcd_sim_host_uninitialize.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_hcd_sim_host_uninitialize                       PORTABLE C      */\n-/*                                                           6.1.10       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,6 +70,9 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            refined memory management,  */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_hcd_sim_host_uninitialize(UX_HCD_SIM_HOST *hcd_sim_host)\n@@ -115,9 +118,14 @@ UINT                    td_index;\n #endif\n \n     /* Free TD/ED memories.  */\n-    _ux_utility_memory_free(hcd_sim_host -> ux_hcd_sim_host_iso_td_list);\n-    _ux_utility_memory_free(hcd_sim_host -> ux_hcd_sim_host_td_list);\n-    _ux_utility_memory_free(hcd_sim_host -> ux_hcd_sim_host_ed_list);\n+    if (hcd_sim_host -> ux_hcd_sim_host_iso_td_list)\n+        _ux_utility_memory_free(hcd_sim_host -> ux_hcd_sim_host_iso_td_list);\n+\n+    if (hcd_sim_host -> ux_hcd_sim_host_td_list)\n+        _ux_utility_memory_free(hcd_sim_host -> ux_hcd_sim_host_td_list);\n+\n+    if (hcd_sim_host -> ux_hcd_sim_host_ed_list)\n+        _ux_utility_memory_free(hcd_sim_host -> ux_hcd_sim_host_ed_list);\n \n     /* Free simulated host controller memory.  */\n     _ux_utility_memory_free(hcd_sim_host);"
        },
        {
            "filename": "common/core/src/ux_host_stack_class_get.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_stack_class_get                            PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -78,8 +78,8 @@\n /*                                            optimized based on compile  */\n /*                                            definitions,                */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_stack_class_get(UCHAR *class_name, UX_HOST_CLASS **host_class)\n@@ -145,7 +145,7 @@ ULONG               class_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_class_get                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -175,7 +175,7 @@ ULONG               class_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_class_get(UCHAR *class_name, UX_HOST_CLASS **host_class)"
        },
        {
            "filename": "common/core/src/ux_host_stack_class_instance_get.c",
            "diff": "@@ -119,7 +119,7 @@ VOID    **current_class_instance;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_class_instance_get                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -151,7 +151,7 @@ VOID    **current_class_instance;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_class_instance_get(UX_HOST_CLASS *host_class, UINT class_index, VOID **class_instance)"
        },
        {
            "filename": "common/core/src/ux_host_stack_class_register.c",
            "diff": "@@ -180,7 +180,7 @@ ULONG               class_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_class_register                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -211,7 +211,7 @@ ULONG               class_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_class_register(UCHAR *class_name,"
        },
        {
            "filename": "common/core/src/ux_host_stack_configuration_interface_get.c",
            "diff": "@@ -193,7 +193,7 @@ UX_INTERFACE        *current_interface;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_configuration_interface_get         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -227,7 +227,7 @@ UX_INTERFACE        *current_interface;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_configuration_interface_get(UX_CONFIGURATION *configuration, "
        },
        {
            "filename": "common/core/src/ux_host_stack_device_configuration_activate.c",
            "diff": "@@ -191,7 +191,7 @@ UINT                    status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_device_configuration_activate       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -222,7 +222,7 @@ UINT                    status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_device_configuration_activate(UX_CONFIGURATION *configuration)"
        },
        {
            "filename": "common/core/src/ux_host_stack_device_configuration_deactivate.c",
            "diff": "@@ -200,7 +200,7 @@ UINT                        status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_device_configuration_deactivate     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -231,7 +231,7 @@ UINT                        status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_device_configuration_deactivate(UX_DEVICE *device)"
        },
        {
            "filename": "common/core/src/ux_host_stack_device_configuration_get.c",
            "diff": "@@ -140,7 +140,7 @@ UX_CONFIGURATION        *current_configuration;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_device_configuration_get            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -173,7 +173,7 @@ UX_CONFIGURATION        *current_configuration;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_device_configuration_get(UX_DEVICE *device, UINT configuration_index,"
        },
        {
            "filename": "common/core/src/ux_host_stack_device_get.c",
            "diff": "@@ -155,7 +155,7 @@ ULONG       current_device_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_device_get                          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -185,7 +185,7 @@ ULONG       current_device_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_device_get(ULONG device_index, UX_DEVICE **device)"
        },
        {
            "filename": "common/core/src/ux_host_stack_device_string_get.c",
            "diff": "@@ -154,7 +154,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_device_string_get                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -190,7 +190,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_device_string_get(UX_DEVICE *device, UCHAR *descriptor_buffer, ULONG length, ULONG language_id, ULONG string_index)"
        },
        {
            "filename": "common/core/src/ux_host_stack_endpoint_transfer_abort.c",
            "diff": "@@ -98,7 +98,7 @@ UINT    status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_endpoint_transfer_abort             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -129,7 +129,7 @@ UINT    status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_endpoint_transfer_abort(UX_ENDPOINT *endpoint)"
        },
        {
            "filename": "common/core/src/ux_host_stack_hcd_register.c",
            "diff": "@@ -163,7 +163,7 @@ ULONG       hcd_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_hcd_register                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -193,7 +193,7 @@ ULONG       hcd_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_hcd_register(UCHAR *hcd_name,"
        },
        {
            "filename": "common/core/src/ux_host_stack_hcd_unregister.c",
            "diff": "@@ -202,7 +202,7 @@ UINT        hcd_name_length =  0;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_hcd_unregister                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -234,7 +234,7 @@ UINT        hcd_name_length =  0;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_hcd_unregister(UCHAR *hcd_name,"
        },
        {
            "filename": "common/core/src/ux_host_stack_interface_endpoint_get.c",
            "diff": "@@ -142,7 +142,7 @@ UX_ENDPOINT     *current_endpoint;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_interface_endpoint_get              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -174,7 +174,7 @@ UX_ENDPOINT     *current_endpoint;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_interface_endpoint_get(UX_INTERFACE *interface_ptr, UINT endpoint_index, UX_ENDPOINT **endpoint)"
        },
        {
            "filename": "common/core/src/ux_host_stack_interface_setting_select.c",
            "diff": "@@ -221,7 +221,7 @@ UINT                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_interface_setting_select            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -252,7 +252,7 @@ UINT                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_interface_setting_select(UX_INTERFACE *interface_ptr)"
        },
        {
            "filename": "common/core/src/ux_host_stack_tasks_run.c",
            "diff": "@@ -44,7 +44,7 @@ static inline VOID _ux_host_stack_pending_transfers_run(VOID);\n /*  FUNCTION                                                 RELEASE      */\n /*                                                                        */\n /*    _ux_host_stack_tasks_run                              PORTABLE C    */\n-/*                                                             6.2.0      */\n+/*                                                             6.3.0      */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -110,6 +110,9 @@ static inline VOID _ux_host_stack_pending_transfers_run(VOID);\n /*                                            fixed activation issue on   */\n /*                                            no class linked interfaces, */\n /*                                            resulting in version 6.2.0  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved enum transfer,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_host_stack_tasks_run(VOID)\n@@ -200,8 +203,8 @@ static inline VOID _ux_host_stack_enum_address_sent(UX_DEVICE *device)\n {\n \n     /* Address (request wValue) applied to device.  */\n-    device -> ux_device_address =\n-            device -> ux_device_enum_trans -> ux_transfer_request_value;\n+    device -> ux_device_address = device -> ux_device_control_endpoint.\n+                ux_endpoint_transfer_request.ux_transfer_request_value & 0x7F;\n     device -> ux_device_state = UX_DEVICE_ADDRESSED;\n \n     /* Unlock enumeration.  */\n@@ -625,7 +628,7 @@ INT                     immediate_state = UX_TRUE;\n         case UX_HOST_STACK_ENUM_DEVICE_ADDR_SENT:\n \n             /* Transfer error check.  */\n-            trans = device -> ux_device_enum_trans;\n+            trans = &device -> ux_device_control_endpoint.ux_endpoint_transfer_request;\n             if (trans -> ux_transfer_request_completion_code != UX_SUCCESS)\n             {\n                 device -> ux_device_enum_state = UX_HOST_STACK_ENUM_RETRY;\n@@ -659,7 +662,7 @@ INT                     immediate_state = UX_TRUE;\n         case UX_HOST_STACK_ENUM_DEVICE_DESCR_PARSE:\n \n             /* Transfer error check.  */\n-            trans = device -> ux_device_enum_trans;\n+            trans = &device -> ux_device_control_endpoint.ux_endpoint_transfer_request;\n             buffer = trans -> ux_transfer_request_data_pointer;\n             if (UX_HOST_STACK_ENUM_TRANS_ERROR(trans))\n             {\n@@ -707,6 +710,7 @@ INT                     immediate_state = UX_TRUE;\n                 trans -> ux_transfer_request_requested_length = UX_DEVICE_DESCRIPTOR_LENGTH;\n \n                 /* Issue GetDescriptor(Device) again and parse it.  */\n+                device -> ux_device_enum_trans = trans;\n                 UX_TRANSFER_STATE_RESET(trans);\n                 device -> ux_device_enum_state = UX_HOST_STACK_ENUM_TRANS_WAIT;\n                 device -> ux_device_enum_next_state = UX_HOST_STACK_ENUM_DEVICE_DESCR_PARSE;\n@@ -744,7 +748,7 @@ INT                     immediate_state = UX_TRUE;\n         case UX_HOST_STACK_ENUM_CONFIG_DESCR_PARSE:\n \n             /* Transfer error check.  */\n-            trans = device -> ux_device_enum_trans;\n+            trans = &device -> ux_device_control_endpoint.ux_endpoint_transfer_request;\n             buffer = trans -> ux_transfer_request_data_pointer;\n             if (UX_HOST_STACK_ENUM_TRANS_ERROR(trans))\n             {\n@@ -792,6 +796,7 @@ INT                     immediate_state = UX_TRUE;\n                     configuration -> ux_configuration_descriptor.wTotalLength;\n \n                 /* Start transfer again.  */\n+                device -> ux_device_enum_trans = trans;\n                 UX_TRANSFER_STATE_RESET(device -> ux_device_enum_trans);\n                 device -> ux_device_enum_state = UX_HOST_STACK_ENUM_TRANS_WAIT;\n                 device -> ux_device_enum_next_state = UX_HOST_STACK_ENUM_CONFIG_DESCR_PARSE;\n@@ -866,7 +871,7 @@ INT                     immediate_state = UX_TRUE;\n             continue;\n \n         case UX_HOST_STACK_ENUM_CONFIG_ACTIVATE:\n-            trans = device -> ux_device_enum_trans;\n+            trans = &device -> ux_device_control_endpoint.ux_endpoint_transfer_request;\n             if (UX_HOST_STACK_ENUM_TRANS_ERROR(trans))\n             {\n                 device -> ux_device_enum_state = UX_HOST_STACK_ENUM_RETRY;\n@@ -960,6 +965,7 @@ INT                     immediate_state = UX_TRUE;\n             /* Transfer done - next state.  */\n             if (status == UX_STATE_NEXT || status == UX_STATE_IDLE)\n             {\n+                device -> ux_device_enum_trans = UX_NULL;\n                 device -> ux_device_enum_state = device -> ux_device_enum_next_state;\n                 continue;\n             }\n@@ -979,6 +985,7 @@ INT                     immediate_state = UX_TRUE;\n                     _ux_utility_memory_free(device -> ux_device_enum_inst.ptr);\n                     device -> ux_device_enum_inst.ptr = UX_NULL;\n                 }\n+                device -> ux_device_enum_trans = UX_NULL;\n                 device -> ux_device_enum_state = UX_HOST_STACK_ENUM_FAIL;\n                 continue;\n             }\n@@ -996,6 +1003,7 @@ INT                     immediate_state = UX_TRUE;\n                     _ux_utility_memory_free(device -> ux_device_enum_inst.ptr);\n                     device -> ux_device_enum_inst.ptr = UX_NULL;\n                 }\n+                device -> ux_device_enum_trans = UX_NULL;\n                 device -> ux_device_enum_state = UX_HOST_STACK_ENUM_RETRY;\n                 continue;\n             }"
        },
        {
            "filename": "common/core/src/ux_host_stack_transfer_request.c",
            "diff": "@@ -224,7 +224,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_transfer_request                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -253,7 +253,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_transfer_request(UX_TRANSFER *transfer_request)"
        },
        {
            "filename": "common/core/src/ux_host_stack_transfer_request_abort.c",
            "diff": "@@ -153,7 +153,7 @@ ULONG           completion_code;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_transfer_request_abort              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -183,7 +183,7 @@ ULONG           completion_code;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_transfer_request_abort(UX_TRANSFER *transfer_request)"
        },
        {
            "filename": "common/core/src/ux_host_stack_transfer_run.c",
            "diff": "@@ -300,7 +300,7 @@ UX_TRANSFER         *previous;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_stack_transfer_run                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -329,7 +329,7 @@ UX_TRANSFER         *previous;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_stack_transfer_run(UX_TRANSFER *transfer_request)"
        },
        {
            "filename": "common/core/src/ux_system_initialize.c",
            "diff": "@@ -12,8 +12,8 @@\n \n /**************************************************************************/\n /**************************************************************************/\n-/**                                                                       */ \n-/** USBX Component                                                        */ \n+/**                                                                       */\n+/** USBX Component                                                        */\n /**                                                                       */\n /**   System                                                              */\n /**                                                                       */\n@@ -64,46 +64,46 @@ UCHAR _ux_system_usb_2_0_extension_descriptor_structure[] =                 {1,1\n UCHAR _ux_system_container_id_descriptor_structure[] =                      {1,1,1,1,4,4,4,4};\n \n \n-/**************************************************************************/ \n-/*                                                                        */ \n-/*  FUNCTION                                               RELEASE        */ \n-/*                                                                        */ \n-/*    _ux_system_initialize                               PORTABLE C      */ \n-/*                                                           6.x          */\n+/**************************************************************************/\n+/*                                                                        */\n+/*  FUNCTION                                               RELEASE        */\n+/*                                                                        */\n+/*    _ux_system_initialize                               PORTABLE C      */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n /*                                                                        */\n /*  DESCRIPTION                                                           */\n-/*                                                                        */ \n-/*    This function initializes the various control data structures for   */ \n-/*    the USBX system.                                                    */ \n-/*                                                                        */ \n-/*  INPUT                                                                 */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*    This function initializes the various control data structures for   */\n+/*    the USBX system.                                                    */\n+/*                                                                        */\n+/*  INPUT                                                                 */\n+/*                                                                        */\n /*    regular_memory_pool_start        Start of non cached memory pool    */\n-/*    regular_memory_size              Size of non cached memory pool     */ \n+/*    regular_memory_size              Size of non cached memory pool     */\n /*    cache_safe_memory_pool_start     Start of cached memory pool        */\n-/*    cache_safe_memory_size           Size of cached memory pool         */ \n-/*                                                                        */ \n-/*  OUTPUT                                                                */ \n-/*                                                                        */ \n+/*    cache_safe_memory_size           Size of cached memory pool         */\n+/*                                                                        */\n+/*  OUTPUT                                                                */\n+/*                                                                        */\n /*    None                                                                */\n-/*                                                                        */ \n-/*  CALLS                                                                 */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*  CALLS                                                                 */\n+/*                                                                        */\n /*    _ux_utility_memory_allocate           Allocate memory               */\n-/*    _ux_utility_memory_set                Set memory                    */ \n+/*    _ux_utility_memory_set                Set memory                    */\n /*    _ux_utility_mutex_create              Create mutex                  */\n-/*                                                                        */ \n-/*  CALLED BY                                                             */ \n-/*                                                                        */ \n-/*    Application                                                         */ \n-/*                                                                        */ \n-/*  RELEASE HISTORY                                                       */ \n-/*                                                                        */ \n-/*    DATE              NAME                      DESCRIPTION             */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*  CALLED BY                                                             */\n+/*                                                                        */\n+/*    Application                                                         */\n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            verified memset and memcpy  */\n@@ -115,24 +115,28 @@ UCHAR _ux_system_container_id_descriptor_structure[] =                      {1,1\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            refined memory management,  */\n /*                                            added UX_ASSERT check for   */\n /*                                            STD descriptor parse size,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n-UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, \n+UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,\n                             VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)\n {\n-\n-UX_MEMORY_BLOCK     *memory_block;\n ALIGN_TYPE          int_memory_pool_start;\n VOID                *regular_memory_pool_end;\n+VOID                *cache_safe_memory_pool_end;\n ULONG               memory_pool_offset;\n #if !defined(UX_STANDALONE)\n UINT                status;\n #endif\n+ULONG               pool_size;\n \n+    /* Check if the regular memory pool is valid.  */\n+    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))\n+        return(UX_INVALID_PARAMETER);\n \n     /* Reset memory block */\n     _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */\n@@ -150,8 +154,8 @@ UINT                status;\n \n     /* Add to the memory offset the size of the allocated block.  */\n     memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_HOST);\n-    \n-#endif \n+\n+#endif\n \n #ifndef UX_HOST_SIDE_ONLY\n \n@@ -160,8 +164,8 @@ UINT                status;\n \n     /* Add to the memory offset the size of the allocated block.  */\n     memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);\n-    \n-#endif \n+\n+#endif\n \n \n #ifdef UX_OTG_SUPPORT\n@@ -171,18 +175,36 @@ UINT                status;\n \n     /* Add to the memory offset the size of the allocated block.  */\n     memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);\n-#endif \n+#endif\n \n+    /* Set the regular memory pool structure.  */\n+    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);\n+\n+    /* Add to the memory offset the size of the allocated block.  */\n+    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);\n+\n+    /* Check if the cache save memory pool is valid.  */\n+    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))\n+    {\n \n-    /* Set the cache safe memory for the dynamic pool */\n-    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) \n-                                                            + memory_pool_offset);\n+        /* Set the cache safe memory pool structure.  */\n+        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);\n+\n+        /* Add to the memory offset the size of the allocated block.  */\n+        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);\n+    }\n+    else\n+    {\n+\n+        /* Set the cache safe memory pool structure to regular pool. */\n+        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];\n+    }\n \n     /* Make sure the regular memory pool is aligned properly */\n-    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;\n-    int_memory_pool_start +=  UX_ALIGN_MIN;\n-    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);\n-    \n+    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);\n+    int_memory_pool_start += UX_ALIGN_MIN;\n+    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);\n+\n     /* Set the end of the regular memory pool.  */\n     regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);\n \n@@ -194,53 +216,48 @@ UINT                status;\n         return(UX_MEMORY_INSUFFICIENT);\n     }\n \n-    /* Now, we have a project structure allocated, save the regular memory allocation details */\n-    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);\n-    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;\n-    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;\n+    /* get the regular memory pool size.  */\n+    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);\n \n-    /* Build the first free memory block */\n-    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;\n-    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);\n-    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;\n+    /* Create the regular memory pool.  */\n+    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],\n+                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,\n+                                        pool_size);\n \n     /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,\n        define the cached safe memory region as the regular memory region.  */\n-    if (cache_safe_memory_pool_start == UX_NULL)\n+    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))\n     {\n \n-        /* Cache safe memory is the same as regular memory.  */\n-        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;\n-        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;\n-        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;\n-    }\n-    else\n-    {\n-    \n+        /* Reset this memory block */\n+        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */\n+\n         /* Make sure the cache safe memory pool is aligned properly */\n         int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;\n         int_memory_pool_start +=  UX_ALIGN_MIN;\n         int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);\n-    \n-        /* Save the cache safe memory allocation details */\n-        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;\n-        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;\n-        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;\n-    \n-        /* Reset this memory block */\n-        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */\n-    \n-        /* Build the first free memory block */\n-        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;\n-        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);\n-        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;\n+\n+        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);\n+\n+        /* Check if we have memory available.  */\n+        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)\n+        {\n+\n+            /* No memory available.  */\n+            return(UX_MEMORY_INSUFFICIENT);\n+        }\n+\n+        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);\n+\n+        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],\n+                                            (UX_MEMORY_BYTE_POOL *)int_memory_pool_start, pool_size);\n     }\n \n #ifdef UX_ENABLE_MEMORY_STATISTICS\n-    _ux_system -> ux_system_regular_memory_pool_base = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;\n-    _ux_system -> ux_system_regular_memory_pool_min_free = _ux_system -> ux_system_regular_memory_pool_free;\n-    _ux_system -> ux_system_cache_safe_memory_pool_base = (UCHAR *) _ux_system -> ux_system_cache_safe_memory_pool_start;\n-    _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;\n+    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] -> ux_byte_pool_min_free =\n+            _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] -> ux_byte_pool_available;\n+    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] -> ux_byte_pool_min_free =\n+            _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] -> ux_byte_pool_available;\n \n     /* Other fields are kept zero.  */\n #endif\n@@ -255,10 +272,10 @@ UINT                status;\n     /* Setup the head and tail pointers.  */\n     _ux_system -> ux_system_debug_log_head = _ux_system -> ux_system_debug_log_buffer;\n     _ux_system -> ux_system_debug_log_tail = _ux_system -> ux_system_debug_log_buffer;\n-    \n+\n     /* Keep the size in system structure variable.  */\n     _ux_system -> ux_system_debug_log_size = UX_DEBUG_LOG_SIZE;\n-    \n+\n #endif\n \n #if !defined(UX_STANDALONE)\n@@ -278,7 +295,7 @@ UINT                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_system_initialize                              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -310,10 +327,10 @@ UINT                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n-UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, \n+UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,\n                             VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)\n {\n \n@@ -333,8 +350,8 @@ UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memo\n     /* Sanity check.  */\n     if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))\n             return(UX_INVALID_PARAMETER);\n-    \n+\n     /* Invoke system initialization function.  */\n-    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size, \n+    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,\n                                  cache_safe_memory_pool_start, cache_safe_memory_size));\n }"
        },
        {
            "filename": "common/core/src/ux_utility_descriptor_pack.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_utility_descriptor_pack                         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,9 +72,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_utility_descriptor_pack(UCHAR * descriptor, UCHAR * descriptor_structure,"
        },
        {
            "filename": "common/core/src/ux_utility_descriptor_parse.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_utility_descriptor_parse                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,9 +72,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,\n@@ -133,7 +133,7 @@ VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_st\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_utility_descriptor_parse_size                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -165,7 +165,7 @@ VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_st\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n ULONG _ux_utility_descriptor_parse_size(UCHAR * descriptor_structure, UINT descriptor_entries, UINT size_align_mask)"
        },
        {
            "filename": "common/core/src/ux_utility_memory_allocate.c",
            "diff": "@@ -12,8 +12,8 @@\n \n /**************************************************************************/\n /**************************************************************************/\n-/**                                                                       */ \n-/** USBX Component                                                        */ \n+/**                                                                       */\n+/** USBX Component                                                        */\n /**                                                                       */\n /**   Utility                                                             */\n /**                                                                       */\n@@ -27,45 +27,44 @@\n \n #include \"ux_api.h\"\n \n-\n-/**************************************************************************/ \n-/*                                                                        */ \n-/*  FUNCTION                                               RELEASE        */ \n-/*                                                                        */ \n-/*    _ux_utility_memory_allocate                         PORTABLE C      */ \n-/*                                                           6.x          */\n+/**************************************************************************/\n+/*                                                                        */\n+/*  FUNCTION                                               RELEASE        */\n+/*                                                                        */\n+/*    _ux_utility_memory_allocate                         PORTABLE C      */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n /*                                                                        */\n /*  DESCRIPTION                                                           */\n-/*                                                                        */ \n-/*    This function allocates a block of memory for the specified size    */ \n+/*                                                                        */\n+/*    This function allocates a block of memory for the specified size    */\n /*    and alignment.                                                      */\n-/*                                                                        */ \n-/*  INPUT                                                                 */ \n-/*                                                                        */ \n-/*    memory_alignment                      Memory alignment required     */ \n-/*    memory_cache_flag                     Memory pool source            */ \n-/*    memory_size_requested                 Number of bytes required      */ \n-/*                                                                        */ \n-/*  OUTPUT                                                                */ \n-/*                                                                        */ \n-/*    Pointer to block of memory                                          */ \n-/*                                                                        */ \n-/*  CALLS                                                                 */ \n-/*                                                                        */ \n-/*    _ux_utility_memory_free_block_best_get Get best fit block of memory */ \n-/*    _ux_utility_memory_set                 Set block of memory          */ \n-/*                                                                        */ \n-/*  CALLED BY                                                             */ \n-/*                                                                        */ \n-/*    USBX Components                                                     */ \n-/*                                                                        */ \n-/*  RELEASE HISTORY                                                       */ \n-/*                                                                        */ \n-/*    DATE              NAME                      DESCRIPTION             */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*  INPUT                                                                 */\n+/*                                                                        */\n+/*    memory_alignment                      Memory alignment required     */\n+/*    memory_cache_flag                     Memory pool source            */\n+/*    memory_size_requested                 Number of bytes required      */\n+/*                                                                        */\n+/*  OUTPUT                                                                */\n+/*                                                                        */\n+/*    Pointer to block of memory                                          */\n+/*                                                                        */\n+/*  CALLS                                                                 */\n+/*                                                                        */\n+/*    _ux_utility_memory_free_block_best_get Get best fit block of memory */\n+/*    _ux_utility_memory_set                 Set block of memory          */\n+/*                                                                        */\n+/*  CALLED BY                                                             */\n+/*                                                                        */\n+/*    USBX Components                                                     */\n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            verified memset and memcpy  */\n@@ -77,24 +76,54 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            refined memory management,  */\n /*                                            fixed issue in 64-bit env,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,\n                                    ULONG memory_size_requested)\n {\n+UX_MEMORY_BYTE_POOL *pool_ptr;\n+UCHAR               *current_ptr;\n+UCHAR               *work_ptr;\n+UCHAR               *next_ptr;\n+ALIGN_TYPE          *free_ptr;\n+UCHAR               **this_block_link_ptr;\n+UCHAR               **next_block_link_ptr;\n+ULONG               available_bytes;\n \n-UX_MEMORY_BLOCK     *memory_block;\n-UX_MEMORY_BLOCK     *new_memory_block;\n-UX_MEMORY_BLOCK     *leftover_memory_block;\n-ULONG               memory_for_alignment;\n-ULONG               memory_removed_from_pool;\n-ULONG               leftover;\n-UCHAR               *memory_buffer;\n ALIGN_TYPE          int_memory_buffer;\n+#ifdef UX_ENABLE_MEMORY_STATISTICS\n+UINT                index;\n+#endif\n \n+    /* Get the pool ptr */\n+    if (memory_cache_flag == UX_REGULAR_MEMORY)\n+    {\n+        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];\n+    }\n+    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)\n+    {\n+        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];\n+    }\n+    else\n+    {\n+        return(UX_NULL);\n+    }\n+\n+    /* Check if pool_ptr is NX_NULL */\n+    if (pool_ptr == UX_NULL)\n+    {\n+        return(UX_NULL);\n+    }\n+\n+    /* Check if the memory size requested is 0.  */\n+    if (memory_size_requested == 0)\n+    {\n+        return(UX_NULL);\n+    }\n \n     /* Get the mutex as this is a critical section.  */\n     _ux_system_mutex_on(&_ux_system -> ux_system_mutex);\n@@ -105,304 +134,220 @@ ALIGN_TYPE          int_memory_buffer;\n     if (memory_alignment == UX_SAFE_ALIGN)\n     {\n \n-        /* We will use the memory_size_requested for the alignment. \n+        /* We will use the memory_size_requested for the alignment.\n            But we check to see if we have a minimum or maximum alignment.  */\n         if (memory_size_requested < UX_ALIGN_MIN)\n-        \n+\n             /* No need to bother about alignment for small packets sizes.  */\n             memory_alignment = UX_NO_ALIGN;\n-        \n+\n+        /* Check if we are over the maximum.  */\n+        else if (memory_size_requested > UX_MAX_SCATTER_GATHER_ALIGNMENT)\n+\n+            /* We are over the max alignment required. Use the maximum instead.  */\n+            memory_alignment = UX_MAX_SCATTER_GATHER_ALIGNMENT - 1;\n+\n+        /* We are not over the maximum, so approximate the alignment according to the size of the memory.\n+            Check range for alignment on 4096 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_2048 + 1)\n+            memory_alignment = UX_ALIGN_4096;\n+\n+        /* Check range for alignment on 2048 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_1024 + 1)\n+            memory_alignment = UX_ALIGN_2048;\n+\n+        /* Check range for alignment on 1024 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_512 + 1)\n+            memory_alignment = UX_ALIGN_1024;\n+\n+        /* Check range for alignment on 512 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_256 + 1)\n+            memory_alignment = UX_ALIGN_512;\n+\n+        /* Check range for alignment on 256 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_128 + 1)\n+            memory_alignment = UX_ALIGN_256;\n+\n+        /* Check range for alignment on 128 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_64 + 1)\n+            memory_alignment = UX_ALIGN_128;\n+\n+        /* Check range for alignment on 64 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_32 + 1)\n+            memory_alignment = UX_ALIGN_64;\n+\n+        /* Check range for alignment on 32 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_16 + 1)\n+            memory_alignment = UX_ALIGN_32;\n+\n+        /* Check range for alignment on 16 bytes.  */\n+        else if (memory_size_requested >= UX_ALIGN_8 + 1)\n+            memory_alignment = UX_ALIGN_16;\n+\n         else\n-        {\n-    \n-            /* Check if we are over the maximum.  */\n-            if (memory_size_requested > UX_MAX_SCATTER_GATHER_ALIGNMENT)\n-            \n-                /* We are over the max alignment required. Use the maximum instead.  */\n-                memory_alignment = UX_MAX_SCATTER_GATHER_ALIGNMENT - 1;\n-\n-            else\n-            {\n-                /* We are not over the maximum, so approximate the alignment according to the size of the memory.  \n-                   Check range for alignment on 4096 bytes.  */\n-                if (memory_size_requested >= UX_ALIGN_2048 + 1)\n-                    memory_alignment = UX_ALIGN_4096;\n-\n-                else\n-                {\n-\n-                       /* Check range for alignment on 2048 bytes.  */\n-                    if (memory_size_requested >= UX_ALIGN_1024 + 1)\n-                        memory_alignment = UX_ALIGN_2048;\n-            \n-                    else\n-                    {\n-\n-                           /* Check range for alignment on 1024 bytes.  */\n-                        if (memory_size_requested >= UX_ALIGN_512 + 1)\n-                            memory_alignment = UX_ALIGN_1024;\n-            \n-                        else\n-                        {\n-\n-                               /* Check range for alignment on 512 bytes.  */\n-                            if (memory_size_requested >= UX_ALIGN_256 + 1)\n-                                memory_alignment = UX_ALIGN_512;\n-                \n-                            else\n-                            {\n-\n-                                   /* Check range for alignment on 256 bytes.  */\n-                                if (memory_size_requested >= UX_ALIGN_128 + 1)\n-                                    memory_alignment = UX_ALIGN_256;\n-                    \n-                                else\n-                                {\n-                            \n-                                       /* Check range for alignment on 128 bytes.  */\n-                                    if (memory_size_requested >= UX_ALIGN_64 + 1)\n-                                        memory_alignment = UX_ALIGN_128;\n-                    \n-                                    else\n-                                    {\n-                            \n-                                           /* Check range for alignment on 128 bytes.  */\n-                                        if (memory_size_requested >= UX_ALIGN_64 + 1)\n-                                            memory_alignment = UX_ALIGN_128;\n-                    \n-                                        else\n-                                        {\n-                                \n-                                               /* Check range for alignment on 64 bytes.  */\n-                                            if (memory_size_requested >= UX_ALIGN_32 + 1)\n-                                                memory_alignment = UX_ALIGN_64;\n-                    \n-                                            else\n-                                            {\n-                                    \n-                                                   /* Check range for alignment on 32 bytes.  */\n-                                                if (memory_size_requested >= UX_ALIGN_16 + 1)\n-                                                    memory_alignment = UX_ALIGN_32;\n-                    \n-                                                else\n-                                                    memory_alignment = UX_ALIGN_MIN;\n-                                \n-\n-                                            }                        \n-                                        }                        \n-                                    }                        \n-                                }                        \n-                            }                        \n-                        }                        \n-                    }                        \n-                }\n-            }                \n-        }        \n+            memory_alignment = UX_ALIGN_MIN;\n     }\n \n #else\n \n     /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */\n     if (memory_alignment == UX_SAFE_ALIGN)\n         memory_alignment = UX_NO_ALIGN;\n-    \n+\n #endif\n \n     /* Ensure the alignment meats the minimum.  */\n     if (memory_alignment < UX_ALIGN_MIN)\n         memory_alignment =  UX_ALIGN_MIN;\n \n-    /* Adjust the memory alignment since our macros are one minus the desired alignment.\n-       Also determine the amount of extra memory we need for the alignment, which is one\n-       minus the actual alignment.  */\n-    memory_for_alignment =  memory_alignment;\n-    memory_alignment++;\n-\n-    /* We need to make sure that the next memory block buffer is 16-byte aligned too. We\n-       do this by first adjusting the requested memory to be 16-byte aligned. One problem\n-       now is that the memory block might not be a size that is a multiple of 16, so we need\n-       to add the amount of memory required such that the memory buffer after the block has \n-       the correct alignment. For example, if the memory block has a size of 24, then we need\n-       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so\n-       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */\n-    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);\n-    memory_size_requested += (((ULONG)sizeof(UX_MEMORY_BLOCK) + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)sizeof(UX_MEMORY_BLOCK);\n-\n-    /* Try to find the best block for this memory by requesting the maximum amount of\n-       memory we'll need which is calculated as follows: the amount memory requested by\n-       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory\n-       blocks structs - one for the new memory block we'll create for the user block and one\n-       that we might create if there is extra memory after doing the alignment.  */\n-    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));\n-\n-    /* If the block returned is NULL, there is no free memory in the pool\n-       for that size. */\n-    if (memory_block == UX_NULL)\n+    /* We need to make sure that the next memory block buffer is 8-byte aligned too. We\n+       do this by first adjusting the requested memory to be 8-byte aligned. One problem\n+       now is that the memory block might not be a size that is a multiple of 8, so we need\n+       to add the amount of memory required such that the memory buffer after the block has\n+       the correct alignment. For example, if the memory block has a size of 12, then we need\n+       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so\n+       that the memory right after the memory block is 8-byte aligned (16).  */\n+    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);\n+    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);\n+\n+    if (memory_alignment <= UX_ALIGN_MIN)\n+        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);\n+    else\n+        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);\n+\n+    /* Check if we found a memory block.  */\n+    if (current_ptr == UX_NULL)\n     {\n \n-        /* Release the protection.  */\n+        /* We could not find a memory block.  */\n         _ux_system_mutex_off(&_ux_system -> ux_system_mutex);\n \n-        /* If trace is enabled, insert this event into the trace buffer.  */\n         UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)\n \n         /* Error trap. */\n         _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);\n \n-        /* Return NULL to indicate no block was found.  */\n         return(UX_NULL);\n     }\n \n+    /* Pickup the next block's pointer.  */\n+    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);\n+    next_ptr =             *this_block_link_ptr;\n+\n+    /* Calculate the number of bytes available in this block.  */\n+    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);\n+    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;\n+\n     /* Get the memory buffer for this block.  */\n-    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));\n+    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));\n \n-    /* Are we already aligned?  */\n-    if ((int_memory_buffer & (memory_alignment - 1)) == 0)\n+    /* In case we are not aligned  */\n+    if ((int_memory_buffer & memory_alignment) != 0)\n     {\n \n-        /* Setup the new memory block.  */\n-        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);\n-        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;\n-        new_memory_block -> ux_memory_block_previous =  memory_block;\n-        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);\n-        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;\n+        /* No, we need to align the memory buffer.  */\n+        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;\n+        int_memory_buffer += memory_alignment;\n+        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);\n+        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;\n+\n+        /* Setup the new free block.  */\n+        next_ptr = (UCHAR *)int_memory_buffer;\n+\n+        /* Setup the new free block.  */\n+        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);\n+        *next_block_link_ptr =  *this_block_link_ptr;\n+        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));\n+        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);\n+        *free_ptr =             UX_BYTE_BLOCK_FREE;\n+\n+        /* Increase the total fragment counter.  */\n+        pool_ptr -> ux_byte_pool_fragments++;\n+\n+        /* Update the current pointer to point at the newly created block.  */\n+        *this_block_link_ptr =  next_ptr;\n \n-        /* Update the current memory block.  */\n-        memory_block -> ux_memory_block_size =  memory_size_requested;\n-        memory_block -> ux_memory_block_next =  new_memory_block;\n-        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;\n+        /* Calculate the available bytes.  */\n+        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);\n \n-        /* Declare how much memory we removed from the pool.  */\n-        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);\n+        /* Set Current pointer to the aligned memory buffer.  */\n+        current_ptr = next_ptr;\n     }\n-    else\n+\n+    /* Now we are aligned, determine if we need to split this block.  */\n+    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))\n     {\n \n-        /* Align the buffer. The first thing we do is increment by the size of a\n-           memory block because we have to make sure we have enough memory for at\n-           least that.  */\n-        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);\n-        int_memory_buffer +=  memory_alignment - 1;\n-        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);\n-\n-        /* Setup the new memory block. Note that its size is updated again later.  */\n-        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));\n-        new_memory_block -> ux_memory_block_previous =  memory_block;\n-        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;\n-        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;\n-        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;\n-\n-        /* Update the current memory block.  */\n-        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));\n-        memory_block -> ux_memory_block_next =  new_memory_block;\n-        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);\n-\n-        /* Update the new memory block's size.  */\n-        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));\n-\n-        /* Calculate how much memory is leftover in the new memory block after doing\n-           the alignment.  */\n-        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;\n-\n-        /* Can we fit another block after the new block? */\n-        if (leftover > sizeof(UX_MEMORY_BLOCK))\n-        {\n-\n-            /* Setup the leftover memory block.  */\n-            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested));\n-            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;\n-            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;\n-            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);\n-            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;\n-\n-            new_memory_block -> ux_memory_block_next =  leftover_memory_block;\n-            new_memory_block -> ux_memory_block_size -=  leftover;\n-        }\n-\n-        /* Declare how much memory we removed from the pool.  */\n-        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);\n-\n-        /* The new memory block is the one we give to the user.  */\n-        memory_block =  new_memory_block;\n-    }\n+        /* Split the block.  */\n+        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));\n \n-    /* The memory to be returned is after the block header.  */\n-    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);\n+        /* Setup the new free block.  */\n+        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);\n+        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);\n+        *next_block_link_ptr =  *this_block_link_ptr;\n+        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));\n+        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);\n+        *free_ptr =             UX_BYTE_BLOCK_FREE;\n \n-    /* Clear the memory block.  */\n-    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */\n+        /* Increase the total fragment counter.  */\n+        pool_ptr -> ux_byte_pool_fragments++;\n \n-    /* Update the memory free in the pool.  */\n-    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)\n-    {\n+        /* Update the current pointer to point at the newly created block.  */\n+        *this_block_link_ptr =  next_ptr;\n \n-        /* There is only one memory pool.  */\n-        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;\n+        /* Set available equal to memory size for subsequent calculation.  */\n+        available_bytes =  memory_size_requested;\n     }\n-    else\n-    {\n-\n-       switch (memory_cache_flag)\n-       {\n \n-            case UX_CACHE_SAFE_MEMORY:\n-                /* Update the amount of free memory in the cache safe memory pool.  */\n-                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;\n+    /* In any case, mark the current block as allocated.  */\n+    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));\n+    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);\n+    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);\n \n-            break;\n+    /* Reduce the number of available bytes in the pool.  */\n+    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);\n \n-            default:\n-                /* Update the amount of free memory in the regular memory pool.  */\n-                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;\n-            break;\n+    /* Determine if the search pointer needs to be updated. This is only done\n+        if the search pointer matches the block to be returned.  */\n+    if (current_ptr == pool_ptr -> ux_byte_pool_search)\n+    {\n \n-        }\n+        /* Yes, update the search pointer to the next block.  */\n+        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);\n+        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;\n     }\n \n+    /* Adjust the pointer for the application.  */\n+    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);\n+\n+    /* Clear the memory block.  */\n+    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */\n+\n #ifdef UX_ENABLE_MEMORY_STATISTICS\n \n     /* Update allocate count, total size.  */\n     if (memory_cache_flag == UX_REGULAR_MEMORY)\n-    {\n-        _ux_system -> ux_system_regular_memory_pool_alloc_count ++;\n-        _ux_system -> ux_system_regular_memory_pool_alloc_total += memory_size_requested;\n-        if (_ux_system -> ux_system_regular_memory_pool_alloc_max_count < _ux_system -> ux_system_regular_memory_pool_alloc_count)\n-            _ux_system -> ux_system_regular_memory_pool_alloc_max_count = _ux_system -> ux_system_regular_memory_pool_alloc_count;\n-        if (_ux_system -> ux_system_regular_memory_pool_alloc_max_total < _ux_system -> ux_system_regular_memory_pool_alloc_total)\n-            _ux_system -> ux_system_regular_memory_pool_alloc_max_total = _ux_system -> ux_system_regular_memory_pool_alloc_total;\n-    }\n+        index = UX_MEMORY_BYTE_POOL_REGULAR;\n     else\n-    {\n-        _ux_system -> ux_system_cache_safe_memory_pool_alloc_count ++;\n-        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total += memory_size_requested;\n-        if (_ux_system -> ux_system_cache_safe_memory_pool_alloc_max_count < _ux_system -> ux_system_cache_safe_memory_pool_alloc_count)\n-            _ux_system -> ux_system_cache_safe_memory_pool_alloc_max_count = _ux_system -> ux_system_cache_safe_memory_pool_alloc_count;\n-        if (_ux_system -> ux_system_cache_safe_memory_pool_alloc_max_total < _ux_system -> ux_system_cache_safe_memory_pool_alloc_total)\n-            _ux_system -> ux_system_cache_safe_memory_pool_alloc_max_total = _ux_system -> ux_system_cache_safe_memory_pool_alloc_total;\n-    }\n+        index = UX_MEMORY_BYTE_POOL_CACHE_SAFE;\n+\n+    /* Update allocate count, total size.  */\n+    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count ++;\n+    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total += (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);\n+\n+    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_max_count < _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count)\n+        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_max_count = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count;\n \n-    /* Log max usage of regular memory pool.  */\n-    memory_removed_from_pool = (ALIGN_TYPE)_ux_system -> ux_system_regular_memory_pool_start -\n-                               (ALIGN_TYPE)_ux_system -> ux_system_regular_memory_pool_base;\n-    if (memory_removed_from_pool > _ux_system -> ux_system_regular_memory_pool_max_start_offset)\n-        _ux_system -> ux_system_regular_memory_pool_max_start_offset = memory_removed_from_pool;\n-    if (_ux_system -> ux_system_regular_memory_pool_min_free > _ux_system -> ux_system_regular_memory_pool_free)\n-        _ux_system -> ux_system_regular_memory_pool_min_free = _ux_system -> ux_system_regular_memory_pool_free;\n-\n-    /* Log max usage of cache safe memory pool.  */\n-    memory_removed_from_pool = (ALIGN_TYPE)_ux_system -> ux_system_cache_safe_memory_pool_start -\n-                               (ALIGN_TYPE)_ux_system -> ux_system_cache_safe_memory_pool_base;\n-    if (memory_removed_from_pool > _ux_system -> ux_system_cache_safe_memory_pool_max_start_offset)\n-        _ux_system -> ux_system_cache_safe_memory_pool_max_start_offset = memory_removed_from_pool;\n-    if (_ux_system -> ux_system_cache_safe_memory_pool_min_free > _ux_system -> ux_system_cache_safe_memory_pool_free)\n-        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;\n+    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_max_total < _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total)\n+        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_max_total = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total;\n \n+    /* Log max usage of memory pool.  */\n+    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free > _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available)\n+        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available;\n #endif\n \n     /* Release the protection.  */\n     _ux_system_mutex_off(&_ux_system -> ux_system_mutex);\n \n-    /* The memory block pointer contains a memory area properly\n-       aligned.  */\n-    return(memory_buffer);\n-}                                \n+    return(work_ptr);\n+}"
        },
        {
            "filename": "common/core/src/ux_utility_memory_byte_pool_create.c",
            "diff": "@@ -0,0 +1,130 @@\n+/**************************************************************************/\n+/*                                                                        */\n+/*       Copyright (c) Microsoft Corporation. All rights reserved.        */\n+/*                                                                        */\n+/*       This software is licensed under the Microsoft Software License   */\n+/*       Terms for Microsoft Azure RTOS. Full text of the license can be  */\n+/*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */\n+/*       and in the root directory of this software.                      */\n+/*                                                                        */\n+/**************************************************************************/\n+\n+\n+/**************************************************************************/\n+/**************************************************************************/\n+/**                                                                       */\n+/** USBX Component                                                        */\n+/**                                                                       */\n+/**   USBX main stack                                                     */\n+/**                                                                       */\n+/**************************************************************************/\n+/**************************************************************************/\n+\n+\n+/* Include necessary system files.  */\n+\n+#define UX_SOURCE_CODE\n+\n+#include \"ux_api.h\"\n+\n+\n+/**************************************************************************/\n+/*                                                                        */\n+/*  FUNCTION                                               RELEASE        */\n+/*                                                                        */\n+/*    _ux_utility_memory_byte_pool_create                 PORTABLE C      */\n+/*                                                           6.3.0        */\n+/*  AUTHOR                                                                */\n+/*                                                                        */\n+/*    Yajun Xia, Microsoft Corporation                                    */\n+/*                                                                        */\n+/*  DESCRIPTION                                                           */\n+/*                                                                        */\n+/*    This function creates a pool of memory bytes in the specified       */\n+/*    memory area.                                                        */\n+/*                                                                        */\n+/*  INPUT                                                                 */\n+/*                                                                        */\n+/*    pool_ptr                          Pointer to pool control block     */\n+/*    pool_start                        Address of beginning of pool area */\n+/*    pool_size                         Number of bytes in the byte pool  */\n+/*                                                                        */\n+/*  OUTPUT                                                                */\n+/*                                                                        */\n+/*    UX_SUCCESS                        Successful completion status      */\n+/*                                                                        */\n+/*  CALLS                                                                 */\n+/*                                                                        */\n+/*    None                                                                */\n+/*                                                                        */\n+/*  CALLED BY                                                             */\n+/*                                                                        */\n+/*    USBX Components                                                     */\n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n+/*                                                                        */\n+/**************************************************************************/\n+UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)\n+{\n+\n+UCHAR               *block_ptr;\n+UCHAR               **block_indirect_ptr;\n+UCHAR               *temp_ptr;\n+ALIGN_TYPE          *free_ptr;\n+\n+\n+    /* Initialize the byte pool control block to all zeros.  */\n+    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */\n+\n+    /* Round the pool size down to something that is evenly divisible by\n+       an ULONG.  */\n+    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));\n+\n+    /* Save the start and size of the pool.  */\n+    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);\n+    pool_ptr -> ux_byte_pool_size =    pool_size;\n+    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);\n+\n+    /* Initially, the pool will have two blocks.  One large block at the\n+       beginning that is available and a small allocated block at the end\n+       of the pool that is there just for the algorithm.  Be sure to count\n+       the available block's header in the available bytes count.  */\n+    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));\n+    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);\n+\n+    /* Each block contains a \"next\" pointer that points to the next block in the pool followed by a ALIGN_TYPE\n+       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the\n+       owning pool (if the block is allocated).  */\n+\n+    /* Calculate the end of the pool's memory area.  */\n+    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);\n+    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);\n+\n+    /* Backup the end of the pool pointer and build the pre-allocated block.  */\n+    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));\n+\n+    /* Cast the pool pointer into a ULONG.  */\n+    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);\n+    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);\n+    *block_indirect_ptr =  temp_ptr;\n+\n+    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));\n+    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);\n+    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);\n+\n+    /* Now setup the large available block in the pool.  */\n+    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);\n+    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);\n+    *block_indirect_ptr =  block_ptr;\n+    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);\n+    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));\n+    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);\n+    *free_ptr =            UX_BYTE_BLOCK_FREE;\n+\n+    /* Return UX_SUCCESS.  */\n+    return(UX_SUCCESS);\n+}"
        },
        {
            "filename": "common/core/src/ux_utility_memory_byte_pool_search.c",
            "diff": "@@ -0,0 +1,215 @@\n+/**************************************************************************/\n+/*                                                                        */\n+/*       Copyright (c) Microsoft Corporation. All rights reserved.        */\n+/*                                                                        */\n+/*       This software is licensed under the Microsoft Software License   */\n+/*       Terms for Microsoft Azure RTOS. Full text of the license can be  */\n+/*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */\n+/*       and in the root directory of this software.                      */\n+/*                                                                        */\n+/**************************************************************************/\n+\n+\n+/**************************************************************************/\n+/**************************************************************************/\n+/**                                                                       */\n+/** USBX Component                                                        */\n+/**                                                                       */\n+/**   USBX main stack                                                     */\n+/**                                                                       */\n+/**************************************************************************/\n+/**************************************************************************/\n+\n+\n+/* Include necessary system files.  */\n+\n+#define UX_SOURCE_CODE\n+\n+#include \"ux_api.h\"\n+\n+\n+/**************************************************************************/\n+/*                                                                        */\n+/*  FUNCTION                                               RELEASE        */\n+/*                                                                        */\n+/*    _ux_utility_memory_byte_pool_search                 PORTABLE C      */\n+/*                                                           6.3.0        */\n+/*  AUTHOR                                                                */\n+/*                                                                        */\n+/*    Yajun Xia, Microsoft Corporation                                    */\n+/*                                                                        */\n+/*  DESCRIPTION                                                           */\n+/*                                                                        */\n+/*    This function searches a byte pool for a memory block to satisfy    */\n+/*    the requested number of bytes.  Merging of adjacent free blocks     */\n+/*    takes place during the search.                                      */\n+/*                                                                        */\n+/*  INPUT                                                                 */\n+/*                                                                        */\n+/*    pool_ptr                          Pointer to pool control block     */\n+/*    memory_size                       Number of bytes required          */\n+/*                                                                        */\n+/*  OUTPUT                                                                */\n+/*                                                                        */\n+/*    UCHAR *                           Pointer to the allocated memory,  */\n+/*                                        if successful.  Otherwise, a    */\n+/*                                        NULL is returned                */\n+/*                                                                        */\n+/*  CALLS                                                                 */\n+/*                                                                        */\n+/*    None                                                                */\n+/*                                                                        */\n+/*  CALLED BY                                                             */\n+/*                                                                        */\n+/*    USBX Components                                                     */\n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n+/*                                                                        */\n+/**************************************************************************/\n+UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)\n+{\n+UCHAR               *current_ptr;\n+UCHAR               *next_ptr;\n+UCHAR               **this_block_link_ptr;\n+UCHAR               **next_block_link_ptr;\n+ULONG               available_bytes;\n+UINT                examine_blocks;\n+UINT                first_free_block_found =  UX_FALSE;\n+ALIGN_TYPE          *free_ptr;\n+UCHAR               *work_ptr;\n+ULONG               total_theoretical_available;\n+\n+    /* First, determine if there are enough bytes in the pool.  */\n+    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */\n+    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);\n+    if (memory_size >= total_theoretical_available)\n+    {\n+\n+        /* Not enough memory, return a NULL pointer.  */\n+        return(UX_NULL);\n+    }\n+\n+    /* Check if the search pointer is valid.  */\n+    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||\n+        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))\n+    {\n+\n+        /* Return a NULL pointer.  */\n+        return(UX_NULL);\n+    }\n+\n+    /* Walk through the memory pool in search for a large enough block.  */\n+    current_ptr =      pool_ptr -> ux_byte_pool_search;\n+    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);\n+    available_bytes =  ((ULONG) 0);\n+    do\n+    {\n+        /* Check to see if this block is free.  */\n+        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));\n+        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);\n+        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)\n+        {\n+\n+            /* Determine if this is the first free block.  */\n+            if (first_free_block_found == UX_FALSE)\n+            {\n+                /* This is the first free block.  */\n+                pool_ptr->ux_byte_pool_search =  current_ptr;\n+\n+                /* Set the flag to indicate we have found the first free\n+                    block.  */\n+                first_free_block_found =  UX_TRUE;\n+            }\n+\n+            /* Block is free, see if it is large enough.  */\n+\n+            /* Pickup the next block's pointer.  */\n+            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);\n+            next_ptr =             *this_block_link_ptr;\n+\n+            /* Calculate the number of bytes available in this block.  */\n+            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);\n+            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;\n+\n+            /* If this is large enough, we are done because our first-fit algorithm\n+                has been satisfied!  */\n+            if (available_bytes >= memory_size)\n+            {\n+\n+                /* Get out of the search loop!  */\n+                break;\n+            }\n+            else\n+            {\n+\n+                /* Clear the available bytes variable.  */\n+                available_bytes =  ((ULONG) 0);\n+\n+                /* Not enough memory, check to see if the neighbor is\n+                    free and can be merged.  */\n+                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));\n+                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);\n+                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)\n+                {\n+\n+                    /* Yes, neighbor block can be merged!  This is quickly accomplished\n+                        by updating the current block with the next blocks pointer.  */\n+                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);\n+                    *this_block_link_ptr =  *next_block_link_ptr;\n+\n+                    /* Reduce the fragment total.  We don't need to increase the bytes\n+                        available because all free headers are also included in the available\n+                        count.  */\n+                    pool_ptr -> ux_byte_pool_fragments--;\n+\n+                    /* See if the search pointer is affected.  */\n+                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)\n+                    {\n+                        /* Yes, update the search pointer.   */\n+                        pool_ptr -> ux_byte_pool_search =  current_ptr;\n+                    }\n+                }\n+                else\n+                {\n+                    /* Neighbor is not free so we can skip over it!  */\n+                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);\n+                    current_ptr =  *next_block_link_ptr;\n+\n+                    /* Decrement the examined block count to account for this one.  */\n+                    if (examine_blocks != ((UINT) 0))\n+                    {\n+                        examine_blocks--;\n+                    }\n+                }\n+            }\n+        }\n+        else\n+        {\n+\n+            /* Block is not free, move to next block.  */\n+            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);\n+            current_ptr =  *this_block_link_ptr;\n+        }\n+\n+        /* Another block has been searched... decrement counter.  */\n+        if (examine_blocks != ((UINT) 0))\n+        {\n+\n+            examine_blocks--;\n+        }\n+\n+    } while(examine_blocks != ((UINT) 0));\n+\n+    /* If a block was found, just return. */\n+    if (available_bytes == ((ULONG) 0))\n+    {\n+        return(UX_NULL);\n+    }\n+\n+    /* Return the search pointer.  */\n+    return(current_ptr);\n+}"
        },
        {
            "filename": "common/core/src/ux_utility_memory_free.c",
            "diff": "@@ -12,8 +12,8 @@\n \n /**************************************************************************/\n /**************************************************************************/\n-/**                                                                       */ \n-/** USBX Component                                                        */ \n+/**                                                                       */\n+/** USBX Component                                                        */\n /**                                                                       */\n /**   Utility                                                             */\n /**                                                                       */\n@@ -28,59 +28,70 @@\n #include \"ux_api.h\"\n \n \n-/**************************************************************************/ \n-/*                                                                        */ \n-/*  FUNCTION                                               RELEASE        */ \n-/*                                                                        */ \n-/*    _ux_utility_memory_free                             PORTABLE C      */ \n-/*                                                           6.1.10       */\n+/**************************************************************************/\n+/*                                                                        */\n+/*  FUNCTION                                               RELEASE        */\n+/*                                                                        */\n+/*    _ux_utility_memory_free                             PORTABLE C      */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n /*                                                                        */\n /*  DESCRIPTION                                                           */\n-/*                                                                        */ \n-/*    This function frees a previously allocated memory block.            */ \n-/*                                                                        */ \n-/*  INPUT                                                                 */ \n-/*                                                                        */ \n-/*    memory                                Pointer to memory block       */ \n-/*                                                                        */ \n-/*  OUTPUT                                                                */ \n-/*                                                                        */ \n-/*    None                                                                */ \n-/*                                                                        */ \n-/*  CALLS                                                                 */ \n-/*                                                                        */ \n-/*    _ux_utility_mutex_on                  Start system protection       */ \n-/*    _ux_utility_mutex_off                 End system protection         */ \n-/*                                                                        */ \n-/*  CALLED BY                                                             */ \n-/*                                                                        */ \n-/*    USBX Components                                                     */ \n-/*                                                                        */ \n-/*  RELEASE HISTORY                                                       */ \n-/*                                                                        */ \n-/*    DATE              NAME                      DESCRIPTION             */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*    This function frees a previously allocated memory block.            */\n+/*                                                                        */\n+/*  INPUT                                                                 */\n+/*                                                                        */\n+/*    memory                                Pointer to memory block       */\n+/*                                                                        */\n+/*  OUTPUT                                                                */\n+/*                                                                        */\n+/*    None                                                                */\n+/*                                                                        */\n+/*  CALLS                                                                 */\n+/*                                                                        */\n+/*    _ux_utility_mutex_on                  Start system protection       */\n+/*    _ux_utility_mutex_off                 End system protection         */\n+/*                                                                        */\n+/*  CALLED BY                                                             */\n+/*                                                                        */\n+/*    USBX Components                                                     */\n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Yajun Xia, CQ Xiao       Modified comment(s),          */\n+/*                                            added some error traps,     */\n+/*                                            refined memory management,  */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_utility_memory_free(VOID *memory)\n {\n-\n-UX_MEMORY_BLOCK     *memory_block;\n-UX_MEMORY_BLOCK     *next_block;\n-ULONG               memory_size_returned;\n-UCHAR               *memory_address;\n+UX_MEMORY_BYTE_POOL *pool_ptr;\n+UCHAR               *work_ptr;\n+UCHAR               *temp_ptr;\n+UCHAR               *next_block_ptr;\n+\n+ALIGN_TYPE          *free_ptr;\n+UX_MEMORY_BYTE_POOL **byte_pool_ptr;\n+UCHAR               **block_link_ptr;\n #ifdef UX_ENABLE_MEMORY_POOL_SANITY_CHECK\n+UCHAR               *memory_address;\n UCHAR               *regular_start, *regular_end;\n UCHAR               *cache_safe_start, *cache_safe_end;\n+#endif\n+#ifdef UX_ENABLE_MEMORY_STATISTICS\n+UINT                index;\n #endif\n \n     /* Get the mutex as this is a critical section.  */\n@@ -89,12 +100,13 @@ UCHAR               *cache_safe_start, *cache_safe_end;\n #ifdef UX_ENABLE_MEMORY_POOL_SANITY_CHECK\n \n     /* Sanity check, check if the memory is in memory pool.  */\n-    regular_start = (UCHAR *)_ux_system -> ux_system_regular_memory_pool_start;\n-    regular_end = regular_start + _ux_system -> ux_system_regular_memory_pool_size;\n-    regular_start += sizeof(UX_MEMORY_BLOCK);\n-    cache_safe_start = (UCHAR *)_ux_system -> ux_system_cache_safe_memory_pool_start;\n-    cache_safe_end = cache_safe_start + _ux_system -> ux_system_cache_safe_memory_pool_size;\n-    cache_safe_start += sizeof(UX_MEMORY_BLOCK);\n+    regular_start = (UCHAR *)_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] -> ux_byte_pool_start;\n+    regular_end = regular_start + _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] -> ux_byte_pool_size;\n+    regular_start += UX_MEMORY_BLOCK_HEADER_SIZE;\n+    cache_safe_start = (UCHAR *)_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] -> ux_byte_pool_start;\n+    cache_safe_end = cache_safe_start + _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] -> ux_byte_pool_size;\n+    cache_safe_start += UX_MEMORY_BLOCK_HEADER_SIZE;\n+\n     memory_address = (UCHAR *)memory;\n     if (!((memory_address >= regular_start    && memory_address < regular_end) ||\n           (memory_address >= cache_safe_start && memory_address < cache_safe_end)))\n@@ -112,117 +124,103 @@ UCHAR               *cache_safe_start, *cache_safe_end;\n     }\n #endif\n \n-    /* The memory block for this memory pointer is located right before the\n-       memory.  */\n-    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));\n-    \n-    /* Keep track of the memory returned to the pool.  */\n-    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);\n+    /* Set the pool pointer to NULL.  */\n+    pool_ptr =  UX_NULL;\n \n-    /* Check this memory block to see if it valid.  */\n-    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&\n-        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))\n+    /* Determine if the memory pointer is valid.  */\n+    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);\n+    if (work_ptr != UX_NULL)\n     {\n \n-        /* Not valid. Release the protection.  */\n-        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);\n+        /* Back off the memory pointer to pickup its header.  */\n+        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);\n \n-        /* Error trap. */\n-        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);\n+        /* There is a pointer, pickup the pool pointer address.  */\n+        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));\n+        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);\n+        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)\n+        {\n \n-        /* If trace is enabled, insert this event into the trace buffer.  */\n-        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)\n+            /* Pickup the pool pointer.  */\n+            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));\n+            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);\n+            pool_ptr = *byte_pool_ptr;\n \n-        /* Return to caller.  */\n-        return;\n-    }\n+            /* See if we have a valid pool pointer.  */\n+            if ((pool_ptr == UX_NULL) ||\n+                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&\n+                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))\n+            {\n \n-#ifdef UX_ENABLE_MEMORY_STATISTICS\n+                /* Release the protection.  */\n+                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);\n \n-    /* Update allocate count, total size.  */\n-    if (memory_block -> ux_memory_block_status == (UX_MEMORY_USED | UX_REGULAR_MEMORY))\n-    {\n-        _ux_system -> ux_system_regular_memory_pool_alloc_count --;\n-        _ux_system -> ux_system_regular_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;\n-    }\n-    else\n-    {\n-        _ux_system -> ux_system_cache_safe_memory_pool_alloc_count --;\n-        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;\n-    }\n-#endif\n+                /* Error trap: maybe double free/memory issue here!  */\n+                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,\n+                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);\n \n-    /* We mark this memory block as being unused.  */\n-    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;\n-    \n-    /* Now we must concatenate as many free blocks as possible,\n-       that include the blocks before and the blocks after the current\n-       block.  Scan memory backwards.  */\n+                /* Return to caller.  */\n+                return;\n+            }\n+        }\n+        else\n+        {\n+            /* Release the protection.  */\n+            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);\n \n-     while (memory_block -> ux_memory_block_previous !=UX_NULL)\n-     {\n+            /* Error trap: maybe double free/memory issue here!  */\n+            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,\n+                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);\n \n-        /* Check if the block is free.  */            \n-        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)\n+            /* Return to caller.  */\n+            return;\n+        }\n+    }\n+    else\n+    {\n \n-            /* The memory block before is free. This will be our starting point to \n-               concatenate memory.  */\n-            memory_block =  memory_block -> ux_memory_block_previous;\n+        /* Release the protection.  */\n+        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);\n \n-        else\n+        /* Error trap: maybe double free/bad flow here!  */\n+        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,\n+                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);\n \n-            /* The previous memory block is not free.  */\n-            break;\n+        /* Return to caller.  */\n+        return;\n     }\n \n-    /* The pointer to the memory block is now our first free block. We use this \n-       starting address to concatenate all the contiguous memory block.  */\n-    next_block =  memory_block -> ux_memory_block_next;\n-    while (next_block != UX_NULL)\n-    {\n-\n-        /* Determine if the memory block is used.  */\n-        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)\n-        {\n+    /* At this point, we know that the pool pointer is valid.  */\n \n-            /* Yes, move to next block.  */\n-            memory_block -> ux_memory_block_next =  next_block;\n-            next_block -> ux_memory_block_previous =  memory_block;\n-            break;\n-        }\n+    /* Release the memory.  */\n+    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));\n+    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);\n+    *free_ptr =  UX_BYTE_BLOCK_FREE;\n \n-        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;\n-        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);\n-        next_block =  next_block -> ux_memory_block_next;                       \n-    }\n+    /* Update the number of available bytes in the pool.  */\n+    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);\n+    next_block_ptr =  *block_link_ptr;\n+    pool_ptr -> ux_byte_pool_available =\n+        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);\n \n-    /* Update the memory free in the appropriate pool.  We need to know if this \n-       block is in regular memory or cache safe memory.  */\n-    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)\n+    /* Determine if the free block is prior to current search pointer.  */\n+    if (work_ptr < (pool_ptr -> ux_byte_pool_search))\n     {\n \n-        /* There is only one regular memory pool.  */\n-        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;\n-        \n+        /* Yes, update the search pointer to the released block.  */\n+        pool_ptr -> ux_byte_pool_search =  work_ptr;\n     }\n-    else\n-    {\n-\n-        /* Which pool is this memory in ?  */\n-        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;\n-        \n-        /* If the memory address is in this range, we are in the regular memory pool.  */\n-        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))\n \n-            /* Update the regular memory pool.  */\n-            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;\n+#ifdef UX_ENABLE_MEMORY_STATISTICS\n+    if (((UCHAR*)memory >= _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] -> ux_byte_pool_start) &&\n+        ((UCHAR*)memory < (_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] -> ux_byte_pool_start + _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] -> ux_byte_pool_size)))\n+        index = UX_MEMORY_BYTE_POOL_REGULAR;\n+    else\n+        index = UX_MEMORY_BYTE_POOL_CACHE_SAFE;\n \n-        else\n-        \n-            /* Update the cache safe memory pool.  */\n-            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;\n-        \n-    }\n+    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count --;\n+    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total -= UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);\n+#endif\n \n     /* Release the protection.  */\n     _ux_system_mutex_off(&_ux_system -> ux_system_mutex);"
        },
        {
            "filename": "common/core/src/ux_utility_memory_free_block_best_get.c",
            "diff": "@@ -12,8 +12,8 @@\n \n /**************************************************************************/\n /**************************************************************************/\n-/**                                                                       */ \n-/** USBX Component                                                        */ \n+/**                                                                       */\n+/** USBX Component                                                        */\n /**                                                                       */\n /**   USBX main stack                                                     */\n /**                                                                       */\n@@ -28,57 +28,64 @@\n #include \"ux_api.h\"\n \n \n-/**************************************************************************/ \n-/*                                                                        */ \n-/*  FUNCTION                                               RELEASE        */ \n-/*                                                                        */ \n-/*    _ux_utility_memory_free_block_best_get              PORTABLE C      */ \n-/*                                                           6.1          */\n+/**************************************************************************/\n+/*                                                                        */\n+/*  FUNCTION                                               RELEASE        */\n+/*                                                                        */\n+/*    _ux_utility_memory_free_block_best_get              PORTABLE C      */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n /*                                                                        */\n /*  DESCRIPTION                                                           */\n-/*                                                                        */ \n-/*    This function returns the best free memory block.                   */ \n-/*                                                                        */ \n-/*  INPUT                                                                 */ \n-/*                                                                        */ \n-/*    memory_cache_flag                     Memory pool source            */ \n-/*    memory_size_requested                 Size of memory requested      */ \n-/*                                                                        */ \n-/*  OUTPUT                                                                */ \n-/*                                                                        */ \n-/*    Pointer to best free block                                          */ \n-/*                                                                        */ \n-/*  CALLS                                                                 */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*    This function returns the best free memory block.                   */\n+/*                                                                        */\n+/*    It's deprecated.                                                    */\n+/*                                                                        */\n+/*  INPUT                                                                 */\n+/*                                                                        */\n+/*    memory_cache_flag                     Memory pool source            */\n+/*    memory_size_requested                 Size of memory requested      */\n+/*                                                                        */\n+/*  OUTPUT                                                                */\n+/*                                                                        */\n+/*    Pointer to best free block                                          */\n+/*                                                                        */\n+/*  CALLS                                                                 */\n+/*                                                                        */\n /*    None                                                                */\n-/*                                                                        */ \n-/*  CALLED BY                                                             */ \n-/*                                                                        */ \n-/*    USBX Components                                                     */ \n-/*                                                                        */ \n-/*  RELEASE HISTORY                                                       */ \n-/*                                                                        */ \n-/*    DATE              NAME                      DESCRIPTION             */ \n-/*                                                                        */ \n+/*                                                                        */\n+/*  CALLED BY                                                             */\n+/*                                                                        */\n+/*    USBX Components                                                     */\n+/*                                                                        */\n+/*  RELEASE HISTORY                                                       */\n+/*                                                                        */\n+/*    DATE              NAME                      DESCRIPTION             */\n+/*                                                                        */\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            deprecated for memory       */\n+/*                                            footprint optimization,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n-UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, \n+#if 0\n+UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag,\n                                                         ULONG memory_size_requested)\n {\n \n UX_MEMORY_BLOCK     *memory_block;\n UX_MEMORY_BLOCK     *best_memory_block;\n-    \n+\n \n     /* Reset the free memory block.  */\n     best_memory_block =  UX_NULL;\n-    \n+\n     /* Check the type of memory we need.  */\n     switch (memory_cache_flag)\n     {\n@@ -88,15 +95,15 @@ UX_MEMORY_BLOCK     *best_memory_block;\n             /* Start at the beginning of the regular memory pool.  */\n             memory_block =  _ux_system -> ux_system_regular_memory_pool_start;\n             break;\n-            \n+\n         case UX_CACHE_SAFE_MEMORY       :\n \n             /* Start at the beginning of the cache safe memory pool.  */\n             memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;\n             break;\n-        \n+\n         default                            :\n-        \n+\n             /* Wrong memory type.  */\n             return(UX_NULL);\n \n@@ -110,11 +117,11 @@ UX_MEMORY_BLOCK     *best_memory_block;\n         if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)\n         {\n \n-            /* Check the size of this free block and see if it will \n+            /* Check the size of this free block and see if it will\n                fit the memory requirement.  */\n             if (memory_block -> ux_memory_block_size > memory_size_requested)\n             {\n-                \n+\n                 /* This memory block will do. Now see if it is the best.\n                    The best memory block is the one whose memory is closest\n                    to the memory requested.  */\n@@ -129,15 +136,15 @@ UX_MEMORY_BLOCK     *best_memory_block;\n \n                         /* We have discovered a better fit block.  */\n                         best_memory_block =  memory_block;\n-                }                    \n+                }\n             }\n         }\n \n-        /* Search the next free block until the end.  */            \n+        /* Search the next free block until the end.  */\n         memory_block =  memory_block -> ux_memory_block_next;\n     }\n \n     /* If no free memory block was found, the return value will be NULL.  */\n-    return(best_memory_block);        \n-}                                \n-\n+    return(best_memory_block);\n+}\n+#endif"
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_audio.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_audio.h                             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -65,10 +65,11 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -422,10 +423,6 @@ typedef struct UX_DEVICE_CLASS_AUDIO_STREAM_STRUCT\n     UX_SLAVE_INTERFACE                      *ux_device_class_audio_stream_interface;\n     UX_SLAVE_ENDPOINT                       *ux_device_class_audio_stream_endpoint;\n \n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-    UCHAR                                   *ux_device_class_audio_stream_endpoint_buffer;\n-#endif\n-\n #if defined(UX_DEVICE_CLASS_AUDIO_FEEDBACK_SUPPORT)\n     UX_SLAVE_ENDPOINT                       *ux_device_class_audio_stream_feedback;\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_audio10.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_audio10.h                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -57,9 +57,9 @@\n /*                                            added error checks support, */\n /*                                            fixed a macro name,         */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_audio20.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_audio20.h                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -58,9 +58,9 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_ccid.h",
            "diff": "@@ -24,7 +24,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_ccid.h                              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -42,9 +42,9 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Yajun xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun xia, CQ Xiao       Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_cdc_acm.h",
            "diff": "@@ -24,7 +24,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_device_class_cdc_acm.h                           PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -58,12 +58,12 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added write auto ZLP,       */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Yajun xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun xia, CQ Xiao       Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_cdc_ecm.h",
            "diff": "@@ -24,7 +24,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_device_class_cdc_ecm.h                           PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -55,10 +55,11 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added wait definitions,     */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -99,11 +100,26 @@ VOID  _ux_network_driver_link_down(VOID *ux_network_handle);\n #endif\n \n \n+/* Option: defined, it enables zero copy support (works if CDC_ECM owns endpoint buffer).\n+    Enabled, it requires that the NX packet pool is in cache safe area, and buffer max size is\n+    larger than UX_DEVICE_CLASS_CDC_ECM_ETHERNET_PACKET_SIZE (1536).\n+ */\n+/* #define UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY  */\n+\n+\n /* Bulk out endpoint buffer size, must be larger than endpoint and ethernet max packet size, and aligned in 4-bytes.  */\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+#define UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE                      0\n+#else\n #define UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE                      UX_DEVICE_CLASS_CDC_ECM_MAX_PACKET_LENGTH\n+#endif\n \n /* Bulk in endpoint buffer size, must be larger than endpoint and ethernet max packet size, and aligned in 4-bytes.  */\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+#define UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE                       0\n+#else\n #define UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE                       UX_DEVICE_CLASS_CDC_ECM_ETHERNET_PACKET_SIZE\n+#endif\n \n /* Interrupt in endpoint buffer size...  */\n #define UX_DEVICE_CLASS_CDC_ECM_INTERRUPTIN_BUFFER_SIZE                  UX_DEVICE_CLASS_CDC_ECM_INTERRUPT_RESPONSE_LENGTH\n@@ -370,12 +386,16 @@ typedef struct UX_SLAVE_CLASS_CDC_ECM_STRUCT\n } UX_SLAVE_CLASS_CDC_ECM;\n \n /* Define CDC ECM endpoint buffer settings (when CDC ECM owns buffer).  */\n+#if defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+#define UX_DEVICE_CLASS_CDC_ECM_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW 0 /* No calculation, no overflow  */\n+#else\n #define UX_DEVICE_CLASS_CDC_ECM_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW \\\n     (UX_OVERFLOW_CHECK_ADD_ULONG(UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE,   \\\n                                  UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE) || \\\n      UX_OVERFLOW_CHECK_ADD_ULONG(UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE +  \\\n                                  UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE,    \\\n                                  UX_DEVICE_CLASS_CDC_ECM_INTERRUPTIN_BUFFER_SIZE))\n+#endif\n #define UX_DEVICE_CLASS_CDC_ECM_ENDPOINT_BUFFER_SIZE        (UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE + UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE + UX_DEVICE_CLASS_CDC_ECM_INTERRUPTIN_BUFFER_SIZE)\n #define UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER(ecm)         ((ecm)->ux_device_class_cdc_ecm_endpoint_buffer)\n #define UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER(ecm)          (UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER(ecm) + UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE)"
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_dfu.h",
            "diff": "@@ -24,7 +24,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_device_class_dfu.h                               PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -60,9 +60,9 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added macros for req types, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_hid.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_hid.h                               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -64,12 +64,12 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone int out,   */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            moved build option check,   */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_pima.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_device_class_pima.h                              PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -58,11 +58,12 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed standalone compile,   */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            optimized PIMA data sets,   */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -729,18 +730,20 @@ typedef struct UX_SLAVE_CLASS_PIMA_OBJECT_STRUCT\n {\n \n     ULONG                   ux_device_class_pima_object_storage_id;\n-    ULONG                   ux_device_class_pima_object_format;\n-    ULONG                   ux_device_class_pima_object_protection_status;\n+    USHORT                  ux_device_class_pima_object_format;\n+    USHORT                  ux_device_class_pima_object_protection_status;\n     ULONG                   ux_device_class_pima_object_compressed_size;\n-    ULONG                   ux_device_class_pima_object_thumb_format;\n+    USHORT                  ux_device_class_pima_object_thumb_format;\n+    USHORT                  _align_thumb_compressed_size;\n     ULONG                   ux_device_class_pima_object_thumb_compressed_size;\n     ULONG                   ux_device_class_pima_object_thumb_pix_width;\n     ULONG                   ux_device_class_pima_object_thumb_pix_height;\n     ULONG                   ux_device_class_pima_object_image_pix_width;\n     ULONG                   ux_device_class_pima_object_image_pix_height;\n     ULONG                   ux_device_class_pima_object_image_bit_depth;\n     ULONG                   ux_device_class_pima_object_parent_object;\n-    ULONG                   ux_device_class_pima_object_association_type;\n+    USHORT                  ux_device_class_pima_object_association_type;\n+    USHORT                  _align_association_desc;\n     ULONG                   ux_device_class_pima_object_association_desc;\n     ULONG                   ux_device_class_pima_object_sequence_number;\n     UCHAR                   ux_device_class_pima_object_filename[UX_DEVICE_CLASS_PIMA_UNICODE_MAX_LENGTH];\n@@ -798,9 +801,10 @@ typedef struct UX_SLAVE_CLASS_PIMA_DEVICE_STRUCT\n typedef struct UX_SLAVE_CLASS_PIMA_STORAGE_STRUCT                                        \n {                                                                                       \n                                                                                         \n-    ULONG                   ux_device_class_pima_storage_type;                                               \n-    ULONG                   ux_device_class_pima_storage_file_system_type;                                   \n-    ULONG                   ux_device_class_pima_storage_access_capability;                                  \n+    USHORT                  ux_device_class_pima_storage_type;                                               \n+    USHORT                  ux_device_class_pima_storage_file_system_type;                                   \n+    USHORT                  ux_device_class_pima_storage_access_capability;                                  \n+    USHORT                  _align_max_capacity_low;\n     ULONG                   ux_device_class_pima_storage_max_capacity_low;                                   \n     ULONG                   ux_device_class_pima_storage_max_capacity_high;                                  \n     ULONG                   ux_device_class_pima_storage_free_space_bytes_low;                               "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_printer.h",
            "diff": "@@ -24,7 +24,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_printer.h                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -50,11 +50,11 @@\n /*  03-08-2023     Yajun xia                Modified comment(s),          */\n /*                                            added error checks support, */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Yajun Xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia, CQ Xiao       Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            fixed error checking issue, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -77,6 +77,16 @@ extern   \"C\" {\n #define UX_DEVICE_CLASS_PRINTER_ENABLE_ERROR_CHECKING\n #endif\n \n+\n+/* Option: defined, it enables zero copy support (works if PRINTER owns endpoint buffer).\n+    Defined, it enables zero copy for bulk in/out endpoints (write/read). In this case, the endpoint\n+    buffer is not allocated in class, application must provide the buffer for read/write, and the\n+    buffer must meet device controller driver (DCD) buffer requirements (e.g., aligned and cache\n+    safe if buffer is for DMA).\n+ */\n+/* #define UX_DEVICE_CLASS_PRINTER_ZERO_COPY  */\n+\n+\n /* Defined, _write is pending ZLP automatically (complete transfer) after buffer is sent.  */\n \n /* #define UX_DEVICE_CLASS_PRINTER_WRITE_AUTO_ZLP  */\n@@ -93,6 +103,13 @@ extern   \"C\" {\n #endif\n \n \n+/* Internal: check if class own endpoint buffer  */\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) &&                                   \\\n+    (!defined(UX_DEVICE_CLASS_PRINTER_ZERO_COPY))\n+#define UX_DEVICE_CLASS_PRINTER_OWN_ENDPOINT_BUFFER\n+#endif\n+\n+\n /* Define Printer Class USB Class constants.  */\n #define UX_DEVICE_CLASS_PRINTER_CLASS                                    7\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_rndis.h",
            "diff": "@@ -24,7 +24,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_device_class_rndis.h                             PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -55,11 +55,12 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added wait and length DEFs, */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            improved error checking,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -76,11 +77,27 @@ extern   \"C\" {\n \n #endif  \n \n+\n+/* Option: defined, it enables zero copy support (works if HID owns endpoint buffer).\n+    Enabled, it requires that the NX packet pool is in cache safe area, and buffer max size is\n+    larger than UX_DEVICE_CLASS_RNDIS_MAX_PACKET_TRANSFER_SIZE (1600).\n+ */\n+/* #define UX_DEVICE_CLASS_RNDIS_ZERO_COPY  */\n+\n+\n /* Bulk out endpoint buffer size (UX_DEVICE_CLASS_RNDIS_MAX_PACKET_TRANSFER_SIZE).  */\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n+#define UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE                       0\n+#else\n #define UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE                       UX_DEVICE_CLASS_RNDIS_MAX_PACKET_TRANSFER_SIZE\n+#endif\n \n /* Bulk in endpoint buffer size (UX_DEVICE_CLASS_RNDIS_MAX_PACKET_TRANSFER_SIZE).  */\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n+#define UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER_SIZE                        0\n+#else\n #define UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER_SIZE                        UX_DEVICE_CLASS_RNDIS_MAX_PACKET_TRANSFER_SIZE\n+#endif\n \n /* Interrupt in endpoint buffer size (UX_DEVICE_CLASS_RNDIS_INTERRUPT_RESPONSE_LENGTH).  */\n #define UX_DEVICE_CLASS_RNDIS_INTERRUPTIN_BUFFER_SIZE                   UX_DEVICE_CLASS_RNDIS_INTERRUPT_RESPONSE_LENGTH\n@@ -597,12 +614,16 @@ typedef struct UX_SLAVE_CLASS_RNDIS_STRUCT\n } UX_SLAVE_CLASS_RNDIS;\n \n /* Define RNDIS endpoint buffer settings (when RNDIS owns buffer).  */\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n+#define UX_DEVICE_CLASS_RNDIS_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW 0 /* only one buffer, no calculation  */\n+#else\n #define UX_DEVICE_CLASS_RNDIS_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW \\\n     (UX_OVERFLOW_CHECK_ADD_ULONG(UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE,     \\\n                                  UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER_SIZE) ||   \\\n      UX_OVERFLOW_CHECK_ADD_ULONG(UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE +    \\\n                                  UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER_SIZE,      \\\n                                  UX_DEVICE_CLASS_RNDIS_INTERRUPTIN_BUFFER_SIZE))\n+#endif\n #define UX_DEVICE_CLASS_RNDIS_ENDPOINT_BUFFER_SIZE          (UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE + UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER_SIZE + UX_DEVICE_CLASS_RNDIS_INTERRUPTIN_BUFFER_SIZE)\n #define UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER(rndis)         ((rndis)->ux_device_class_rndis_endpoint_buffer)\n #define UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER(rndis)          (UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER(rndis) + UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE)"
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_storage.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_storage.h                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -57,11 +57,11 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_device_classes/inc/ux_device_class_video.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_device_class_video.h                             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -44,11 +44,12 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Yajun xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun xia, CQ Xiao       Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -588,9 +589,6 @@ typedef struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT\n     struct UX_DEVICE_CLASS_VIDEO_STRUCT     *ux_device_class_video_stream_video;\n     UX_SLAVE_INTERFACE                      *ux_device_class_video_stream_interface;\n     UX_SLAVE_ENDPOINT                       *ux_device_class_video_stream_endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-    UCHAR                                   *ux_device_class_video_stream_endpoint_buffer;\n-#endif\n \n     ULONG                                    ux_device_class_video_stream_error;\n "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_activate.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_activate                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -73,10 +73,11 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_audio_activate(UX_SLAVE_CLASS_COMMAND *command)\n@@ -127,8 +128,10 @@ ULONG                                    stream_index;\n         audio -> ux_device_class_audio_status_head = audio -> ux_device_class_audio_status_queue;\n         audio -> ux_device_class_audio_status_tail = audio -> ux_device_class_audio_status_queue;\n #if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-        audio -> ux_device_class_audio_interrupt -> ux_slave_endpoint_transfer_request.\n-            ux_slave_transfer_request_data_pointer = audio -> ux_device_class_audio_interrupt_buffer;\n+        if (audio -> ux_device_class_audio_interrupt)\n+            audio -> ux_device_class_audio_interrupt ->\n+                ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n+                                audio -> ux_device_class_audio_interrupt_buffer;\n #endif\n #endif\n     }"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_change.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_change                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,10 +84,11 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_audio_change(UX_SLAVE_CLASS_COMMAND *command)\n@@ -238,11 +239,11 @@ ULONG                                    endpoint_dir;\n         }\n \n #if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-    stream -> ux_device_class_audio_stream_endpoint -> ux_slave_endpoint_transfer_request.\n-        ux_slave_transfer_request_data_pointer = stream -> ux_device_class_audio_stream_endpoint_buffer;\n #if defined(UX_DEVICE_CLASS_AUDIO_FEEDBACK_SUPPORT)\n-    stream -> ux_device_class_audio_stream_feedback -> ux_slave_endpoint_transfer_request.\n-        ux_slave_transfer_request_data_pointer = stream -> ux_device_class_audio_stream_feedback_buffer;\n+    if (stream -> ux_device_class_audio_stream_feedback)\n+        stream -> ux_device_class_audio_stream_feedback ->\n+            ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n+                        stream -> ux_device_class_audio_stream_feedback_buffer;\n #endif\n #endif\n "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_initialize                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -87,10 +87,11 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_audio_initialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -259,16 +260,6 @@ ULONG                                   i;\n     {\n \n #if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-\n-        /* Allocate memory for stream endpoint buffer.  */\n-        stream -> ux_device_class_audio_stream_endpoint_buffer = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,\n-                        stream_parameter -> ux_device_class_audio_stream_parameter_max_frame_buffer_size);\n-        if (stream -> ux_device_class_audio_stream_endpoint_buffer == UX_NULL)\n-        {\n-            status = UX_MEMORY_INSUFFICIENT;\n-            break;\n-        }\n-\n #if defined(UX_DEVICE_CLASS_AUDIO_FEEDBACK_SUPPORT)\n \n         /* Allocate memory for feedback endpoint buffer.  */\n@@ -303,7 +294,11 @@ ULONG                                   i;\n                             stream_parameter -> ux_device_class_audio_stream_parameter_max_frame_buffer_nb;\n \n         /* Create block of buffer buffer is cache safe for USB transfer.  */\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+        stream -> ux_device_class_audio_stream_buffer = (UCHAR *)_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, memory_size);\n+#else\n         stream -> ux_device_class_audio_stream_buffer = (UCHAR *)_ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);\n+#endif\n \n         /* Check for successful allocation.  */\n         if (stream -> ux_device_class_audio_stream_buffer == UX_NULL)\n@@ -465,10 +460,6 @@ ULONG                                   i;\n             _ux_device_thread_delete(&stream -> ux_device_class_audio_stream_thread);\n             _ux_utility_memory_free(stream -> ux_device_class_audio_stream_thread_stack);\n         }\n-#endif\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-        if (stream -> ux_device_class_audio_stream_endpoint_buffer)\n-            _ux_utility_memory_free(stream -> ux_device_class_audio_stream_endpoint_buffer);\n #endif\n         if (stream -> ux_device_class_audio_stream_buffer)\n             _ux_utility_memory_free(stream -> ux_device_class_audio_stream_buffer);\n@@ -505,7 +496,7 @@ ULONG                                   i;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_audio_initialize                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -535,9 +526,9 @@ ULONG                                   i;\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  03-08-2023     Chaoqiong Xiao           Initial Version 6.2.1         */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n /*                                            fixed error checking issue, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_audio_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_interrupt_task_function.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_interrupt_task_function      PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -71,6 +71,9 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  10-31-2022     Yajun Xia                Initial Version 6.2.0         */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            removed an error trap,      */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_audio_interrupt_task_function(UX_DEVICE_CLASS_AUDIO *audio)\n@@ -100,13 +103,10 @@ UCHAR                           *buff;\n     /* Get endpoint instance.  */\n     endpoint = audio -> ux_device_class_audio_interrupt;\n \n-    /* Endpoint not available, maybe it's alternate setting 0.  */\n+    /* Endpoint not available, maybe it's alternate setting 0,\n+       or not exist in framework (accepted use case).  */\n     if (endpoint == UX_NULL)\n     {\n-\n-        /* Error trap. */\n-        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_ENDPOINT_HANDLE_UNKNOWN);\n-\n         audio -> ux_device_class_audio_interrupt_task_state = UX_STATE_RESET;\n         return(UX_STATE_IDLE);\n     }"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_read_task_function.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_read_task_function           PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -71,6 +71,11 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  10-31-2022     Yajun Xia                Initial Version 6.2.0         */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added a new mode to manage  */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_audio_read_task_function(UX_DEVICE_CLASS_AUDIO_STREAM *stream)\n@@ -116,6 +121,13 @@ UINT                            status;\n         /* Next state: transfer wait.  */\n         stream -> ux_device_class_audio_stream_task_state = UX_DEVICE_CLASS_AUDIO_STREAM_RW_WAIT;\n \n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+        /* Zero copy: directly use stream buffer for transfer.  */\n+        transfer -> ux_slave_transfer_request_data_pointer =\n+            stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data;\n+#endif\n+\n         /* Reset transfer state.  */\n         UX_SLAVE_TRANSFER_STATE_RESET(transfer);\n     }\n@@ -153,9 +165,14 @@ UINT                            status;\n         /* Frame received, log it.  */\n         stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_length = actual_length;\n         stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_pos = 0;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0\n+\n+        /* Copy data from endpoint buffer.  */\n         _ux_utility_memory_copy(stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data,\n                         transfer -> ux_slave_transfer_request_data_pointer,\n                         actual_length); /* Use case of memcpy is verified. */\n+#endif\n \n         /* For simple, do not advance the transfer position if there is overflow.  */\n         next_pos = (UCHAR *)stream -> ux_device_class_audio_stream_transfer_pos;"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_read_thread_entry.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_read_thread_entry            PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,6 +84,11 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added a new mode to manage  */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID _ux_device_class_audio_read_thread_entry(ULONG audio_stream)\n@@ -127,6 +132,13 @@ ULONG                           actual_length;\n             /* Get transfer instance.  */\n             transfer = &endpoint -> ux_slave_endpoint_transfer_request;\n \n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+            /* Zero copy: directly use frame buffer.  */\n+            transfer -> ux_slave_transfer_request_data_pointer = stream ->\n+                    ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data;\n+#endif\n+\n             /* Start frame transfer anyway.  */\n             status = _ux_device_stack_transfer_request(transfer, max_packet_size, max_packet_size);\n \n@@ -146,9 +158,14 @@ ULONG                           actual_length;\n             /* Frame received, log it.  */\n             stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_length = actual_length;\n             stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_pos = 0;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0\n+\n+            /* Copy data from endpoint buffer.  */\n             _ux_utility_memory_copy(stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data,\n                             transfer -> ux_slave_transfer_request_data_pointer,\n                             actual_length); /* Use case of memcpy is verified. */\n+#endif\n \n             /* For simple, do not advance the transfer position if there is overflow.  */\n             next_pos = (UCHAR *)stream -> ux_device_class_audio_stream_transfer_pos;"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_unitialize.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_uninitialize                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -75,10 +75,11 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed standalone compile,   */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_audio_uninitialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -118,7 +119,6 @@ ULONG                            i;\n             _ux_utility_memory_free(stream -> ux_device_class_audio_stream_buffer);\n \n #if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-            _ux_utility_memory_free(stream -> ux_device_class_audio_stream_endpoint_buffer);\n #if defined(UX_DEVICE_CLASS_AUDIO_FEEDBACK_SUPPORT)\n             _ux_utility_memory_free(stream -> ux_device_class_audio_stream_feedback_buffer);\n #endif"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_write_task_function.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_audio_write_task_function          PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -72,6 +72,11 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  10-31-2022     Yajun Xia                Initial Version 6.2.0         */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added a new mode to manage  */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_audio_write_task_function(UX_DEVICE_CLASS_AUDIO_STREAM *stream)\n@@ -119,9 +124,19 @@ UINT                            status;\n \n         /* Start frame transfer anyway (even ZLP).  */\n         transfer_length = stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_length;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0\n+\n+        /* Stack owns buffer, copy data to it.  */\n         if (transfer_length)\n             _ux_utility_memory_copy(transfer -> ux_slave_transfer_request_data_pointer,\n                 stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data, transfer_length); /* Use case of memcpy is verified. */\n+#else\n+\n+        /* Zero copy: directly use frame buffer to transfer.  */\n+        transfer -> ux_slave_transfer_request_data_pointer = stream ->\n+                    ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data;\n+#endif\n \n         /* Reset transfer state.  */\n         UX_SLAVE_TRANSFER_STATE_RESET(transfer);"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_audio_write_thread_entry.c",
            "diff": "@@ -78,6 +78,11 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added a new mode to manage  */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID _ux_device_class_audio_write_thread_entry(ULONG audio_stream)\n@@ -118,9 +123,19 @@ ULONG                           actual_length;\n \n             /* Start frame transfer anyway (even ZLP).  */\n             transfer_length = stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_length;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0\n+\n+            /* Stack owns endpoint buffer, copy to buffer.  */\n             if (transfer_length)\n                 _ux_utility_memory_copy(transfer -> ux_slave_transfer_request_data_pointer,\n                     stream -> ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data, transfer_length); /* Use case of memcpy is verified. */\n+#else\n+\n+            /* Zero copy: directly use frame buffer to transfer.  */\n+            transfer -> ux_slave_transfer_request_data_pointer = stream ->\n+                    ux_device_class_audio_stream_transfer_pos -> ux_device_class_audio_frame_data;\n+#endif\n \n             /* Issue transfer request, thread blocked until transfer done.  */\n             status = _ux_device_stack_transfer_request(transfer, transfer_length, transfer_length);"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_activate.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_activate                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,10 +70,10 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_ccid_activate(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_auto_seq_done.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_auto_seq_done                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,8 +70,8 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_ccid_auto_seq_done(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG icc_status)\n@@ -109,7 +109,7 @@ UX_DEVICE_CLASS_CCID_SLOT       *ccid_slot;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_ccid_auto_seq_done                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -142,7 +142,7 @@ UX_DEVICE_CLASS_CCID_SLOT       *ccid_slot;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_ccid_auto_seq_done(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG icc_status)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_hardware_error.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_hardware_error                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -67,8 +67,8 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_ccid_hardware_error(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG error)\n@@ -147,7 +147,7 @@ UX_DEVICE_CLASS_CCID_RDR_TO_PC_SLOT_STATUS_HEADER   *rsp;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_ccid_hardware_error               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -178,7 +178,7 @@ UX_DEVICE_CLASS_CCID_RDR_TO_PC_SLOT_STATUS_HEADER   *rsp;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_ccid_hardware_error(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG error)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_icc_insert.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_icc_insert                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,8 +70,8 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_ccid_icc_insert(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG seq_start)\n@@ -134,7 +134,7 @@ UX_DEVICE_CLASS_CCID_SLOT       *ccid_slot;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_ccid_icc_insert                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -165,7 +165,7 @@ UX_DEVICE_CLASS_CCID_SLOT       *ccid_slot;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_ccid_icc_insert(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG seq_start)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_icc_remove.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_icc_remove                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -66,8 +66,8 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_ccid_icc_remove(UX_DEVICE_CLASS_CCID *ccid, ULONG slot)\n@@ -127,7 +127,7 @@ UX_DEVICE_CLASS_CCID_SLOT       *ccid_slot;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_ccid_icc_remove                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -157,7 +157,7 @@ UX_DEVICE_CLASS_CCID_SLOT       *ccid_slot;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_ccid_icc_remove(UX_DEVICE_CLASS_CCID *ccid, ULONG slot)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_initialize                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -75,10 +75,10 @@\n /*  03-08-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.1  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_ccid_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_time_extension.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_time_extension                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -64,8 +64,8 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_ccid_time_extension(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG wt)\n@@ -134,7 +134,7 @@ UINT                                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_ccid_icc_insert                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -167,7 +167,7 @@ UINT                                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_ccid_time_extension(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG wt)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_ccid_uninitialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_ccid_uninitialize                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -66,10 +66,10 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_ccid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_bulkin_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_cdc_acm_bulkin_thread              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -92,11 +92,11 @@\n /*                                            names conflict C++ keyword, */\n /*                                            added auto ZLP support,     */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_cdc_acm_bulkin_thread(ULONG cdc_acm_class)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_bulkout_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_cdc_acm_bulkout_thread             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -83,11 +83,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_cdc_acm_bulkout_thread(ULONG cdc_acm_class)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_initialize.c",
            "diff": "@@ -37,7 +37,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_acm_initialize                 PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -87,11 +87,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_ioctl.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_acm_ioctl                      PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -96,8 +96,8 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,\n@@ -365,7 +365,7 @@ UX_SLAVE_TRANSFER                                   *transfer_request;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_cdc_acm_ioctl                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -397,7 +397,7 @@ UX_SLAVE_TRANSFER                                   *transfer_request;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_read.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_acm_read                       PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -90,11 +90,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Yajun Xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia, CQ Xiao       Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, \n@@ -273,7 +273,7 @@ ULONG                       local_requested_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_cdc_acm_read                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -308,7 +308,7 @@ ULONG                       local_requested_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_read_run.c",
            "diff": "@@ -37,7 +37,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_cdc_acm_read_run                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -83,12 +83,12 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            fixed return code,          */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Yajun Xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia, CQ Xiao       Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            fixed return code,          */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_cdc_acm_read_run(UX_SLAVE_CLASS_CDC_ACM *cdc_acm,\n@@ -322,7 +322,7 @@ UINT                        status = UX_SUCCESS;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_cdc_acm_read_run                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -363,7 +363,7 @@ UINT                        status = UX_SUCCESS;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_cdc_acm_read_run(UX_SLAVE_CLASS_CDC_ACM *cdc_acm,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_tasks_run.c",
            "diff": "@@ -43,7 +43,7 @@ static inline VOID _ux_device_class_cdc_acm_transmission_write_run(UX_SLAVE_CLAS\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_cdc_acm_tasks_run                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -86,11 +86,11 @@ static inline VOID _ux_device_class_cdc_acm_transmission_write_run(UX_SLAVE_CLAS\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_cdc_acm_tasks_run(VOID *instance)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_unitialize.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_acm_uninitialize               PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -82,11 +82,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_write.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_acm_write                      PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -92,11 +92,11 @@\n /*                                            names conflict C++ keyword, */\n /*                                            added auto ZLP support,     */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Yajun Xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia, CQ Xiao       Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, \n@@ -305,7 +305,7 @@ UINT                        status = 0;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_cdc_acm_write                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -340,7 +340,7 @@ UINT                        status = 0;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_write_run.c",
            "diff": "@@ -37,7 +37,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_cdc_acm_write_run                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -87,12 +87,12 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            fixed return code,          */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Yajun Xia, CQ Xiao       Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia, CQ Xiao       Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            fixed return code,          */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_cdc_acm_write_run(UX_SLAVE_CLASS_CDC_ACM *cdc_acm,\n@@ -341,7 +341,7 @@ UINT                        zlp = UX_FALSE;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_cdc_acm_write_run                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -381,7 +381,7 @@ UINT                        zlp = UX_FALSE;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_cdc_acm_write_run(UX_SLAVE_CLASS_CDC_ACM *cdc_acm,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_acm_write_with_callback.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_cdc_acm_write_with_callback        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -81,8 +81,8 @@\n /*                                            resulting in version 6.1.10 */\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_cdc_acm_write_with_callback(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer,\n@@ -172,7 +172,7 @@ UINT                        status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_cdc_acm_write_with_callback       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -205,7 +205,7 @@ UINT                        status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_cdc_acm_write_with_callback(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_ecm_activate.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_ecm_activate                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -82,10 +82,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_cdc_ecm_activate(UX_SLAVE_CLASS_COMMAND *command)\n@@ -200,7 +201,7 @@ ULONG                       physical_address_lsw;\n \n                         /* We have found the bulk in endpoint, save it.  */\n                         cdc_ecm -> ux_slave_class_cdc_ecm_bulkin_endpoint =  endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && !defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n                         endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER(cdc_ecm);\n #endif\n@@ -215,7 +216,7 @@ ULONG                       physical_address_lsw;\n \n                         /* We have found the bulk out endpoint, save it.  */\n                         cdc_ecm -> ux_slave_class_cdc_ecm_bulkout_endpoint =  endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && !defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n                         endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER(cdc_ecm);\n #endif\n@@ -240,11 +241,17 @@ ULONG                       physical_address_lsw;\n             /* Wake up the Interrupt thread and send a network notification to the host.  */\n             _ux_device_event_flags_set(&cdc_ecm -> ux_slave_class_cdc_ecm_event_flags_group, UX_DEVICE_CLASS_CDC_ECM_NETWORK_NOTIFICATION_EVENT, UX_OR);                \n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+\n+            /* There is no endpoint buffer.  */\n+#else\n+\n             /* Reset the endpoint buffers.  */\n             _ux_utility_memory_set(cdc_ecm -> ux_slave_class_cdc_ecm_bulkout_endpoint -> ux_slave_endpoint_transfer_request. \n                                             ux_slave_transfer_request_data_pointer, 0, UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE); /* Use case of memset is verified. */\n             _ux_utility_memory_set(cdc_ecm -> ux_slave_class_cdc_ecm_bulkin_endpoint -> ux_slave_endpoint_transfer_request. \n                                             ux_slave_transfer_request_data_pointer, 0, UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE); /* Use case of memset is verified. */\n+#endif\n \n             /* Resume the endpoint threads.  */\n             _ux_device_thread_resume(&cdc_ecm -> ux_slave_class_cdc_ecm_bulkout_thread); "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_ecm_bulkin_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_ecm_bulkin_thread              PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -86,10 +86,11 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            used NX API to copy data,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_cdc_ecm_bulkin_thread(ULONG cdc_ecm_class)\n@@ -104,6 +105,9 @@ ULONG                           actual_flags;\n NX_PACKET                       *current_packet;\n ULONG                           transfer_length;\n ULONG                           copied;\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY) && !defined(NX_DISABLE_PACKET_CHAIN)\n+NX_PACKET                       *packet;\n+#endif\n \n     /* Cast properly the cdc_ecm instance.  */\n     UX_THREAD_EXTENSION_PTR_GET(class_ptr, UX_SLAVE_CLASS, cdc_ecm_class)\n@@ -154,7 +158,84 @@ ULONG                           copied;\n                     /* If the link is down no need to rearm a packet. */\n                     if (cdc_ecm -> ux_slave_class_cdc_ecm_link_state == UX_DEVICE_CLASS_CDC_ECM_LINK_STATE_UP)\n                     {\n-                \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+\n+                        /* Default to success.  */\n+                        status = UX_SUCCESS;\n+\n+#ifndef NX_DISABLE_PACKET_CHAIN\n+\n+                        /* Check if packet is chained, allocate a new packet to fill the total data.  */\n+                        if (current_packet -> nx_packet_next)\n+                        {\n+\n+                            /* Check if collection of chained data can fit in one packet.  */\n+                            if (current_packet -> nx_packet_length >\n+                                current_packet -> nx_packet_pool_owner -> nx_packet_pool_payload_size)\n+                                status = UX_TRANSFER_BUFFER_OVERFLOW;\n+                            else\n+                            {\n+\n+                                /* Allocate a new packet for chain data collection.  */\n+                                status = nx_packet_allocate(cdc_ecm -> ux_slave_class_cdc_ecm_packet_pool, &packet, \n+                                            NX_RECEIVE_PACKET, UX_MS_TO_TICK(UX_DEVICE_CLASS_CDC_ECM_PACKET_POOL_WAIT));\n+                                if (status == UX_SUCCESS)\n+                                {\n+\n+                                    /* Copy the packet to the buffer.  */\n+                                    status = nx_packet_data_extract_offset(current_packet, 0,\n+                                            packet -> nx_packet_prepend_ptr,\n+                                            current_packet -> nx_packet_length, &copied);\n+                                    if (status == NX_SUCCESS)\n+                                    {\n+                                        packet -> nx_packet_length = current_packet -> nx_packet_length;\n+\n+                                        /* Release the chained packet.  */\n+                                        nx_packet_transmit_release(current_packet);\n+\n+                                        /* Use copied packet instead.  */\n+                                        current_packet = packet;\n+                                    }\n+                                }\n+                            }\n+\n+\n+                            /* Can not copy/buffer issue.  */\n+                            if (status != UX_SUCCESS)\n+                                status = UX_TRANSFER_BUFFER_OVERFLOW;\n+\n+                        }\n+#endif\n+                        if (status == UX_SUCCESS)\n+                        {\n+\n+                            /* Set the transfer request data pointer to the packet buffer.  */\n+                            transfer_request -> ux_slave_transfer_request_data_pointer = current_packet -> nx_packet_prepend_ptr;\n+\n+                            /* Calculate the transfer length.  */\n+                            transfer_length =  current_packet -> nx_packet_length;\n+                            \n+                            /* If trace is enabled, insert this event into the trace buffer.  */\n+                            UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_CDC_ECM_PACKET_TRANSMIT, cdc_ecm, 0, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)\n+\n+                            /* Send the request to the device controller.  */\n+                            status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length + 1);\n+                        }\n+\n+                        /* Check error code. */\n+                        if (status != UX_SUCCESS)\n+                        {\n+\n+                            /* Is this not a transfer abort? (this is expected to happen)  */\n+                            if (status != UX_TRANSFER_BUS_RESET)\n+                            {\n+\n+                                /* Error trap. */\n+                                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);\n+                            }\n+                        }\n+#else\n+\n                         /* Can the packet fit in the transfer requests data buffer?  */\n                         if (current_packet -> nx_packet_length <= UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE)\n                         {\n@@ -197,6 +278,7 @@ ULONG                           copied;\n                             /* Report error to application.  */\n                             _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_BUFFER_OVERFLOW);\n                         }\n+#endif\n                     }\n \n                     /* Free the packet that was just sent.  First do some housekeeping.  */"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_ecm_bulkout_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_ecm_bulkout_thread             PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -88,10 +88,11 @@\n /*                                            used pool from NX IP inst,  */\n /*                                            used NX API to copy data,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_cdc_ecm_bulkout_thread(ULONG cdc_ecm_class)\n@@ -171,10 +172,20 @@ USB_NETWORK_DEVICE_TYPE         *ux_nx_device;\n             \n                 /* Reset the queue pointer of this packet.  */\n                 packet -> nx_packet_queue_next = UX_NULL;\n-            \n+\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+\n+                /* Send the request to the device controller.  */\n+                transfer_request -> ux_slave_transfer_request_data_pointer = packet -> nx_packet_prepend_ptr + sizeof(USHORT);\n+                status =  _ux_device_stack_transfer_request(transfer_request,\n+                        packet -> nx_packet_pool_owner -> nx_packet_pool_payload_size - sizeof(USHORT),\n+                        packet -> nx_packet_pool_owner -> nx_packet_pool_payload_size - sizeof(USHORT));\n+#else\n+\n                 /* Send the request to the device controller.  */\n                 status =  _ux_device_stack_transfer_request(transfer_request, UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE,\n                                                                     UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE);\n+#endif\n \n                 /* Check the completion code. */\n                 if (status == UX_SUCCESS)\n@@ -188,6 +199,15 @@ USB_NETWORK_DEVICE_TYPE         *ux_nx_device;\n                     packet -> nx_packet_prepend_ptr += sizeof(USHORT);\n                     packet -> nx_packet_append_ptr += sizeof(USHORT);\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+\n+                    /* Data already in packet.  */\n+                    packet -> nx_packet_length = transfer_request -> ux_slave_transfer_request_actual_length;\n+\n+                    /* Send that packet to the NetX USB broker.  */\n+                    _ux_network_driver_packet_received(cdc_ecm -> ux_slave_class_cdc_ecm_network_handle, packet);\n+#else\n+\n                     /* Copy the received packet in the IP packet data area.  */\n                     status = nx_packet_data_append(packet,\n                             transfer_request -> ux_slave_transfer_request_data_pointer,\n@@ -207,6 +227,7 @@ USB_NETWORK_DEVICE_TYPE         *ux_nx_device;\n                         _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CLASS_MALFORMED_PACKET_RECEIVED_ERROR);\n                         nx_packet_release(packet);\n                     }\n+#endif\n                 }\n                 else\n "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_ecm_change.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_ecm_change                     PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -85,10 +85,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_cdc_ecm_change(UX_SLAVE_CLASS_COMMAND *command)\n@@ -130,7 +131,7 @@ UX_SLAVE_ENDPOINT                       *endpoint;\n             \n                     /* We have found the bulk in endpoint, save it.  */\n                     cdc_ecm -> ux_slave_class_cdc_ecm_bulkin_endpoint =  endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && !defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n                     endpoint -> ux_slave_endpoint_transfer_request.\n                         ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER(cdc_ecm);\n@@ -143,7 +144,7 @@ UX_SLAVE_ENDPOINT                       *endpoint;\n             \n                     /* We have found the bulk out endpoint, save it.  */\n                     cdc_ecm -> ux_slave_class_cdc_ecm_bulkout_endpoint =  endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && !defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n                     endpoint -> ux_slave_endpoint_transfer_request.\n                         ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER(cdc_ecm);\n@@ -166,11 +167,17 @@ UX_SLAVE_ENDPOINT                       *endpoint;\n         /* Communicate the state with the network driver.  */\n         _ux_network_driver_link_up(cdc_ecm -> ux_slave_class_cdc_ecm_network_handle);\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_CDC_ECM_ZERO_COPY)\n+\n+        /* There is no endpoint buffer.  */\n+#else\n+\n         /* Reset the endpoint buffers.  */\n         _ux_utility_memory_set(cdc_ecm -> ux_slave_class_cdc_ecm_bulkout_endpoint -> ux_slave_endpoint_transfer_request. \n                                         ux_slave_transfer_request_data_pointer, 0, UX_DEVICE_CLASS_CDC_ECM_BULKOUT_BUFFER_SIZE); /* Use case of memset is verified. */\n         _ux_utility_memory_set(cdc_ecm -> ux_slave_class_cdc_ecm_bulkin_endpoint -> ux_slave_endpoint_transfer_request. \n                                         ux_slave_transfer_request_data_pointer, 0, UX_DEVICE_CLASS_CDC_ECM_BULKIN_BUFFER_SIZE); /* Use case of memset is verified. */\n+#endif\n \n         /* Resume the endpoint threads.  */\n         _ux_device_thread_resume(&cdc_ecm -> ux_slave_class_cdc_ecm_bulkout_thread); "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_ecm_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_cdc_ecm_initialize                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -89,10 +89,10 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            removed internal NX pool,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_cdc_ecm_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_cdc_ecm_uninitialize.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_cdc_ecm_uninitialize               PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -85,10 +85,10 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            removed internal NX pool,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_cdc_ecm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_dfu_entry.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_dfu_entry                          PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,9 +72,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_dfu_entry(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_dfu_initialize.c",
            "diff": "@@ -260,7 +260,7 @@ ULONG                                   descriptor_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_dfu_initialize                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -291,7 +291,7 @@ ULONG                                   descriptor_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_dfu_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_activate.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_activate                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,11 +84,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_entry.c",
            "diff": "@@ -73,9 +73,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_event_get.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_event_check                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -65,7 +65,7 @@\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_event_check(UX_SLAVE_CLASS_HID *hid,\n@@ -98,7 +98,7 @@ UX_SLAVE_DEVICE                 *device;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_event_free                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -125,7 +125,7 @@ UX_SLAVE_DEVICE                 *device;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_hid_event_free(UX_SLAVE_CLASS_HID *hid)\n@@ -145,7 +145,7 @@ UCHAR                           *pos;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_event_get                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -180,9 +180,9 @@ UCHAR                           *pos;\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,\n@@ -225,7 +225,7 @@ UINT                            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_hid_event_get                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -255,7 +255,7 @@ UINT                            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_event_set.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_hid_event_set                      PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,9 +79,9 @@\n /*                                            resulting in version 6.1.10 */\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, \n@@ -184,7 +184,7 @@ UCHAR                       *next_position;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_hid_event_set                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -214,7 +214,7 @@ UCHAR                       *next_position;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_hid_initialize                     PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -88,12 +88,12 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            checked compile options,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -382,7 +382,7 @@ UCHAR                                   *buffer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_hid_initialize                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -411,7 +411,7 @@ UCHAR                                   *buffer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_interrupt_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_hid_interrupt_thread               PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,9 +84,9 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            off for standalone compile, */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_hid_interrupt_thread(ULONG hid_class)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_read.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_read                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -80,9 +80,9 @@\n /*                                            resulting in version 6.1.11 */\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_hid_read(UX_SLAVE_CLASS_HID *hid, UCHAR *buffer,\n@@ -238,7 +238,7 @@ ULONG                       local_requested_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_hid_read                          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -270,7 +270,7 @@ ULONG                       local_requested_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_hid_read(UX_SLAVE_CLASS_HID *hid, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_read_run.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_read_run                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -74,9 +74,9 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  07-29-2022     Chaoqiong Xiao           Initial Version 6.1.12        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_hid_read_run(UX_SLAVE_CLASS_HID *hid, UCHAR *buffer,\n@@ -302,7 +302,7 @@ UINT                        status= UX_SUCCESS;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_hid_read_run                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -334,7 +334,7 @@ UINT                        status= UX_SUCCESS;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_hid_read_run(UX_SLAVE_CLASS_HID *hid, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_receiver_event_free.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_receiver_event_free             PORTABLE C     */\n-/*                                                            6.x         */\n+/*                                                            6.3.0       */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -68,9 +68,9 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed standalone compile,   */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_receiver_event_free(UX_SLAVE_CLASS_HID *hid)\n@@ -123,7 +123,7 @@ UCHAR                                   *next_pos;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_hid_receiver_event_free           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -153,7 +153,7 @@ UCHAR                                   *next_pos;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_hid_receiver_event_free(UX_SLAVE_CLASS_HID *hid)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_receiver_event_get.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_receiver_event_get             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -71,9 +71,9 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            cleaned compile with TRACE, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_receiver_event_get(UX_SLAVE_CLASS_HID *hid,\n@@ -122,7 +122,7 @@ UX_DEVICE_CLASS_HID_RECEIVED_EVENT      *pos;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_hid_receiver_event_get            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -153,7 +153,7 @@ UX_DEVICE_CLASS_HID_RECEIVED_EVENT      *pos;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_hid_receiver_event_get(UX_SLAVE_CLASS_HID *hid,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_receiver_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_receiver_initialize            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -77,9 +77,9 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone receiver,  */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_receiver_initialize(UX_SLAVE_CLASS_HID *hid,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_receiver_tasks_run.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_receiver_tasks_run             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -67,9 +67,9 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  07-29-2022     Chaoqiong Xiao           Initial Version 6.1.12        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_receiver_tasks_run(UX_SLAVE_CLASS_HID *hid)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_receiver_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_receiver_thread                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,9 +72,9 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added receiver callback,    */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_hid_receiver_thread(ULONG hid_instance)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_receiver_uninitialize.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_receiver_uninitialize          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -66,9 +66,9 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID _ux_device_class_hid_receiver_uninitialize(UX_DEVICE_CLASS_HID_RECEIVER *receiver)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_report_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_report_get                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -75,8 +75,8 @@\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_report_set.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_report_set                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -73,8 +73,8 @@\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_tasks_run.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_hid_tasks_run                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -73,9 +73,9 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_hid_tasks_run(VOID *instance)\n@@ -107,6 +107,9 @@ UINT                        status;\n         hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_tasks_run(hid);\n #endif\n \n+    /* Get access to current event instance.  */\n+    hid_event = &hid -> ux_device_class_hid_event;\n+\n     /* Run HID state machine.  */\n     switch(hid -> ux_device_class_hid_event_state)\n     {\n@@ -180,7 +183,6 @@ UINT                        status;\n         /* Run transfer state machine.  */\n         trans = &hid -> ux_device_class_hid_interrupt_endpoint ->\n                                             ux_slave_endpoint_transfer_request;\n-        hid_event = &hid -> ux_device_class_hid_event;\n         status = _ux_device_stack_transfer_run(trans,\n                                 hid_event -> ux_device_class_hid_event_length,\n                                 hid_event -> ux_device_class_hid_event_length);"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_hid_uninitialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_hid_uninitialize                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -78,11 +78,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_activate.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_activate                      PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -76,10 +76,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            supported optional INT EP,  */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_activate(UX_SLAVE_CLASS_COMMAND *command)\n@@ -145,7 +146,9 @@ UX_SLAVE_ENDPOINT                       *endpoint_interrupt;\n                                     UX_DEVICE_CLASS_PIMA_BULKIN_BUFFER(pima);\n     endpoint_out -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n                                     UX_DEVICE_CLASS_PIMA_BULKOUT_BUFFER(pima);\n-    endpoint_interrupt -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n+    if (endpoint_interrupt)\n+        endpoint_interrupt -> ux_slave_endpoint_transfer_request.\n+                                    ux_slave_transfer_request_data_pointer =\n                                     UX_DEVICE_CLASS_PIMA_INTERRUPTIN_BUFFER(pima);\n #endif\n "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_deactivate.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_deactivate                    PORTABLE C      */ \n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,6 +70,9 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            supported optional INT EP,  */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_deactivate(UX_SLAVE_CLASS_COMMAND *command)\n@@ -87,7 +90,8 @@ UX_SLAVE_CLASS              *class_ptr;\n     /* Terminate the transactions pending on the endpoints.  */\n     _ux_device_stack_transfer_all_request_abort(pima -> ux_device_class_pima_bulk_in_endpoint, UX_TRANSFER_BUS_RESET);\n     _ux_device_stack_transfer_all_request_abort(pima -> ux_device_class_pima_bulk_out_endpoint, UX_TRANSFER_BUS_RESET);\n-    _ux_device_stack_transfer_all_request_abort(pima -> ux_device_class_pima_interrupt_endpoint, UX_TRANSFER_BUS_RESET);\n+    if (pima -> ux_device_class_pima_interrupt_endpoint)\n+        _ux_device_stack_transfer_all_request_abort(pima -> ux_device_class_pima_interrupt_endpoint, UX_TRANSFER_BUS_RESET);\n \n     /* Session is now closed.  */\n     pima -> ux_device_class_pima_session_id = 0;"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_device_info_send.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_pima_device_info_send              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -83,10 +83,10 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_device_info_send(UX_SLAVE_CLASS_PIMA *pima)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_device_prop_value_get.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_pima_device_prop_value_get         PORTABLE C      */\n-/*                                                           6.X          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -85,10 +85,10 @@\n /*                                            updated status handling,    */\n /*                                            improved sanity checks,     */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_device_prop_value_get(UX_SLAVE_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_entry.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_entry                         PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,9 +72,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_entry(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_event_set.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_event_set                     PORTABLE C      */ \n-/*                                                           6.1.10       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,6 +72,9 @@\n /*                                            refined macros names,       */\n /*                                            added transaction ID,       */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            checked if INT EP exists,   */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_event_set(UX_SLAVE_CLASS_PIMA *pima, \n@@ -97,7 +100,13 @@ UX_SLAVE_DEVICE                 *device;\n \n         return(UX_DEVICE_HANDLE_UNKNOWN);\n     }\n-    \n+\n+    /* Check if interrupt endpoint is available.  */\n+    if (pima -> ux_device_class_pima_interrupt_endpoint == UX_NULL)\n+    {\n+        return (UX_FUNCTION_NOT_SUPPORTED);\n+    }\n+\n     /* Current position of the head.  */\n     current_pima_event =  pima -> ux_device_class_pima_event_array_head;\n     "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_initialize                    PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -81,10 +81,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_initialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -263,7 +263,7 @@ UX_SLAVE_CLASS                          *class_ptr;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_pima_initialize                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -292,7 +292,7 @@ UX_SLAVE_CLASS                          *class_ptr;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_pima_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_interrupt_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_interrupt_thread              PORTABLE C      */ \n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,6 +84,9 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed event message size,   */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved INT EP management, */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_pima_interrupt_thread(ULONG pima_class)\n@@ -122,13 +125,16 @@ UCHAR                       *buffer;\n         /* Get the pointer to the device.  */\n         device =  &_ux_system_slave -> ux_system_slave_device;\n         \n-        /* All PIMA events are on the interrupt endpoint IN, from the host.  */\n-        transfer_request_in =  &pima -> ux_device_class_pima_interrupt_endpoint -> ux_slave_endpoint_transfer_request;\n     \n         /* As long as the device is in the CONFIGURED state.  */\n         while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)\n         { \n \n+            /* All PIMA events are on the interrupt endpoint IN, from the host.  */\n+            if (pima -> ux_device_class_pima_interrupt_endpoint == UX_NULL)\n+                break;\n+            transfer_request_in =  &pima -> ux_device_class_pima_interrupt_endpoint -> ux_slave_endpoint_transfer_request;\n+\n             /* Wait until something has awaken us.  */\n             status =  _ux_device_semaphore_get(&pima -> ux_device_class_pima_interrupt_thread_semaphore, UX_WAIT_FOREVER);\n             "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_object_info_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_object_info_get               PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -80,10 +80,10 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_object_info_get(UX_SLAVE_CLASS_PIMA *pima, ULONG object_handle)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_object_prop_desc_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_object_prop_desc_get          PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -81,10 +81,10 @@\n /*                                            updated status handling,    */\n /*                                            passed max length to app,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_object_prop_desc_get(UX_SLAVE_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_object_prop_value_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_object_prop_value_get         PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,10 +84,10 @@\n /*                                            updated status handling,    */\n /*                                            passed max length to app,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_object_prop_value_get(UX_SLAVE_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_object_references_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_object_references_get         PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -81,10 +81,10 @@\n /*                                            updated status handling,    */\n /*                                            passed max length to app,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_object_references_get(UX_SLAVE_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_pima_storage_id_send.c",
            "diff": "@@ -42,7 +42,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_pima_storage_id_send               PORTABLE C      */ \n-/*                                                           6.X          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -80,10 +80,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            improved sanity checks,     */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_pima_storage_id_send(UX_SLAVE_CLASS_PIMA *pima)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_printer_activate.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_printer_activate                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -68,10 +68,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_printer_activate(UX_SLAVE_CLASS_COMMAND *command)\n@@ -108,7 +108,7 @@ UX_SLAVE_ENDPOINT                       *endpoint;\n             if (endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_IN)\n             {\n                 printer -> ux_device_class_printer_endpoint_in = endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if defined(UX_DEVICE_CLASS_PRINTER_OWN_ENDPOINT_BUFFER)\n                 endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_PRINTER_WRITE_BUFFER(printer);\n #endif\n@@ -118,7 +118,7 @@ UX_SLAVE_ENDPOINT                       *endpoint;\n             else\n             {\n                 printer -> ux_device_class_printer_endpoint_out = endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if defined(UX_DEVICE_CLASS_PRINTER_OWN_ENDPOINT_BUFFER)\n                 endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_PRINTER_READ_BUFFER(printer);\n #endif"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_printer_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_printer_initialize                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,10 +72,10 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_printer_initialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -110,7 +110,7 @@ UINT                                    status;\n     printer -> ux_device_class_printer_parameter.ux_device_class_printer_instance_deactivate = printer_parameter -> ux_device_class_printer_instance_deactivate;\n     printer -> ux_device_class_printer_parameter.ux_device_class_printer_soft_reset          = printer_parameter -> ux_device_class_printer_soft_reset;\n \n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if defined(UX_DEVICE_CLASS_PRINTER_OWN_ENDPOINT_BUFFER)\n \n     /* Allocate endpoint buffer.  */\n     UX_ASSERT(!UX_DEVICE_CLASS_PRINTER_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW);\n@@ -132,7 +132,7 @@ UINT                                    status;\n     {\n \n         /* Free the resources.  */\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if defined(UX_DEVICE_CLASS_PRINTER_OWN_ENDPOINT_BUFFER)\n         _ux_utility_memory_free(printer -> ux_device_class_printer_endpoint_buffer);\n #endif\n         _ux_utility_memory_free(printer);\n@@ -152,7 +152,7 @@ UINT                                    status;\n         _ux_device_mutex_delete(&printer -> ux_device_class_printer_endpoint_in_mutex);\n \n         /* Free the resources.  */\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if defined(UX_DEVICE_CLASS_PRINTER_OWN_ENDPOINT_BUFFER)\n         _ux_utility_memory_free(printer -> ux_device_class_printer_endpoint_buffer);\n #endif\n         _ux_utility_memory_free(printer);"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_printer_read.c",
            "diff": "@@ -116,6 +116,21 @@ ULONG                       local_requested_length;\n     /* All Printer reading  are on the endpoint OUT, from the host.  */\n     transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_PRINTER_ZERO_COPY)\n+\n+    /* Check if device is configured.  */\n+    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)\n+    {\n+\n+        /* Issue the transfer request.  */\n+        local_requested_length = requested_length;\n+        transfer_request -> ux_slave_transfer_request_data_pointer = buffer;\n+        status =  _ux_device_stack_transfer_request(transfer_request,\n+                                local_requested_length, local_requested_length);\n+        *actual_length = transfer_request -> ux_slave_transfer_request_actual_length;\n+    }\n+#else\n+\n     /* Reset the actual length.  */\n     *actual_length =  0;\n \n@@ -179,6 +194,7 @@ ULONG                       local_requested_length;\n             return(status);\n         }\n     }\n+#endif\n \n     /* Free Mutex resource.  */\n     _ux_device_mutex_off(&printer -> ux_device_class_printer_endpoint_out_mutex);\n@@ -207,7 +223,7 @@ ULONG                       local_requested_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_printer_read                       PORTABLE C     */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -243,9 +259,9 @@ ULONG                       local_requested_length;\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  03-08-2023     Yajun Xia                Initial Version 6.2.1         */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n /*                                            fixed error checking issue, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_printer_read(UX_DEVICE_CLASS_PRINTER *printer, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_printer_read_run.c",
            "diff": "@@ -120,6 +120,53 @@ UINT                        status = UX_SUCCESS;\n     /* All Printer reading  are on the endpoint OUT, from the host.  */\n     transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_PRINTER_ZERO_COPY)\n+\n+    /* Run the transfer state machine.  */\n+    if (printer -> ux_device_class_printer_read_state == UX_STATE_RESET)\n+    {\n+            \n+            /* If trace is enabled, insert this event into the trace buffer.  */\n+            UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_PRINTER_READ, printer, buffer, requested_length, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)\n+    \n+            printer -> ux_device_class_printer_read_state = UX_DEVICE_CLASS_PRINTER_READ_START;\n+            printer -> ux_device_class_printer_read_status = UX_TRANSFER_NO_ANSWER;\n+            transfer_request -> ux_slave_transfer_request_data_pointer = buffer;\n+            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);\n+    }\n+\n+    /* Issue the transfer request.  */\n+    max_transfer_length = requested_length;\n+    status = _ux_device_stack_transfer_run(transfer_request, max_transfer_length, max_transfer_length);\n+\n+    /* Error case.  */\n+    if (status < UX_STATE_NEXT)\n+    {\n+\n+        printer -> ux_device_class_printer_read_state = UX_STATE_RESET;\n+        printer -> ux_device_class_printer_read_status =\n+            transfer_request -> ux_slave_transfer_request_completion_code;\n+        return(UX_STATE_ERROR);\n+    }\n+\n+    /* Success case.  */\n+    if (status == UX_STATE_NEXT)\n+    {\n+\n+        /* Last transfer status.  */\n+        printer -> ux_device_class_printer_read_status =\n+            transfer_request -> ux_slave_transfer_request_completion_code;\n+\n+        /* Update actual length.  */\n+        *actual_length = transfer_request -> ux_slave_transfer_request_actual_length;\n+\n+        /* It's done.  */\n+        printer -> ux_device_class_printer_read_state = UX_STATE_RESET;\n+    }\n+\n+    return(status);\n+#else\n+\n     /* Handle state cases.  */\n     switch(printer -> ux_device_class_printer_read_state)\n     {\n@@ -230,6 +277,7 @@ UINT                        status = UX_SUCCESS;\n         printer -> ux_device_class_printer_read_status = UX_INVALID_STATE;\n         break;\n     }\n+#endif\n \n     /* Error cases.  */\n     return(UX_STATE_EXIT);\n@@ -240,7 +288,7 @@ UINT                        status = UX_SUCCESS;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_printer_read_run                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -281,7 +329,7 @@ UINT                        status = UX_SUCCESS;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_printer_read_run(UX_DEVICE_CLASS_PRINTER *printer, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_printer_uninitialize.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_printer_uninitialize               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -75,10 +75,10 @@\n /*  10-31-2022     Yajun Xia                Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_printer_uninitialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -104,7 +104,7 @@ UX_SLAVE_CLASS              *class_ptr;\n         _ux_device_mutex_delete(&printer -> ux_device_class_printer_endpoint_out_mutex);\n #endif\n         /* Free the resources.  */\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if defined(UX_DEVICE_CLASS_PRINTER_OWN_ENDPOINT_BUFFER)\n         _ux_utility_memory_free(printer -> ux_device_class_printer_endpoint_buffer);\n #endif\n         _ux_utility_memory_free(printer);"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_printer_write.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_printer_write                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,10 +79,10 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added auto ZLP support,     */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_printer_write(UX_DEVICE_CLASS_PRINTER *printer, UCHAR *buffer,\n@@ -146,6 +146,28 @@ UINT                        status = 0;\n         return(status);\n     }\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_PRINTER_ZERO_COPY)\n+\n+    /* Check if device is configured.  */\n+    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)\n+    {\n+\n+#if defined(UX_DEVICE_CLASS_PRINTER_WRITE_AUTO_ZLP)\n+\n+        /* Issue with larger host length to append zlp if necessary.  */\n+        local_host_length = requested_length + 1;\n+#else\n+        local_host_length = requested_length;\n+#endif\n+        local_requested_length = requested_length;\n+\n+        /* Issue the transfer request.  */\n+        transfer_request -> ux_slave_transfer_request_data_pointer =  buffer;\n+        status = _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_host_length);\n+        *actual_length = transfer_request -> ux_slave_transfer_request_actual_length;\n+    }\n+#else\n+\n     /* Check if we need more transactions.  */\n     local_host_length = UX_DEVICE_CLASS_PRINTER_WRITE_BUFFER_SIZE;\n     while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED &&\n@@ -207,6 +229,7 @@ UINT                        status = 0;\n             return(status);\n         }\n     }\n+#endif\n \n     /* Free Mutex resource.  */\n     _ux_device_mutex_off(&printer -> ux_device_class_printer_endpoint_in_mutex);\n@@ -235,7 +258,7 @@ UINT                        status = 0;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_printer_write                       PORTABLE C    */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -271,9 +294,9 @@ UINT                        status = 0;\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  03-08-2023     Yajun Xia                Initial Version 6.2.1         */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n /*                                            fixed error checking issue, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_printer_write(UX_DEVICE_CLASS_PRINTER *printer, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_printer_write_run.c",
            "diff": "@@ -36,7 +36,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_printer_write_run                   PORTABLE C     */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -78,10 +78,10 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  10-31-2022         Yajun Xia            Initial Version 6.2.0         */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_printer_write_run(UX_DEVICE_CLASS_PRINTER *printer, UCHAR *buffer,\n@@ -91,8 +91,10 @@ UINT _ux_device_class_printer_write_run(UX_DEVICE_CLASS_PRINTER *printer, UCHAR\n UX_SLAVE_ENDPOINT           *endpoint;\n UX_SLAVE_DEVICE             *device;\n UX_SLAVE_TRANSFER           *transfer_request;\n-UINT                        zlp = UX_FALSE;\n UINT                        status = 0;\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER != 1) || !defined(UX_DEVICE_CLASS_CDC_ACM_ZERO_COPY)\n+UINT                        zlp = UX_FALSE;\n+#endif\n \n     /* If trace is enabled, insert this event into the trace buffer.  */\n     UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_PRINTER_WRITE, printer, buffer, requested_length, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)\n@@ -135,6 +137,54 @@ UINT                        status = 0;\n     /* We are writing to the IN endpoint.  */\n     transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_PRINTER_ZERO_COPY)\n+\n+    /* Run the transfer state machine.  */\n+    if (printer -> ux_device_class_printer_write_state == UX_STATE_RESET)\n+    {\n+\n+        /* Set the state to WRITE_WAIT.  */\n+        printer -> ux_device_class_printer_write_state = UX_DEVICE_CLASS_PRINTER_WRITE_WAIT;\n+        printer -> ux_device_class_printer_write_status = UX_TRANSFER_NO_ANSWER;\n+        transfer_request -> ux_slave_transfer_request_data_pointer = buffer;\n+        UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);\n+    }\n+\n+    /* Issue the transfer request.  */\n+#if defined(UX_DEVICE_CLASS_PRINTER_WRITE_AUTO_ZLP)\n+    status = _ux_device_stack_transfer_run(transfer_request, requested_length, requested_length + 1);\n+#else\n+    status = _ux_device_stack_transfer_run(transfer_request, requested_length, requested_length);\n+#endif\n+\n+    /* Error case.  */\n+    if (status < UX_STATE_NEXT)\n+    {\n+\n+        printer -> ux_device_class_printer_write_state = UX_STATE_RESET;\n+        printer -> ux_device_class_printer_write_status =\n+                transfer_request -> ux_slave_transfer_request_completion_code;\n+        return(UX_STATE_ERROR);\n+    }\n+\n+    /* Success case.  */\n+    if (status == UX_STATE_NEXT)\n+    {\n+\n+        /* Last transfer status.  */\n+        printer -> ux_device_class_printer_write_status =\n+                transfer_request -> ux_slave_transfer_request_completion_code;\n+\n+        /* Update actual length.  */\n+        *actual_length = transfer_request -> ux_slave_transfer_request_actual_length;\n+\n+        /* It's done.  */\n+        printer -> ux_device_class_printer_write_state = UX_STATE_RESET;\n+    }\n+    return(status);\n+\n+#else\n+\n     /* Handle state cases.  */\n     switch(printer -> ux_device_class_printer_write_state)\n     {\n@@ -254,6 +304,7 @@ UINT                        status = 0;\n         printer -> ux_device_class_printer_write_state = UX_STATE_RESET;\n         break;\n     }\n+#endif\n \n     /* Error case.  */\n     return(UX_STATE_EXIT);\n@@ -264,7 +315,7 @@ UINT                        status = 0;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_printer_write_run                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -305,7 +356,7 @@ UINT                        status = 0;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_printer_write_run(UX_DEVICE_CLASS_PRINTER *printer, UCHAR *buffer,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_rndis_activate.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_rndis_activate                     PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,10 +79,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_rndis_activate(UX_SLAVE_CLASS_COMMAND *command)\n@@ -157,7 +158,7 @@ ULONG                       physical_address_lsw;\n \n                 /* We have found the bulk in endpoint, save it.  */\n                 rndis -> ux_slave_class_rndis_bulkin_endpoint =  endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && !defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n                 endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER(rndis);\n #endif\n@@ -171,7 +172,7 @@ ULONG                       physical_address_lsw;\n \n                 /* We have found the bulk out endpoint, save it.  */\n                 rndis -> ux_slave_class_rndis_bulkout_endpoint =  endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && !defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n                 endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =\n                                 UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER(rndis);\n #endif\n@@ -209,12 +210,14 @@ ULONG                       physical_address_lsw;\n                                         physical_address_lsw);\n                 \n         /* Reset the endpoint buffers.  */\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && !defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n         _ux_utility_memory_set(rndis -> ux_slave_class_rndis_bulkout_endpoint -> ux_slave_endpoint_transfer_request. \n-                                        ux_slave_transfer_request_data_pointer, 0, UX_SLAVE_REQUEST_DATA_MAX_LENGTH); /* Use case of memset is verified. */\n+                                        ux_slave_transfer_request_data_pointer, 0, UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE); /* Use case of memset is verified. */\n         _ux_utility_memory_set(rndis -> ux_slave_class_rndis_bulkin_endpoint -> ux_slave_endpoint_transfer_request. \n-                                        ux_slave_transfer_request_data_pointer, 0, UX_SLAVE_REQUEST_DATA_MAX_LENGTH); /* Use case of memset is verified. */\n+                                        ux_slave_transfer_request_data_pointer, 0, UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER_SIZE); /* Use case of memset is verified. */\n+#endif\n         _ux_utility_memory_set(rndis -> ux_slave_class_rndis_interrupt_endpoint -> ux_slave_endpoint_transfer_request. \n-                                        ux_slave_transfer_request_data_pointer, 0, UX_SLAVE_REQUEST_DATA_MAX_LENGTH); /* Use case of memset is verified. */\n+                                        ux_slave_transfer_request_data_pointer, 0, UX_DEVICE_CLASS_RNDIS_INTERRUPTIN_BUFFER_SIZE); /* Use case of memset is verified. */\n     \n         /* Resume the endpoint threads.  */\n         _ux_device_thread_resume(&rndis -> ux_slave_class_rndis_interrupt_thread); "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_rndis_bulkin_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_rndis_bulkin_thread                PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -88,10 +88,11 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            used NX API to copy data,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_rndis_bulkin_thread(ULONG rndis_class)\n@@ -106,6 +107,10 @@ ULONG                           actual_flags;\n NX_PACKET                       *current_packet;\n ULONG                           transfer_length;\n ULONG                           copied;\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY) && !defined(NX_DISABLE_PACKET_CHAIN)\n+NX_PACKET                       *packet;\n+UINT                            do_copy;\n+#endif\n \n     /* Cast properly the rndis instance.  */\n     UX_THREAD_EXTENSION_PTR_GET(class_ptr, UX_SLAVE_CLASS, rndis_class)\n@@ -156,10 +161,125 @@ ULONG                           copied;\n                     /* If the link is down no need to rearm a packet. */\n                     if (rndis -> ux_slave_class_rndis_link_state == UX_DEVICE_CLASS_RNDIS_LINK_STATE_UP)\n                     {\n-                \n+\n+                        /* Input packet mapping:\n+                         *                           | <----- nx_packet_length -----> |\n+                         *    .. NX_PHYSICAL_HEADER? | NX_ETHERNET_SIZE | Packet ...  |\n+                         *  start                  prepend                         append\n+                         */\n+\n                         /* Calculate the transfer length.  */\n                         transfer_length =  current_packet -> nx_packet_length + UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH;\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n+\n+                        /* Default to success.  */\n+                        status = UX_SUCCESS;\n+\n+                        /* Check if there was enough space for RNDIS header, if not data should be copied.  */\n+                        do_copy = (current_packet -> nx_packet_data_start + UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH > current_packet -> nx_packet_prepend_ptr);\n+\n+#ifndef NX_DISABLE_PACKET_CHAIN\n+\n+                        /* Check if packet is chained, chained packets must be joined (copied).  */\n+                        if (current_packet -> nx_packet_next)\n+                            do_copy = 1;\n+#endif\n+\n+                        /* Check if data is being copied to new packet.  */\n+                        if (do_copy)\n+                        {\n+\n+                            /* Check if packet pool is good for data collection.  */\n+                            if (transfer_length > current_packet -> nx_packet_pool_owner -> nx_packet_pool_payload_size)\n+                                status = UX_TRANSFER_BUFFER_OVERFLOW;\n+\n+                            /* Allocate a new packet for data collection.  */\n+                            if (status == UX_SUCCESS)\n+                            {\n+                                status = nx_packet_allocate(current_packet -> nx_packet_pool_owner,\n+                                    &packet, UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH,\n+                                    UX_MS_TO_TICK(UX_DEVICE_CLASS_RNDIS_PACKET_POOL_WAIT));\n+\n+                                /* Reserve space for RNDIS header.  */\n+                                packet -> nx_packet_append_ptr = packet -> nx_packet_prepend_ptr + UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH;\n+\n+                            }\n+\n+                            /* Copy the data to allocated.  */\n+                            if (status == UX_SUCCESS)\n+                            {\n+\n+                                /* RNDIS packet header already reserved.  */\n+\n+                                /* Copy the data to allocated.  */\n+                                status = nx_packet_data_extract_offset(current_packet, 0,\n+                                    packet -> nx_packet_append_ptr,\n+                                    current_packet -> nx_packet_length, &copied);\n+                                if (status == NX_SUCCESS)\n+                                {\n+                                    packet -> nx_packet_length = copied;\n+\n+                                    /* Release the chained packet.  */\n+                                    current_packet -> nx_packet_length = current_packet -> nx_packet_length - UX_DEVICE_CLASS_RNDIS_ETHERNET_SIZE;\n+                                    nx_packet_transmit_release(current_packet);\n+\n+                                    /* Use copied packet to transfer.  */\n+                                    current_packet = packet;\n+                                }\n+                            }\n+\n+                            /* Can not copy/buffer issue.  */\n+                            if (status != UX_SUCCESS)\n+                                status = UX_TRANSFER_BUFFER_OVERFLOW;\n+                        }\n+                        else\n+                        {\n+\n+                            /* There is enough space for RNDIS header, move prepend_ptr for it.  */\n+                            current_packet -> nx_packet_prepend_ptr -= UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH;\n+                        }\n+\n+                        if (status == UX_SUCCESS)\n+                        {\n+\n+                            /* Add the RNDIS header to this packet.  */\n+\n+                            /* Reset the RNDIS header.  */\n+                            _ux_utility_memory_set(current_packet -> nx_packet_prepend_ptr, 0x00, UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH); /* Use case of memset is verified. */\n+\n+                            /* Initialize fields in header.  */\n+                            _ux_utility_long_put(current_packet -> nx_packet_prepend_ptr + UX_DEVICE_CLASS_RNDIS_PACKET_MESSAGE_TYPE, UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_MSG);\n+                            _ux_utility_long_put(current_packet -> nx_packet_prepend_ptr + UX_DEVICE_CLASS_RNDIS_PACKET_MESSAGE_LENGTH, transfer_length);\n+                            _ux_utility_long_put(current_packet -> nx_packet_prepend_ptr + UX_DEVICE_CLASS_RNDIS_PACKET_DATA_OFFSET, \n+                                                    UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH - UX_DEVICE_CLASS_RNDIS_PACKET_DATA_OFFSET);\n+                            _ux_utility_long_put(current_packet -> nx_packet_prepend_ptr + UX_DEVICE_CLASS_RNDIS_PACKET_DATA_LENGTH, current_packet -> nx_packet_length);\n+\n+                            /* Set the transfer request data pointer to the packet buffer.  */\n+                            transfer_request -> ux_slave_transfer_request_data_pointer = current_packet -> nx_packet_prepend_ptr;\n+\n+                            /* If trace is enabled, insert this event into the trace buffer.  */\n+                            UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_RNDIS_PACKET_TRANSMIT, rndis, 0, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)\n+\n+                            /* Send the request to the device controller.  */\n+                            status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length + 1);\n+                        }\n+\n+                        /* Check error code.  */\n+                        if (status != UX_SUCCESS)\n+                        {\n+\n+                            /* Is this not a transfer abort? (it's fine to be aborted)  */\n+                            if (status != UX_TRANSFER_BUS_RESET)\n+                            {\n+\n+                                /* Error trap. */\n+                                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);\n+                            }\n+\n+                        }\n+#else\n+\n                         /* Is there enough space for this packet in the transfer buffer?  */\n                         if (transfer_length <= UX_DEVICE_CLASS_RNDIS_BULKIN_BUFFER_SIZE)\n                         {\n@@ -200,6 +320,7 @@ ULONG                           copied;\n                             /* Report error to application. */\n                             _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);\n                         }\n+#endif\n                     }        \n                \n                     /* Free the packet that was just sent.  First do some housekeeping.  */"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_rndis_bulkout_thread.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_rndis_bulkout_thread               PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -88,10 +88,11 @@\n /*                                            used NX API to copy data,   */\n /*                                            used linked NX IP pool,     */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added zero copy support,    */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_rndis_bulkout_thread(ULONG rndis_class)\n@@ -165,10 +166,41 @@ USB_NETWORK_DEVICE_TYPE         *ux_nx_device;\n             \n                 /* Reset the queue pointer of this packet.  */\n                 packet -> nx_packet_queue_next = UX_NULL;\n-                        \n+\n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n+\n+                /* Adjust the prepend pointer to take into account the RNDIS header and\n+                   non 3 bit alignment of the ethernet header.  */\n+                packet -> nx_packet_append_ptr += UX_DEVICE_CLASS_RNDIS_PACKET_BUFFER;\n+                switch(((ALIGN_TYPE)packet -> nx_packet_append_ptr) & 0x3)\n+                {\n+                case 0:\n+                    packet -> nx_packet_append_ptr += 2;\n+                    break;\n+                case 1:\n+                    packet -> nx_packet_append_ptr += 1;\n+                    break;\n+                case 3:\n+                    packet -> nx_packet_append_ptr += 3;\n+                    break;\n+                default:\n+                    break;\n+                }\n+                packet -> nx_packet_prepend_ptr = packet -> nx_packet_append_ptr - UX_DEVICE_CLASS_RNDIS_PACKET_BUFFER;\n+\n+                /* Get actual size of transfer buffer.  */\n+                packet_payload = (ULONG)(packet -> nx_packet_data_end - packet -> nx_packet_prepend_ptr);\n+\n+                /* Send the request to the device controller.  */\n+                transfer_request -> ux_slave_transfer_request_data_pointer = packet -> nx_packet_prepend_ptr;\n+                status =  _ux_device_stack_transfer_request(transfer_request,\n+                                    packet_payload, packet_payload);\n+#else\n+\n                 /* Send the request to the device controller.  */\n                 status =  _ux_device_stack_transfer_request(transfer_request, UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE,\n                                                                 UX_DEVICE_CLASS_RNDIS_BULKOUT_BUFFER_SIZE);\n+#endif\n \n                 /* Check the completion code. */\n                 if (status == UX_SUCCESS)\n@@ -195,6 +227,17 @@ USB_NETWORK_DEVICE_TYPE         *ux_nx_device;\n                         if (packet_payload <= transfer_request -> ux_slave_transfer_request_actual_length - UX_DEVICE_CLASS_RNDIS_PACKET_HEADER_LENGTH)\n                         {\n \n+#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_RNDIS_ZERO_COPY)\n+\n+                            /* Data already in buffer, adjust packet start and save length.  */\n+                            packet -> nx_packet_prepend_ptr += UX_DEVICE_CLASS_RNDIS_PACKET_BUFFER;\n+                            packet -> nx_packet_length = packet_payload;\n+                            packet -> nx_packet_append_ptr += packet -> nx_packet_length;\n+\n+                            /* Send that packet to the NetX USB broker.  */\n+                            _ux_network_driver_packet_received(rndis -> ux_slave_class_rndis_network_handle, packet);\n+#else\n+\n                             /* Adjust the prepend pointer to take into account the non 3 bit alignment of the ethernet header.  */\n                             packet -> nx_packet_prepend_ptr += sizeof(USHORT);\n                             packet -> nx_packet_append_ptr += sizeof(USHORT);\n@@ -219,6 +262,7 @@ USB_NETWORK_DEVICE_TYPE         *ux_nx_device;\n                                 _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CLASS_ETH_PACKET_ERROR);\n                                 nx_packet_release(packet);\n                             }\n+#endif\n                         }\n                         else\n                         {"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_rndis_control_request.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_rndis_control_request              PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -94,10 +94,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_rndis_control_request(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_rndis_initialize.c",
            "diff": "@@ -78,7 +78,7 @@ ULONG ux_device_class_rndis_oid_supported_list[UX_DEVICE_CLASS_RNDIS_OID_SUPPORT\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_rndis_initialize                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -139,11 +139,11 @@ ULONG ux_device_class_rndis_oid_supported_list[UX_DEVICE_CLASS_RNDIS_OID_SUPPORT\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            removed internal NX pool,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n /*                                            checked compile options,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_rndis_initialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -156,7 +156,7 @@ UINT  _ux_device_class_rndis_initialize(UX_SLAVE_CLASS_COMMAND *command)\n UX_SLAVE_CLASS_RNDIS                        *rndis;\n UX_SLAVE_CLASS_RNDIS_PARAMETER              *rndis_parameter;\n UX_SLAVE_CLASS                              *class_ptr;\n-UINT                                        status;\n+UINT                                        status = UX_SUCCESS;\n \n \n     /* Compile option checks.  */"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_activate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_activate                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -74,10 +74,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_activate(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_csw_send.c",
            "diff": "@@ -39,7 +39,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_csw_send                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -90,10 +90,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_csw_send(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_entry.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_entry                      PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -75,9 +75,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_entry(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_get_configuration.c",
            "diff": "@@ -303,7 +303,7 @@ UCHAR usbx_device_class_storage_configuration_active_profile[] = {\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_get_configuration          PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -349,10 +349,10 @@ UCHAR usbx_device_class_storage_configuration_active_profile[] = {\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_get_configuration(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_get_performance.c",
            "diff": "@@ -45,7 +45,7 @@ UCHAR usbx_device_class_storage_performance[] = {\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_get_performance            PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -90,10 +90,10 @@ UCHAR usbx_device_class_storage_performance[] = {\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_get_performance(UX_SLAVE_CLASS_STORAGE *storage, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_initialize.c",
            "diff": "@@ -41,7 +41,7 @@ UCHAR _ux_system_slave_class_storage_product_serial[] =                     \"123\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_storage_initialize                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -82,10 +82,10 @@ UCHAR _ux_system_slave_class_storage_product_serial[] =                     \"123\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -249,7 +249,7 @@ ULONG                                   lun_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_storage_initialize                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -278,7 +278,7 @@ ULONG                                   lun_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_inquiry.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_inquiry                    PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -92,10 +92,10 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            updated dCSWDataResidue,    */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_inquiry(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_mode_sense.c",
            "diff": "@@ -66,7 +66,7 @@ UCHAR usbx_device_class_storage_mode_sense_page_cdrom[USBX_DEVICE_CLASS_STORAGE_\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_mode_sense                 PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -116,10 +116,10 @@ UCHAR usbx_device_class_storage_mode_sense_page_cdrom[USBX_DEVICE_CLASS_STORAGE_\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_mode_sense(UX_SLAVE_CLASS_STORAGE *storage, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_read_capacity.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_read_capacity              PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -86,10 +86,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_read_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_read_disk_information.c",
            "diff": "@@ -65,7 +65,7 @@ UCHAR usbx_device_class_storage_disk_information[] = {\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_read_disk_information      PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -109,10 +109,10 @@ UCHAR usbx_device_class_storage_disk_information[] = {\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_read_disk_information(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_read_format_capacity.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_read_format_capacity       PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -85,10 +85,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_read_format_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_read_toc.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_read_toc                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -86,10 +86,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_read_toc(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_report_key.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_report_key                 PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -86,10 +86,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_report_key(UX_SLAVE_CLASS_STORAGE *storage, "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_request_sense.c",
            "diff": "@@ -40,7 +40,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_request_sense              PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -87,10 +87,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            checked compiling options   */\n /*                                            by runtime UX_ASSERT,       */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_request_sense(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_thread.c",
            "diff": "@@ -36,7 +36,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_thread                     PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -127,10 +127,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_device_class_storage_thread(ULONG storage_class)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_storage_uninitialize.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_device_class_storage_uninitialize               PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -75,10 +75,10 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n /*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_storage_uninitialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_change.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_change                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,10 +70,11 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_video_change(UX_SLAVE_CLASS_COMMAND *command)\n@@ -149,11 +150,6 @@ ULONG                                    stream_index;\n \n                 /* Save it.  */\n                 stream -> ux_device_class_video_stream_endpoint = endpoint;\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-                endpoint -> ux_slave_endpoint_transfer_request.\n-                    ux_slave_transfer_request_data_pointer =\n-                        stream -> ux_device_class_video_stream_endpoint_buffer;\n-#endif\n                 break;\n             }\n "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_entry.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_entry                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,9 +72,9 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_video_entry(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_initialize.c",
            "diff": "@@ -33,7 +33,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_initialize                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,10 +70,11 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_video_initialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -153,7 +154,11 @@ ULONG                                   i;\n                             stream_parameter -> ux_device_class_video_stream_parameter_max_payload_buffer_nb;\n \n         /* Create block of buffer buffer is cache safe for USB transfer.  */\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+        stream -> ux_device_class_video_stream_buffer = (UCHAR *)_ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, memory_size);\n+#else\n         stream -> ux_device_class_video_stream_buffer = (UCHAR *)_ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);\n+#endif\n \n         /* Check for successful allocation.  */\n         if (stream -> ux_device_class_video_stream_buffer == UX_NULL)\n@@ -166,17 +171,6 @@ ULONG                                   i;\n         stream -> ux_device_class_video_stream_transfer_pos = (UX_DEVICE_CLASS_VIDEO_PAYLOAD *)stream -> ux_device_class_video_stream_buffer;\n         stream -> ux_device_class_video_stream_access_pos = stream -> ux_device_class_video_stream_transfer_pos;\n \n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-        stream -> ux_device_class_video_stream_endpoint_buffer = _ux_utility_memory_allocate(\n-                UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,\n-                stream -> ux_device_class_video_stream_payload_buffer_size);\n-        if (stream -> ux_device_class_video_stream_endpoint_buffer == UX_NULL)\n-        {\n-            status = UX_MEMORY_INSUFFICIENT;\n-            break;\n-        }\n-#endif\n-\n #if !defined(UX_DEVICE_STANDALONE)\n \n         /* Create memory block for streaming thread stack in addition.  */\n@@ -261,10 +255,6 @@ ULONG                                   i;\n             _ux_utility_thread_delete(&stream -> ux_device_class_video_stream_thread);\n         if (stream -> ux_device_class_video_stream_thread_stack)\n             _ux_utility_memory_free(stream -> ux_device_class_video_stream_thread_stack);\n-#endif\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-        if (stream -> ux_device_class_video_stream_endpoint_buffer)\n-            _ux_utility_memory_free(stream -> ux_device_class_video_stream_endpoint_buffer);\n #endif\n         if (stream -> ux_device_class_video_stream_buffer)\n             _ux_utility_memory_free(stream -> ux_device_class_video_stream_buffer);\n@@ -280,7 +270,7 @@ ULONG                                   i;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_initialize                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -309,7 +299,7 @@ ULONG                                   i;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_device_class_video_initialize(UX_SLAVE_CLASS_COMMAND *command)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_ioctl.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_ioctl                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -66,8 +66,8 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_ioctl(UX_DEVICE_CLASS_VIDEO *video, ULONG ioctl_function,\n@@ -111,7 +111,7 @@ VOID                                                **pptr_parameter;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_ioctl                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -143,7 +143,7 @@ VOID                                                **pptr_parameter;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_video_ioctl(UX_DEVICE_CLASS_VIDEO *video, ULONG ioctl_function,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_max_payload_get.c",
            "diff": "@@ -96,7 +96,7 @@ UX_SLAVE_DEVICE             *device;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_max_payload_length          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -129,7 +129,7 @@ UX_SLAVE_DEVICE             *device;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n ULONG _uxe_device_class_video_max_payload_length(UX_DEVICE_CLASS_VIDEO_STREAM *stream)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_read_payload_free.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_read_payload_free            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -64,8 +64,8 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_read_payload_free(UX_DEVICE_CLASS_VIDEO_STREAM *stream)\n@@ -129,7 +129,7 @@ UCHAR                       *next_payload;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_read_payload_free           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -161,7 +161,7 @@ UCHAR                       *next_payload;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_video_read_payload_free(UX_DEVICE_CLASS_VIDEO_STREAM *stream)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_read_payload_get.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_read_payload_get             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -68,8 +68,8 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_read_payload_get(UX_DEVICE_CLASS_VIDEO_STREAM *stream,\n@@ -118,7 +118,7 @@ UX_SLAVE_DEVICE             *device;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_read_payload_get            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -154,7 +154,7 @@ UX_SLAVE_DEVICE             *device;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_video_read_payload_get(UX_DEVICE_CLASS_VIDEO_STREAM *stream,"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_read_task_function.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_read_task_function           PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -71,6 +71,10 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  10-31-2022     Chaoqiong Xiao           Initial Version 6.2.0         */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            useed zero copy when class  */\n+/*                                            owns endpoint buffer,       */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_read_task_function(UX_DEVICE_CLASS_VIDEO_STREAM *stream)\n@@ -116,6 +120,13 @@ UINT                            status;\n         /* Next state: transfer wait.  */\n         stream -> ux_device_class_video_stream_task_state = UX_DEVICE_CLASS_VIDEO_STREAM_RW_WAIT;\n \n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+        /* Zero copy: directly use frame buffer.  */\n+        transfer -> ux_slave_transfer_request_data_pointer = stream ->\n+                ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data;\n+#endif\n+\n         /* Reset transfer state.  */\n         UX_SLAVE_TRANSFER_STATE_RESET(transfer);\n     }\n@@ -153,9 +164,17 @@ UINT                            status;\n \n         /* Frame received, log it.  */\n         stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_length = actual_length;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+        /* Zero copy: data already in frame buffer.  */\n+#else\n+\n+        /* Copy data from endpoint buffer.  */\n         _ux_utility_memory_copy(stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data,\n                         transfer -> ux_slave_transfer_request_data_pointer,\n                         actual_length); /* Use case of memcpy is verified. */\n+#endif\n \n         /* For simple, do not advance the transfer position if there is overflow.  */\n         next_pos = (UCHAR *)stream -> ux_device_class_video_stream_transfer_pos;"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_read_thread_entry.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_read_thread_entry            PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,6 +72,10 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error statistics,     */\n /*                                            resulting in version 6.2.0  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            useed zero copy when class  */\n+/*                                            owns endpoint buffer,       */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID _ux_device_class_video_read_thread_entry(ULONG video_stream)\n@@ -115,6 +119,13 @@ ULONG                           actual_length;\n             /* Get transfer instance.  */\n             transfer = &endpoint -> ux_slave_endpoint_transfer_request;\n \n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+            /* Zero copy: directly use frame buffer for transfer.  */\n+            transfer -> ux_slave_transfer_request_data_pointer = stream ->\n+                    ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data;\n+#endif\n+\n             /* Start payload transfer anyway.  */\n             status = _ux_device_stack_transfer_request(transfer, max_packet_size, max_packet_size);\n \n@@ -132,9 +143,17 @@ ULONG                           actual_length;\n \n             /* Frame received, log it.  */\n             stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_length = actual_length;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+            /* Zero copy: data already in frame buffer.  */\n+#else\n+\n+            /* Copy data from endpoint buffer.  */\n             _ux_utility_memory_copy(stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data,\n                             transfer -> ux_slave_transfer_request_data_pointer,\n                             actual_length); /* Use case of memcpy is verified. */\n+#endif\n \n             /* For simple, do not advance the transfer position if there is overflow.  */\n             next_pos = (UCHAR *)stream -> ux_device_class_video_stream_transfer_pos;"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_reception_start.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_reception_start              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -68,8 +68,8 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_reception_start(UX_DEVICE_CLASS_VIDEO_STREAM *stream)\n@@ -122,7 +122,7 @@ UX_SLAVE_DEVICE             *device;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_reception_start             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -153,7 +153,7 @@ UX_SLAVE_DEVICE             *device;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_video_reception_start(UX_DEVICE_CLASS_VIDEO_STREAM *stream)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_transmission_start.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_transmission_start           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -68,8 +68,8 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_transmission_start(UX_DEVICE_CLASS_VIDEO_STREAM *stream)\n@@ -123,7 +123,7 @@ UX_SLAVE_DEVICE             *device;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_transmission_start          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -155,7 +155,7 @@ UX_SLAVE_DEVICE             *device;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_video_transmission_start(UX_DEVICE_CLASS_VIDEO_STREAM *stream)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_uninitialize.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_uninitialize                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -65,10 +65,11 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added a new mode to manage  */\n-/*                                            endpoint buffer in classes, */\n-/*                                            resulting in version 6.x    */\n+/*                                            endpoint buffer in classes  */\n+/*                                            with zero copy enabled,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_device_class_video_uninitialize(UX_SLAVE_CLASS_COMMAND *command)\n@@ -97,9 +98,6 @@ ULONG                            i;\n #if !defined(UX_DEVICE_STANDALONE)\n             _ux_utility_thread_delete(&stream -> ux_device_class_video_stream_thread);\n             _ux_utility_memory_free(stream -> ux_device_class_video_stream_thread_stack);\n-#endif\n-#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n-            _ux_utility_memory_free(stream -> ux_device_class_video_stream_endpoint_buffer);\n #endif\n             _ux_utility_memory_free(stream -> ux_device_class_video_stream_buffer);\n "
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_write_payload_commit.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_write_payload_commit         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -65,8 +65,8 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_write_payload_commit(UX_DEVICE_CLASS_VIDEO_STREAM *stream, ULONG length)\n@@ -129,7 +129,7 @@ UCHAR                       *next_pos;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_write_payload_commit        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -162,7 +162,7 @@ UCHAR                       *next_pos;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_video_write_payload_commit(UX_DEVICE_CLASS_VIDEO_STREAM *stream, ULONG length)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_write_payload_get.c",
            "diff": "@@ -34,7 +34,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_write_payload_get            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -68,8 +68,8 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  04-25-2022     Chaoqiong Xiao           Initial Version 6.1.11        */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_write_payload_get(UX_DEVICE_CLASS_VIDEO_STREAM *stream, UCHAR **payload, ULONG *length)\n@@ -118,7 +118,7 @@ UX_SLAVE_DEVICE             *device;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_device_class_video_write_payload_get           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -154,7 +154,7 @@ UX_SLAVE_DEVICE             *device;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Yajun Xia                Initial Version 6.x           */\n+/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_device_class_video_write_payload_get(UX_DEVICE_CLASS_VIDEO_STREAM *stream, UCHAR **payload, ULONG *length)"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_write_task_function.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_write_task_function          PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,6 +72,10 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  10-31-2022     Chaoqiong Xiao           Initial Version 6.2.0         */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            useed zero copy when class  */\n+/*                                            owns endpoint buffer,       */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_device_class_video_write_task_function(UX_DEVICE_CLASS_VIDEO_STREAM *stream)\n@@ -119,9 +123,19 @@ UINT                            status;\n \n         /* Start payload transfer anyway (even ZLP).  */\n         transfer_length = stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_length;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+        /* Zero copy: directly use frame buffer for transfer.  */\n+        transfer -> ux_slave_transfer_request_data_pointer = stream ->\n+                    ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data;\n+#else\n+\n+        /* Copy frame buffer to transfer buffer.  */\n         if (transfer_length)\n             _ux_utility_memory_copy(transfer -> ux_slave_transfer_request_data_pointer,\n                 stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data, transfer_length); /* Use case of memcpy is verified. */\n+#endif\n \n         /* Reset transfer state.  */\n         UX_SLAVE_TRANSFER_STATE_RESET(transfer);"
        },
        {
            "filename": "common/usbx_device_classes/src/ux_device_class_video_write_thread_entry.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_device_class_video_write_thread_entry           PORTABLE C      */\n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,6 +72,10 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error statistics,     */\n /*                                            resulting in version 6.2.0  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            useed zero copy when class  */\n+/*                                            owns endpoint buffer,       */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID _ux_device_class_video_write_thread_entry(ULONG video_stream)\n@@ -112,9 +116,19 @@ ULONG                           actual_length;\n \n             /* Start payload transfer anyway (even ZLP).  */\n             transfer_length = stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_length;\n+\n+#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1\n+\n+            /* Zero copy: directly use frame buffer for transfer.  */\n+            transfer -> ux_slave_transfer_request_data_pointer = stream ->\n+                        ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data;\n+#else\n+\n+            /* Copy frame buffer to transfer buffer.  */\n             if (transfer_length)\n                 _ux_utility_memory_copy(transfer -> ux_slave_transfer_request_data_pointer,\n                     stream -> ux_device_class_video_stream_transfer_pos -> ux_device_class_video_payload_data, transfer_length); /* Use case of memcpy is verified. */\n+#endif\n \n             /* Issue transfer request, thread blocked until transfer done.  */\n             status = _ux_device_stack_transfer_request(transfer, transfer_length, transfer_length);"
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_audio.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_host_class_audio.h                               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -57,9 +57,10 @@\n /*                                            added feedback support,     */\n /*                                            added Audio 2.0 support,    */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved AC AS management,  */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -458,6 +459,7 @@ typedef struct UX_HOST_CLASS_AUDIO_STRUCT\n #if defined(UX_HOST_CLASS_AUDIO_INTERRUPT_SUPPORT)\n     UX_HOST_CLASS_AUDIO_AC\n                     *ux_host_class_audio_ac;\n+    ULONG           ux_host_class_audio_ac_as;\n #endif\n     struct UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST_STRUCT\n                     *ux_host_class_audio_head_transfer_request;"
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_cdc_ecm.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_host_class_cdc_ecm.h                             PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -60,9 +60,9 @@\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            supported NX packet chain,  */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_hid.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_host_class_hid.h                                 PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -55,9 +55,9 @@\n /*                                            added interrupt OUT support,*/\n /*                                            added standalone mode,      */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_hub.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_host_class_hub.h                                 PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -50,9 +50,9 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            optimized USB descriptors,  */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_pima.h",
            "diff": "@@ -21,12 +21,12 @@\n /**************************************************************************/\n \n \n-/**************************************************************************/ \n-/*                                                                        */ \n-/*  COMPONENT DEFINITION                                   RELEASE        */ \n-/*                                                                        */ \n-/*    ux_host_class_pima.h                                PORTABLE C      */ \n-/*                                                           6.x          */\n+/**************************************************************************/\n+/*                                                                        */\n+/*  COMPONENT DEFINITION                                   RELEASE        */\n+/*                                                                        */\n+/*    ux_host_class_pima.h                                PORTABLE C      */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -53,11 +53,13 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            improved internal checks,   */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            removed unused semaphore,   */\n+/*                                            optimized PIMA data sets,   */\n /*                                            increased default buffer    */\n /*                                            length to get device info,  */\n-/*                                            added error checks support, */      \n-/*                                            resulting in version 6.x    */\n+/*                                            added error checks support, */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -403,7 +405,6 @@ typedef struct UX_HOST_CLASS_PIMA_STRUCT\n     struct UX_HOST_CLASS_PIMA_SESSION_STRUCT\n                     *ux_host_class_pima_session;\n     UCHAR           *ux_host_class_pima_container;\n-    UX_SEMAPHORE    ux_host_class_pima_semaphore;\n     VOID            *ux_host_class_pima_application;\n     ULONG           ux_host_class_pima_zlp_flag;\n \n@@ -447,18 +448,20 @@ typedef struct UX_HOST_CLASS_PIMA_OBJECT_STRUCT\n {\n \n     ULONG           ux_host_class_pima_object_storage_id;\n-    ULONG           ux_host_class_pima_object_format;\n-    ULONG           ux_host_class_pima_object_protection_satus;\n+    USHORT          ux_host_class_pima_object_format;\n+    USHORT          ux_host_class_pima_object_protection_status;\n     ULONG           ux_host_class_pima_object_compressed_size;\n-    ULONG           ux_host_class_pima_object_thumb_format;\n+    USHORT          ux_host_class_pima_object_thumb_format;\n+    USHORT          _align_thumb_compressed_size;\n     ULONG           ux_host_class_pima_object_thumb_compressed_size;\n     ULONG           ux_host_class_pima_object_thumb_pix_width;\n     ULONG           ux_host_class_pima_object_thumb_pix_height;\n     ULONG           ux_host_class_pima_object_image_pix_width;\n     ULONG           ux_host_class_pima_object_image_pix_height;\n     ULONG           ux_host_class_pima_object_image_bit_depth;\n     ULONG           ux_host_class_pima_object_parent_object;\n-    ULONG           ux_host_class_pima_object_association_type;\n+    USHORT          ux_host_class_pima_object_association_type;\n+    USHORT          _align_association_desc;\n     ULONG           ux_host_class_pima_object_association_desc;\n     ULONG           ux_host_class_pima_object_sequence_number;\n     UCHAR           ux_host_class_pima_object_filename[UX_HOST_CLASS_PIMA_UNICODE_MAX_LENGTH]; /* Null terminated unicode string.  */\n@@ -515,9 +518,10 @@ typedef struct UX_HOST_CLASS_PIMA_DEVICE_STRUCT\n typedef struct UX_HOST_CLASS_PIMA_STORAGE_STRUCT\n {\n \n-    ULONG            ux_host_class_pima_storage_type;\n-    ULONG            ux_host_class_pima_storage_file_system_type;\n-    ULONG            ux_host_class_pima_storage_access_capability;\n+    USHORT           ux_host_class_pima_storage_type;\n+    USHORT           ux_host_class_pima_storage_file_system_type;\n+    USHORT           ux_host_class_pima_storage_access_capability;\n+    USHORT           _align_max_capacity_low;\n     ULONG            ux_host_class_pima_storage_max_capacity_low;\n     ULONG            ux_host_class_pima_storage_max_capacity_high;\n     ULONG            ux_host_class_pima_storage_free_space_bytes_low;"
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_printer.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_host_class_printer.h                             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -57,9 +57,9 @@\n /*                                            added standalone support,   */\n /*                                            added a new protocol const, */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_storage.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */ \n /*                                                                        */ \n /*    ux_host_class_storage.h                             PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -64,9 +64,9 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n "
        },
        {
            "filename": "common/usbx_host_classes/inc/ux_host_class_video.h",
            "diff": "@@ -26,7 +26,7 @@\n /*  COMPONENT DEFINITION                                   RELEASE        */\n /*                                                                        */\n /*    ux_host_class_video.h                               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -56,10 +56,12 @@\n /*                                            according to UVC 1.5 Class  */\n /*                                            specification,              */\n /*                                            resulting in version 6.1.8  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            added format and frame data */\n+/*                                            fields for H264 support,    */\n /*                                            optimized USB descriptors,  */\n /*                                            added error checks support, */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n \n@@ -607,6 +609,7 @@ typedef struct UX_HOST_CLASS_VIDEO_PARAMETER_FORMAT_DATA_STRUCT\n \n     ULONG           ux_host_class_video_parameter_format_requested;\n     ULONG           ux_host_class_video_parameter_format_subtype;\n+    UCHAR           *ux_host_class_video_parameter_format_guid;         /* not NULL if GUID is available for the subtype.  */\n     ULONG           ux_host_class_video_parameter_number_frame_descriptors;\n \n } UX_HOST_CLASS_VIDEO_PARAMETER_FORMAT_DATA;\n@@ -619,7 +622,8 @@ typedef struct UX_HOST_CLASS_VIDEO_PARAMETER_FRAME_DATA_STRUCT\n     ULONG           ux_host_class_video_parameter_frame_width;\n     ULONG           ux_host_class_video_parameter_frame_height;\n     ULONG           ux_host_class_video_parameter_default_frame_interval;\n-    ULONG           ux_host_class_video_parameter_frame_interval_type;\n+    ULONG           ux_host_class_video_parameter_frame_interval_type;  /* 0: continuous {min,max,step}, n: discrete  */\n+    UCHAR           *ux_host_class_video_parameter_frame_intervals;     /* {dwMin,dwMax,dwStep},... or dw1,dw2,... depending on interval type.  */\n \n } UX_HOST_CLASS_VIDEO_PARAMETER_FRAME_DATA;\n "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_asix_activate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_asix_activate                        PORTABLE C      */ \n-/*                                                           6.2.0        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -91,15 +91,18 @@\n /*                                            added reception buffer,     */\n /*                                            removed internal NX pool,   */\n /*                                            resulting in version 6.2.0  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            masked in standalone build, */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_asix_activate(UX_HOST_CLASS_COMMAND *command)\n {\n-#if NX_PHYSICAL_HEADER < 20\n+#if (NX_PHYSICAL_HEADER < 20) || defined(UX_HOST_STANDALONE)\n \n     UX_PARAMETER_NOT_USED(command);\n \n-    /* Error trap - function not supported due to NX lib settings.  */\n+    /* Function not supported due to NX lib settings/standalone mode.  */\n     _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);\n     return(UX_FUNCTION_NOT_SUPPORTED);\n #else"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_asix_configure.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_asix_configure                       PORTABLE C      */ \n-/*                                                           6.1          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -74,6 +74,9 @@\n /*                                            optimized based on compile  */\n /*                                            definitions,                */\n /*                                            resulting in version 6.1    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            removed interface link,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_asix_configure(UX_HOST_CLASS_ASIX *asix)\n@@ -141,20 +144,6 @@ UX_DEVICE               *parent_device;\n        the interrupt endpoint is hooked to it. */\n     status =  _ux_host_stack_configuration_interface_get(configuration, 0, 0, &asix -> ux_host_class_asix_interface);\n \n-    /* Check status for error.  */\n-    if (status == UX_SUCCESS)\n-    {\n-\n-        /* Store the instance in the interface container, this is for the USB stack\n-           when it needs to invoke the class.  */        \n-        asix -> ux_host_class_asix_interface -> ux_interface_class_instance =  (VOID *) asix;\n-\n-        /* Store the class container in the interface.  The device has the correct class, duplicate it to the \n-           interface.  */\n-        asix -> ux_host_class_asix_interface -> ux_interface_class =  asix -> ux_host_class_asix_device -> ux_device_class ;\n-\n-    }\n-\n     /* Return completion status.  */\n     return(status);\n }"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_asix_transmission_callback.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_asix_transmission_callback           PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -81,10 +81,10 @@\n /*                                            supported NX packet chain,  */\n /*                                            fixed empty queue handling, */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n /*                                            improved 64-bit support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n VOID  _ux_host_class_asix_transmission_callback (UX_TRANSFER *transfer_request)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_asix_write.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_asix_write                           PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -82,10 +82,10 @@\n /*                                            added queue modify protect, */\n /*                                            improved error check,       */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n /*                                            improved 64-bit support,    */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_asix_write(VOID *asix_class, NX_PACKET *packet)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_activate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_audio_activate                       PORTABLE C      */\n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -88,6 +88,11 @@\n /*                                            added feedback support,     */\n /*                                            refined error handling,     */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved AC AS management,  */\n+/*                                            improved error handling,    */\n+/*                                            improved descriptors check, */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_audio_activate(UX_HOST_CLASS_COMMAND *command)\n@@ -195,6 +200,11 @@ UINT                    status;\n \n                 /* In this case, bFirstInterface@2 is AC, followed ASes.  */\n                 /* Use bInterfaceCount@3.  */\n+                if (iad[3] <= 1)\n+                {\n+                    _ux_utility_memory_free(ac);\n+                    return(UX_DESCRIPTOR_CORRUPTED);\n+                }\n                 as_count = (ULONG)iad[3] - 1;\n                 break;\n             }\n@@ -204,6 +214,11 @@ UINT                    status;\n             {\n \n                 /* In this case, bInCollection@7 is AS count.  */\n+                if (desc[7] < 1 || (8 + desc[7]) != desc[0])\n+                {\n+                    _ux_utility_memory_free(ac);\n+                    return(UX_DESCRIPTOR_CORRUPTED);\n+                }\n                 as_count = (ULONG)uac10_acd[7];\n                 break;\n             }\n@@ -341,47 +356,58 @@ UINT                    status;\n \n #if defined(UX_HOST_CLASS_AUDIO_INTERRUPT_SUPPORT)\n \n-    /* Find AC and link them.  */\n-    ac = (UX_HOST_CLASS_AUDIO_AC *)audio -> ux_host_class_audio_class -> ux_host_class_first_instance;\n-    while(ac)\n+    /* Find AC and link it if there is no error.  */\n+    if (status == UX_SUCCESS)\n     {\n \n-        /* Check interface number to see if it's right AC.  */\n-        if (audio -> ux_host_class_audio_control_interface_number ==\n-            ac -> ux_host_class_audio_interface -> ux_interface_descriptor.bInterfaceNumber)\n+        ac = (UX_HOST_CLASS_AUDIO_AC *)audio -> ux_host_class_audio_class -> ux_host_class_first_instance;\n+        while(ac)\n         {\n \n-            /* Save AS to AC controlled list.  */\n-            for (pos = 0; pos < ac -> ux_host_class_audio_as_count; pos ++)\n+            /* Check interface number to see if it's right AC.  */\n+            if ((ac -> ux_host_class_audio_interface -> ux_interface_configuration == \n+                    interface_ptr -> ux_interface_configuration) &&\n+                (ac -> ux_host_class_audio_interface -> ux_interface_descriptor.bInterfaceNumber ==\n+                    audio -> ux_host_class_audio_control_interface_number) &&\n+                (ac -> ux_host_class_audio_interface -> ux_interface_descriptor.bInterfaceClass ==\n+                    UX_HOST_CLASS_AUDIO_CLASS) &&\n+                (ac -> ux_host_class_audio_interface -> ux_interface_descriptor.bInterfaceSubClass ==\n+                    UX_HOST_CLASS_AUDIO_SUBCLASS_CONTROL))\n             {\n-                if (ac -> ux_host_class_audio_as[pos] == UX_NULL)\n+\n+                /* Save AS to AC controlled list.  */\n+                for (pos = 0; pos < ac -> ux_host_class_audio_as_count; pos ++)\n                 {\n+                    if (ac -> ux_host_class_audio_as[pos] == UX_NULL)\n+                    {\n+\n+                        /* This AC is for current AS.  */\n+                        audio -> ux_host_class_audio_ac = ac;\n+                        audio -> ux_host_class_audio_ac_as = pos;\n+                        ac -> ux_host_class_audio_as[pos] = audio;\n+                        break;\n+                    }\n+                }\n \n-                    /* This AC is for current AS.  */\n-                    audio -> ux_host_class_audio_ac = ac;\n-                    ac -> ux_host_class_audio_as[pos] = audio;\n+                /* If there is no place for AS, something wrong.  */\n+                if (pos >= ac -> ux_host_class_audio_as_count)\n+                {\n+                    status = UX_DESCRIPTOR_CORRUPTED;\n                     break;\n                 }\n             }\n \n-            /* If there is no place for AS, something wrong.  */\n-            if (pos >= ac -> ux_host_class_audio_as_count)\n-            {\n-                status = UX_DESCRIPTOR_CORRUPTED;\n+            /* If AC is found and linked, done.  */\n+            if (audio -> ux_host_class_audio_ac != UX_NULL)\n                 break;\n-            }\n-        }\n-\n-        /* If AC is found and linked, done.  */\n-        if (audio -> ux_host_class_audio_ac != UX_NULL)\n-            break;\n \n-        /* If there is error, break.  */\n-        if (status != UX_SUCCESS)\n-            break;\n+            /* If there is error, break.  */\n+            if (status != UX_SUCCESS)\n+                break;\n \n-        /* Check next AC/AS.  */\n-        ac = (UX_HOST_CLASS_AUDIO_AC *)ac -> ux_host_class_audio_next_instance;\n+            /* Check next AC/AS.  */\n+            ac = (UX_HOST_CLASS_AUDIO_AC *)ac -> ux_host_class_audio_next_instance;\n+        }\n     }\n #endif\n \n@@ -417,6 +443,11 @@ UINT                    status;\n     /* If trace is enabled, insert this event into the trace buffer.  */\n     UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, status, audio, 0, 0, UX_TRACE_ERRORS, 0, 0)\n \n+#if defined(UX_HOST_CLASS_AUDIO_INTERRUPT_SUPPORT)\n+\n+    /* When there is error, AC is not linked (last possible error), no need to unlink.  */\n+#endif\n+\n     /* Error, destroy the class instance.  */\n     _ux_host_stack_class_instance_destroy(audio -> ux_host_class_audio_class, (VOID *) audio);\n "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_control_get.c",
            "diff": "@@ -358,7 +358,7 @@ UCHAR *         control_buffer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_control_get                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -388,7 +388,7 @@ UCHAR *         control_buffer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_control_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_control_request.c",
            "diff": "@@ -174,7 +174,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_control_request               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -217,7 +217,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT    _uxe_host_class_audio_control_request(UX_HOST_CLASS_AUDIO *audio,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_control_value_get.c",
            "diff": "@@ -208,7 +208,7 @@ UCHAR *         control_buffer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_control_value_get             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -240,7 +240,7 @@ UCHAR *         control_buffer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_control_value_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_control_value_set.c",
            "diff": "@@ -270,7 +270,7 @@ UCHAR *         control_buffer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_control_value_set             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -302,7 +302,7 @@ UCHAR *         control_buffer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_control_value_set(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_deactivate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_audio_deactivate                     PORTABLE C      */ \n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -81,6 +81,9 @@\n /*                                            protect reentry with mutex, */\n /*                                            added feedback support,     */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved AC AS management,  */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_audio_deactivate(UX_HOST_CLASS_COMMAND *command)\n@@ -89,6 +92,7 @@ UINT  _ux_host_class_audio_deactivate(UX_HOST_CLASS_COMMAND *command)\n UX_HOST_CLASS_AUDIO     *audio;\n #if defined(UX_HOST_CLASS_AUDIO_INTERRUPT_SUPPORT)\n UX_HOST_CLASS_AUDIO_AC  *ac;\n+UINT                    i;\n #endif\n \n     /* Get the instance for this class.  */\n@@ -109,7 +113,14 @@ UX_HOST_CLASS_AUDIO_AC  *ac;\n \n         /* The enumeration thread needs to sleep a while to allow the application or the class that may be using\n         endpoints to exit properly.  */\n-        _ux_host_thread_schedule_other(UX_THREAD_PRIORITY_ENUM); \n+        _ux_host_thread_schedule_other(UX_THREAD_PRIORITY_ENUM);\n+\n+        /* Clear the links in AS interfaces.  */\n+        for (i = 0; i < ac -> ux_host_class_audio_as_count; i++)\n+        {\n+            if (ac -> ux_host_class_audio_as[i])\n+                ac -> ux_host_class_audio_as[i] -> ux_host_class_audio_ac = UX_NULL;\n+        }\n \n         /* Destroy the instance.  */\n         _ux_host_stack_class_instance_destroy(audio -> ux_host_class_audio_class, (VOID *) audio);\n@@ -139,6 +150,14 @@ UX_HOST_CLASS_AUDIO_AC  *ac;\n         endpoints to exit properly.  */\n         _ux_host_thread_schedule_other(UX_THREAD_PRIORITY_ENUM); \n \n+#if defined(UX_HOST_CLASS_AUDIO_INTERRUPT_SUPPORT)\n+\n+        /* Clear the links in AC interface.  */\n+        ac =  audio -> ux_host_class_audio_ac;\n+        if (ac)\n+            ac -> ux_host_class_audio_as[audio -> ux_host_class_audio_ac_as] = UX_NULL;\n+#endif\n+\n         /* Destroy the instance.  */\n         _ux_host_stack_class_instance_destroy(audio -> ux_host_class_audio_class, (VOID *) audio);\n "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_descriptors_parse.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_audio_descriptors_parse              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,8 +79,8 @@\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n /*  07-29-2022     Chaoqiong Xiao           Initial Version 6.1.12        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT _ux_host_class_audio_descriptors_parse(UX_HOST_CLASS_AUDIO *audio,\n@@ -213,7 +213,7 @@ UINT                                            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_descriptors_parse             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -247,7 +247,7 @@ UINT                                            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_host_class_audio_descriptors_parse(UX_HOST_CLASS_AUDIO *audio,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_device_type_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_audio_device_type_get                PORTABLE C      */ \n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -71,6 +71,9 @@\n /*                                            removed protocol store,     */\n /*                                            added audio 2.0 support,    */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved descriptors check, */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_audio_device_type_get(UX_HOST_CLASS_AUDIO *audio)\n@@ -146,21 +149,22 @@ UINT                                            i;\n             /* Ensure we have the correct interface for Audio Control.  */\n             if ((descriptor[5] == UX_HOST_CLASS_AUDIO_CLASS) &&\n                 (descriptor[6] == UX_HOST_CLASS_AUDIO_SUBCLASS_CONTROL))\n+            {\n                 interface_descriptor = descriptor;\n+\n+                /* Check if interface is out of IAD.  */\n+                if(iad)\n+                {\n+                    if ((iad[2] > interface_descriptor[2]) ||\n+                        (iad[2] + iad[3] <= interface_descriptor[2]))\n+                        iad = UX_NULL;\n+                }\n+            }\n             else\n             {\n                 interface_descriptor = UX_NULL;\n                 descriptor_found = UX_FALSE;\n-            }\n-\n-            /* Check IAD.  */\n-            if (iad)\n-            {\n-\n-                /* Check if interface is out of IAD.  */\n-                if ((iad[2] > interface_descriptor[2]) ||\n-                    (iad[2] + iad[3] <= interface_descriptor[2]))\n-                    iad = UX_NULL;\n+                iad = UX_NULL;\n             }\n             break;\n "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_entity_control_get.c",
            "diff": "@@ -341,7 +341,7 @@ ULONG           n_subs, sub, pos, min, max, res, size;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_entity_control_get            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -373,7 +373,7 @@ ULONG           n_subs, sub, pos, min, max, res, size;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_entity_control_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_entity_control_value_get.c",
            "diff": "@@ -158,7 +158,7 @@ ULONG           actual_size;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_entity_control_value_get      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -190,7 +190,7 @@ ULONG           actual_size;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_entity_control_value_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_entity_control_value_set.c",
            "diff": "@@ -148,7 +148,7 @@ ULONG           actual_size;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_entity_control_value_set      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -180,7 +180,7 @@ ULONG           actual_size;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_entity_control_value_set(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_feedback_get.c",
            "diff": "@@ -105,7 +105,7 @@ UINT  _ux_host_class_audio_feedback_get(UX_HOST_CLASS_AUDIO *audio, UCHAR *feedb\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_feedback_get                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -136,7 +136,7 @@ UINT  _ux_host_class_audio_feedback_get(UX_HOST_CLASS_AUDIO *audio, UCHAR *feedb\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_feedback_get(UX_HOST_CLASS_AUDIO *audio, UCHAR *feedback)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_feedback_set.c",
            "diff": "@@ -122,7 +122,7 @@ UX_TRANSFER         *transfer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_feedback_set                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -153,7 +153,7 @@ UX_TRANSFER         *transfer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_feedback_set(UX_HOST_CLASS_AUDIO *audio, UCHAR *feedback)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_interrupt_start.c",
            "diff": "@@ -145,7 +145,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_interrupt_start               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -179,7 +179,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT    _uxe_host_class_audio_interrupt_start(UX_HOST_CLASS_AUDIO_AC *audio,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_raw_sampling_parse.c",
            "diff": "@@ -752,7 +752,7 @@ UINT                                    status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_raw_sampling_parse            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -788,7 +788,7 @@ UINT                                    status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_host_class_audio_raw_sampling_parse(UX_HOST_CLASS_AUDIO *audio,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_read.c",
            "diff": "@@ -155,7 +155,7 @@ ULONG       mps;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_read                          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -185,7 +185,7 @@ ULONG       mps;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_read(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST *audio_transfer_request)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_stop.c",
            "diff": "@@ -174,7 +174,7 @@ UINT                    streaming_interface;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_stop                          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -203,7 +203,7 @@ UINT                    streaming_interface;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_stop(UX_HOST_CLASS_AUDIO *audio)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_streaming_sampling_get.c",
            "diff": "@@ -410,7 +410,7 @@ UINT                                     previous_match_found;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_streaming_sampling_get        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -442,7 +442,7 @@ UINT                                     previous_match_found;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_streaming_sampling_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_SAMPLING_CHARACTERISTICS *audio_sampling)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_streaming_sampling_set.c",
            "diff": "@@ -393,7 +393,7 @@ ULONG                   res_bytes;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_streaming_sampling_set        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -425,7 +425,7 @@ ULONG                   res_bytes;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_streaming_sampling_set(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_SAMPLING *audio_sampling)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_audio_write.c",
            "diff": "@@ -151,7 +151,7 @@ ULONG       mps;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_audio_write                         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -181,7 +181,7 @@ ULONG       mps;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_audio_write(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST *audio_transfer_request)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_activate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_cdc_acm_activate                     PORTABLE C      */\n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -87,6 +87,9 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved control searching, */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_cdc_acm_activate(UX_HOST_CLASS_COMMAND *command)\n@@ -214,14 +217,15 @@ UX_HOST_CLASS_CDC_ACM_LINE_STATE    line_state;\n             while(cdc_acm_inst)\n             {\n \n-                /* If this data interface is inside the associate list, link it.  */\n-                if (cdc_acm_inst -> ux_host_class_cdc_acm_interfaces_bitmap &\n-                    (1ul << interface_ptr -> ux_interface_descriptor.bInterfaceNumber))\n+                /* If this data interface is on the same device and inside the associate list, link it.  */\n+                if ((cdc_acm_inst -> ux_host_class_cdc_acm_device ==\n+                        cdc_acm -> ux_host_class_cdc_acm_device) &&\n+                    (cdc_acm_inst -> ux_host_class_cdc_acm_interfaces_bitmap &\n+                        (1ul << interface_ptr -> ux_interface_descriptor.bInterfaceNumber)))\n                 {\n \n-                    /* Save control instance and we are done.  */\n+                    /* Save control instance.  */\n                     cdc_acm -> ux_host_class_cdc_acm_control = cdc_acm_inst;\n-                    break;\n                 }\n \n                 /* Next instance.  */"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_command.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_cdc_acm_command                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -82,8 +82,8 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_cdc_acm_command(UX_HOST_CLASS_CDC_ACM *cdc_acm, ULONG command,\n@@ -218,7 +218,7 @@ ULONG           request_direction;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_cdc_acm_command                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -253,7 +253,7 @@ ULONG           request_direction;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_cdc_acm_command(UX_HOST_CLASS_CDC_ACM *cdc_acm, ULONG command,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_deactivate.c",
            "diff": "@@ -87,6 +87,8 @@ UX_HOST_CLASS_CDC_ACM       *cdc_acm;\n UX_TRANSFER                 *transfer_request;\n #if !defined(UX_HOST_STANDALONE)\n UINT                        status;\n+#else\n+UX_HOST_CLASS_CDC_ACM       *cdc_acm_inst;\n #endif\n \n     /* Get the instance for this class.  */\n@@ -120,6 +122,27 @@ UINT                        status;\n             /* Free data buffer for the interrupt transfer.  */\n             _ux_utility_memory_free(transfer_request -> ux_transfer_request_data_pointer);\n         }\n+\n+#if defined(UX_HOST_STANDALONE)\n+\n+        /* Linked from data instance must be removed then.  */\n+        /* We scan CDC ACM instances to find the master instance.  */\n+        /* Get first instance linked to the class.  */\n+        cdc_acm_inst = (UX_HOST_CLASS_CDC_ACM *) cdc_acm ->\n+                    ux_host_class_cdc_acm_class -> ux_host_class_first_instance;\n+\n+        /* Scan all instances.  */\n+        while(cdc_acm_inst)\n+        {\n+\n+            /* If this data interface is linking to the control instance, unlink it.  */\n+            if (cdc_acm_inst -> ux_host_class_cdc_acm_control == cdc_acm)\n+                cdc_acm_inst -> ux_host_class_cdc_acm_control = UX_NULL;\n+\n+            /* Next instance.  */\n+            cdc_acm_inst = cdc_acm_inst -> ux_host_class_cdc_acm_next_instance;\n+        }\n+#endif\n     }\n     else\n     {"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_endpoints_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_cdc_acm_endpoints_get                PORTABLE C      */ \n-/*                                                           6.1.11       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,6 +79,9 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            checked endpoint get status,*/\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_cdc_acm_endpoints_get(UX_HOST_CLASS_CDC_ACM *cdc_acm)\n@@ -100,7 +103,11 @@ UX_TRANSFER     *transfer_request;\n         {                        \n     \n             /* Get interface endpoint.  */\n-            _ux_host_stack_interface_endpoint_get(cdc_acm -> ux_host_class_cdc_acm_interface, endpoint_index, &endpoint);\n+            status = _ux_host_stack_interface_endpoint_get(cdc_acm -> ux_host_class_cdc_acm_interface, endpoint_index, &endpoint);\n+\n+            /* Check status.  */\n+            if (status != UX_SUCCESS)\n+                continue;\n     \n             /* Check if endpoint is bulk and OUT.  */\n             if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_OUT) &&\n@@ -163,7 +170,11 @@ UX_TRANSFER     *transfer_request;\n         {                        \n     \n             /* Get the endpoint handle.  */\n-            _ux_host_stack_interface_endpoint_get(cdc_acm -> ux_host_class_cdc_acm_interface, endpoint_index, &endpoint);\n+            status = _ux_host_stack_interface_endpoint_get(cdc_acm -> ux_host_class_cdc_acm_interface, endpoint_index, &endpoint);\n+\n+            /* Check status.  */\n+            if (status != UX_SUCCESS)\n+                continue;\n \n             /* Check if endpoint is Interrupt and IN.  */\n             if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_entry.c",
            "diff": "@@ -492,28 +492,30 @@ ULONG                       tick, diff;\n         if (cdc_acm -> ux_host_class_cdc_acm_status == UX_SUCCESS)\n         {\n \n+            /* We are here only if it's control interface.  */\n             /* We scan CDC ACM instances to find the DATA instance.  */\n             /* Get class.  */\n             cdc_acm_class = cdc_acm -> ux_host_class_cdc_acm_class;\n \n             /* Get first instance linked to the class.  */\n             cdc_acm_inst = (UX_HOST_CLASS_CDC_ACM *)cdc_acm_class -> ux_host_class_first_instance;\n \n-            /* Scan all instances.  */\n+            /* Scan all data instances to update control links.  */\n             while(cdc_acm_inst)\n             {\n \n                 /* Get interface of the instance.  */\n                 interface_ptr = cdc_acm_inst -> ux_host_class_cdc_acm_interface;\n \n-                /* If this data interface is inside the associate list, link it.  */\n-                if (cdc_acm -> ux_host_class_cdc_acm_interfaces_bitmap &\n-                    (1ul << interface_ptr -> ux_interface_descriptor.bInterfaceNumber))\n+                /* If this data interface is inside the associate list on the same device, link it.  */\n+                if ((cdc_acm_inst -> ux_host_class_cdc_acm_device ==\n+                        cdc_acm -> ux_host_class_cdc_acm_device) &&\n+                    (cdc_acm -> ux_host_class_cdc_acm_interfaces_bitmap &\n+                        (1ul << interface_ptr -> ux_interface_descriptor.bInterfaceNumber)))\n                 {\n \n-                    /* Save control instance and we are done.  */\n+                    /* Link this control to the data instance.  */\n                     cdc_acm_inst -> ux_host_class_cdc_acm_control = cdc_acm;\n-                    break;\n                 }\n \n                 /* Next instance.  */"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_ioctl.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_cdc_acm_ioctl                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,8 +79,8 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_cdc_acm_ioctl(UX_HOST_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,\n@@ -348,7 +348,7 @@ UX_TRANSFER                             *transfer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_cdc_acm_ioctl                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -379,7 +379,7 @@ UX_TRANSFER                             *transfer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_cdc_acm_ioctl(UX_HOST_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_read.c",
            "diff": "@@ -238,7 +238,7 @@ ULONG           transfer_flags;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_cdc_acm_read                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -270,7 +270,7 @@ ULONG           transfer_flags;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_cdc_acm_read (UX_HOST_CLASS_CDC_ACM *cdc_acm, UCHAR *data_pointer, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_reception_start.c",
            "diff": "@@ -148,7 +148,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_cdc_acm_reception_start             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -179,7 +179,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_cdc_acm_reception_start (UX_HOST_CLASS_CDC_ACM *cdc_acm, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_reception_stop.c",
            "diff": "@@ -146,7 +146,7 @@ UX_TRANSFER              *transfer_request;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_cdc_acm_reception_stop              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -176,7 +176,7 @@ UX_TRANSFER              *transfer_request;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_cdc_acm_reception_stop(UX_HOST_CLASS_CDC_ACM *cdc_acm, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_write.c",
            "diff": "@@ -254,7 +254,7 @@ ULONG           transfer_flags;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_cdc_acm_write                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -286,7 +286,7 @@ ULONG           transfer_flags;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_cdc_acm_write(UX_HOST_CLASS_CDC_ACM *cdc_acm, UCHAR *data_pointer, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_acm_write_with_callback.c",
            "diff": "@@ -167,7 +167,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_cdc_acm_write_with_callback         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -199,7 +199,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_cdc_acm_write_with_callback(UX_HOST_CLASS_CDC_ACM *cdc_acm,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_ecm_activate.c",
            "diff": "@@ -104,6 +104,10 @@ UX_HOST_CLASS_CDC_ECM_NX_ETHERNET_POOL_ALLOCSIZE_ASSERT\n /*                                            deprecated ECM pool option, */\n /*                                            supported NX packet chain,  */\n /*                                            resulting in version 6.2.0  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            rejected the CDC ECM data   */\n+/*                                            interface not next to ctrl, */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_cdc_ecm_activate(UX_HOST_CLASS_COMMAND *command)\n@@ -163,8 +167,13 @@ UX_INTERFACE                        *cur_interface;\n         if (cur_interface -> ux_interface_descriptor.bInterfaceClass == UX_HOST_CLASS_CDC_CONTROL_CLASS)\n         {\n \n-            /* Save it.  */\n-            control_interface =  cur_interface;\n+            /* Is this the right one before current interface?  */\n+            if (cur_interface -> ux_interface_next_interface == interface_ptr)\n+            {\n+\n+                /* Save it.  */\n+                control_interface =  cur_interface;\n+            }\n         }\n \n         /* Advance current interface.  */"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_cdc_ecm_endpoints_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_cdc_ecm_endpoints_get                PORTABLE C      */\n-/*                                                           6.1.9        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -73,6 +73,9 @@\n /*                                            use pre-calculated value    */\n /*                                            instead of wMaxPacketSize,  */\n /*                                            resulting in version 6.1.9  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            checked endpoint get status,*/\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_cdc_ecm_endpoints_get(UX_HOST_CLASS_CDC_ECM *cdc_ecm)\n@@ -131,7 +134,11 @@ UX_INTERFACE    *data_interface;\n     {\n \n         /* Get interface endpoint.  */\n-        _ux_host_stack_interface_endpoint_get(data_interface, endpoint_index, &endpoint);\n+        status = _ux_host_stack_interface_endpoint_get(data_interface, endpoint_index, &endpoint);\n+\n+        /* Check status.  */\n+        if (status != UX_SUCCESS)\n+            continue;\n \n         /* Check if endpoint is bulk and OUT.  */\n         if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_OUT) &&\n@@ -173,7 +180,11 @@ UX_INTERFACE    *data_interface;\n     {\n \n         /* Get the endpoint handle.  */\n-        _ux_host_stack_interface_endpoint_get(data_interface, endpoint_index, &endpoint);\n+        status = _ux_host_stack_interface_endpoint_get(data_interface, endpoint_index, &endpoint);\n+\n+        /* Check status.  */\n+        if (status != UX_SUCCESS)\n+            continue;\n \n         /* Check if endpoint is bulk and IN.  */\n         if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&\n@@ -217,7 +228,11 @@ UX_INTERFACE    *data_interface;\n     {\n \n         /* Get the endpoint handle.  */\n-        _ux_host_stack_interface_endpoint_get(cdc_ecm -> ux_host_class_cdc_ecm_interface_control, endpoint_index, &endpoint);\n+        status = _ux_host_stack_interface_endpoint_get(cdc_ecm -> ux_host_class_cdc_ecm_interface_control, endpoint_index, &endpoint);\n+\n+        /* Check status.  */\n+        if (status != UX_SUCCESS)\n+            continue;\n \n         /* Check if endpoint is Interrupt and IN.  */\n         if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_activate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_gser_activate                        PORTABLE C      */ \n-/*                                                           6.1.11       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -75,6 +75,9 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved error handling,    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_gser_activate(UX_HOST_CLASS_COMMAND *command)\n@@ -83,6 +86,7 @@ UINT  _ux_host_class_gser_activate(UX_HOST_CLASS_COMMAND *command)\n UX_DEVICE                           *device;\n UX_HOST_CLASS_GSER                  *gser;\n UINT                                status;\n+ULONG                               interface_index;\n \n \n     /* The Generic Modem class is always activated by the device descriptor. */\n@@ -139,6 +143,13 @@ UINT                                status;\n         return(UX_SUCCESS);\n     }\n \n+    /* Free created resources.  */\n+    for (interface_index = 0; interface_index < UX_HOST_CLASS_GSER_INTERFACE_NUMBER; interface_index ++)\n+    {\n+        if (_ux_host_semaphore_created(&gser -> ux_host_class_gser_interface_array[interface_index].ux_host_class_gser_semaphore))\n+            _ux_host_semaphore_delete(&gser -> ux_host_class_gser_interface_array[interface_index].ux_host_class_gser_semaphore);\n+    }\n+\n     /* Destroy class instance.  */\n     _ux_host_stack_class_instance_destroy(gser -> ux_host_class_gser_class, (VOID *) gser);\n "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_command.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_gser_command                         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -82,8 +82,8 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            refined macros names,       */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_gser_command(UX_HOST_CLASS_GSER *gser, ULONG interface_index, ULONG command,\n@@ -174,7 +174,7 @@ ULONG           request_direction;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_gser_command                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -208,7 +208,7 @@ ULONG           request_direction;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_gser_command(UX_HOST_CLASS_GSER *gser, ULONG interface_index, ULONG command,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_configure.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_gser_configure                       PORTABLE C      */ \n-/*                                                           6.1.10       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -77,6 +77,9 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            refined macros names,       */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            removed interface link,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_gser_configure(UX_HOST_CLASS_GSER *gser)\n@@ -147,29 +150,19 @@ UX_DEVICE               *parent_device;\n \n         /* Get that interface.  */\n         status =  _ux_host_stack_configuration_interface_get(configuration, interface_index, 0, &gser -> ux_host_class_gser_interface_array[interface_index].ux_host_class_gser_interface);\n-    \n-        /* Should not fail. But do a sanity check.  */\n-        if (status == UX_SUCCESS)\n-        {\n-\n-            /* Store the instance in the interface container, this is for the USB stack\n-               when it needs to invoke the class.  */        \n-            gser -> ux_host_class_gser_interface_array[interface_index].ux_host_class_gser_interface -> ux_interface_class_instance =  (VOID *) gser;\n-\n-            /* Store the class container in the interface.  The device has the correct class, duplicate it to the \n-               interface.  */\n-            gser -> ux_host_class_gser_interface_array[interface_index].ux_host_class_gser_interface -> ux_interface_class =  gser -> ux_host_class_gser_device -> ux_device_class ;\n \n-            /* Create the semaphore to protect 2 threads from accessing the same gser instance.  */\n-            status =  _ux_host_semaphore_create(&gser -> ux_host_class_gser_interface_array[interface_index].ux_host_class_gser_semaphore, \"ux_host_class_gser_semaphore\", 1);\n+        /* If any of interface expected not exist, reject the device.  */\n+        if (status != UX_SUCCESS)\n+            return(status);\n \n-            /* Check status.  */\n-            if (status != UX_SUCCESS)\n-                return(UX_SEMAPHORE_ERROR);\n+        /* Create the semaphore to protect 2 threads from accessing the same gser instance.  */\n+        status =  _ux_host_semaphore_create(&gser -> ux_host_class_gser_interface_array[interface_index].ux_host_class_gser_semaphore, \"ux_host_class_gser_semaphore\", 1);\n \n-        }\n+        /* Check status.  */\n+        if (status != UX_SUCCESS)\n+            return(UX_SEMAPHORE_ERROR);\n     }\n-    \n+\n     /* Return completion status.  */\n     return(UX_SUCCESS);\n }"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_ioctl.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_gser_ioctl                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -76,8 +76,8 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_gser_ioctl(UX_HOST_CLASS_GSER *gser, ULONG interface_index, ULONG ioctl_function,\n@@ -295,7 +295,7 @@ ULONG                               value;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_gser_ioctl                          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -326,7 +326,7 @@ ULONG                               value;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_gser_ioctl(UX_HOST_CLASS_GSER *gser, ULONG interface_index, ULONG ioctl_function,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_read.c",
            "diff": "@@ -223,7 +223,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_gser_read                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -255,7 +255,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_gser_read(UX_HOST_CLASS_GSER *gser, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_reception_start.c",
            "diff": "@@ -141,7 +141,7 @@ ULONG           interface_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_gser_reception_start                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -172,7 +172,7 @@ ULONG           interface_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_gser_reception_start (UX_HOST_CLASS_GSER *gser, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_reception_stop.c",
            "diff": "@@ -117,7 +117,7 @@ ULONG           interface_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_gser_reception_stop                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -147,7 +147,7 @@ ULONG           interface_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_gser_reception_stop (UX_HOST_CLASS_GSER *gser, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_gser_write.c",
            "diff": "@@ -217,7 +217,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_gser_write                           PORTABLE C     */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -249,7 +249,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_gser_write(UX_HOST_CLASS_GSER *gser, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_client_register.c",
            "diff": "@@ -194,7 +194,7 @@ UINT                        client_name_length =  0;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_client_register                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -224,7 +224,7 @@ UINT                        client_name_length =  0;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_client_register(UCHAR *hid_client_name,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_field_decompress.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_hid_field_decompress                 PORTABLE C      */ \n-/*                                                           6.1          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -69,6 +69,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved usage handling,    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hid_field_decompress(UX_HOST_CLASS_HID_FIELD *hid_field, UCHAR *report_buffer, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report)\n@@ -130,8 +133,11 @@ ULONG       report_content;\n         if (hid_field -> ux_host_class_hid_field_value & UX_HOST_CLASS_HID_ITEM_VARIABLE)\n         {\n \n-            /* Take the usage directly from the usage array.  */\n-            field_usage =  *(hid_field -> ux_host_class_hid_field_usages + field_report_count);\n+            /* Take the usage directly from the usage array (if specified).  */\n+            if (hid_field -> ux_host_class_hid_field_usages)\n+                field_usage =  *(hid_field -> ux_host_class_hid_field_usages + field_report_count);\n+            else\n+                field_usage = 0;\n         }\n         else\n         {"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_idle_get.c",
            "diff": "@@ -215,7 +215,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_report_idle_get                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -246,7 +246,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_idle_get(UX_HOST_CLASS_HID *hid, USHORT *idle_time, USHORT report_id)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_idle_set.c",
            "diff": "@@ -155,7 +155,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_idle_set                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -186,7 +186,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_idle_set(UX_HOST_CLASS_HID *hid, USHORT idle_time, USHORT report_id)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_idle_set_run.c",
            "diff": "@@ -184,7 +184,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_idle_set_run                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -215,7 +215,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_host_class_hid_idle_set_run(UX_HOST_CLASS_HID *hid, USHORT idle_time, USHORT report_id)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_keyboard_deactivate.c",
            "diff": "@@ -36,7 +36,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_hid_keyboard_deactivate              PORTABLE C      */ \n-/*                                                           6.1.11       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -78,6 +78,9 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved unload sequence,   */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hid_keyboard_deactivate(UX_HOST_CLASS_HID_CLIENT_COMMAND *command)\n@@ -108,23 +111,11 @@ UINT                            status = UX_SUCCESS;\n \n     /* Terminate the thread.  */\n     _ux_utility_thread_delete(&keyboard_instance -> ux_host_class_hid_keyboard_thread);\n-\n-    /* Return to the pool the thread stack.  */\n-    _ux_utility_memory_free(keyboard_instance -> ux_host_class_hid_keyboard_thread_stack);\n #endif\n \n-    /* Free memory for key states.  */\n-    _ux_utility_memory_free(keyboard_instance -> ux_host_class_hid_keyboard_key_state);\n-\n     /* If trace is enabled, insert this event into the trace buffer.  */\n     UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_HID_KEYBOARD_DEACTIVATE, hid, keyboard_instance, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)\n \n-    /* Unload all the memory used by the keyboard client.  */\n-    _ux_utility_memory_free(keyboard_instance -> ux_host_class_hid_keyboard_usage_array);\n-\n-    /* Now free the instance memory.  */\n-    _ux_utility_memory_free(hid_client -> ux_host_class_hid_client_local_instance);\n-    \n     /* We may need to inform the application\n        if a function has been programmed in the system structure.  */\n     if (_ux_system_host -> ux_system_host_change_function != UX_NULL)\n@@ -133,7 +124,22 @@ UINT                            status = UX_SUCCESS;\n         /* Call system change function.  */\n         _ux_system_host ->  ux_system_host_change_function(UX_HID_CLIENT_REMOVAL, hid -> ux_host_class_hid_class, (VOID *) hid_client);\n     }\n-    \n+\n+#if !defined(UX_HOST_STANDALONE)\n+\n+    /* Return to the pool the thread stack.  */\n+    _ux_utility_memory_free(keyboard_instance -> ux_host_class_hid_keyboard_thread_stack);\n+#endif\n+\n+    /* Free memory for key states.  */\n+    _ux_utility_memory_free(keyboard_instance -> ux_host_class_hid_keyboard_key_state);\n+\n+    /* Unload all the memory used by the keyboard client.  */\n+    _ux_utility_memory_free(keyboard_instance -> ux_host_class_hid_keyboard_usage_array);\n+\n+    /* Now free the instance memory.  */\n+    _ux_utility_memory_free(hid_client -> ux_host_class_hid_client_local_instance);\n+\n     /* Return completion status.  */\n     return(status);    \n }"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_keyboard_ioctl.c",
            "diff": "@@ -129,7 +129,7 @@ UINT status = UX_SUCCESS;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_keyboard_ioctl                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -160,7 +160,7 @@ UINT status = UX_SUCCESS;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_host_class_hid_keyboard_ioctl(UX_HOST_CLASS_HID_KEYBOARD *keyboard_instance,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_keyboard_key_get.c",
            "diff": "@@ -128,7 +128,7 @@ UX_HOST_CLASS_HID   *hid;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_keyboard_key_get                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -159,7 +159,7 @@ UX_HOST_CLASS_HID   *hid;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_keyboard_key_get(UX_HOST_CLASS_HID_KEYBOARD *keyboard_instance, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_mouse_buttons_get.c",
            "diff": "@@ -105,7 +105,7 @@ UX_HOST_CLASS_HID   *hid;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_mouse_buttons_get               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -135,7 +135,7 @@ UX_HOST_CLASS_HID   *hid;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_mouse_buttons_get(UX_HOST_CLASS_HID_MOUSE *mouse_instance, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_mouse_deactivate.c",
            "diff": "@@ -36,7 +36,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_hid_mouse_deactivate                 PORTABLE C      */ \n-/*                                                           6.1          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,6 +70,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved unload sequence,   */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hid_mouse_deactivate(UX_HOST_CLASS_HID_CLIENT_COMMAND  *command)\n@@ -92,9 +95,6 @@ UINT                        status;\n     /* If trace is enabled, insert this event into the trace buffer.  */\n     UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_HID_MOUSE_DEACTIVATE, hid, hid_client -> ux_host_class_hid_client_local_instance, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)\n \n-    /* Now free the instance memory.  */\n-    _ux_utility_memory_free(hid_client -> ux_host_class_hid_client_local_instance);\n-\n     /* We may need to inform the application\n        if a function has been programmed in the system structure.  */\n     if (_ux_system_host -> ux_system_host_change_function != UX_NULL)\n@@ -104,6 +104,9 @@ UINT                        status;\n         _ux_system_host ->  ux_system_host_change_function(UX_HID_CLIENT_REMOVAL, hid -> ux_host_class_hid_class, (VOID *) hid_client);\n     }\n \n+    /* Now free the instance memory.  */\n+    _ux_utility_memory_free(hid_client -> ux_host_class_hid_client_local_instance);\n+\n     /* Return completion status.  */\n     return(status);    \n }"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_mouse_position_get.c",
            "diff": "@@ -111,7 +111,7 @@ UX_HOST_CLASS_HID   *hid;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_mouse_position_get              PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -142,7 +142,7 @@ UX_HOST_CLASS_HID   *hid;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_mouse_position_get(UX_HOST_CLASS_HID_MOUSE *mouse_instance, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_mouse_wheel_get.c",
            "diff": "@@ -105,7 +105,7 @@ UX_HOST_CLASS_HID   *hid;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_mouse_wheel_get                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -135,7 +135,7 @@ UX_HOST_CLASS_HID   *hid;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_mouse_wheel_get(UX_HOST_CLASS_HID_MOUSE *mouse_instance, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_periodic_report_start.c",
            "diff": "@@ -142,7 +142,7 @@ UX_TRANSFER     *transfer_request;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_periodic_report_start           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -173,7 +173,7 @@ UX_TRANSFER     *transfer_request;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_periodic_report_start(UX_HOST_CLASS_HID *hid)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_periodic_report_stop.c",
            "diff": "@@ -121,7 +121,7 @@ UINT  _ux_host_class_hid_periodic_report_stop(UX_HOST_CLASS_HID *hid)\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_periodic_report_stop            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -152,7 +152,7 @@ UINT  _ux_host_class_hid_periodic_report_stop(UX_HOST_CLASS_HID *hid)\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_periodic_report_stop(UX_HOST_CLASS_HID *hid)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_remote_control_deactivate.c",
            "diff": "@@ -36,7 +36,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_hid_remote_control_deactivate        PORTABLE C      */ \n-/*                                                           6.1          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,6 +70,9 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved unload sequence,   */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hid_remote_control_deactivate(UX_HOST_CLASS_HID_CLIENT_COMMAND *command)\n@@ -93,15 +96,9 @@ UINT                                status;\n     /* Get the remote control local instance.  */\n     remote_control_instance =  (UX_HOST_CLASS_HID_REMOTE_CONTROL *) hid_client -> ux_host_class_hid_client_local_instance;\n \n-    /* Unload all the memory used by the remote control client.  */\n-    _ux_utility_memory_free(remote_control_instance -> ux_host_class_hid_remote_control_usage_array);\n-\n     /* If trace is enabled, insert this event into the trace buffer.  */\n     UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_HID_REMOTE_CONTROL_DEACTIVATE, hid, remote_control_instance, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)\n \n-    /* Now free the instance memory.  */\n-    _ux_utility_memory_free(hid_client -> ux_host_class_hid_client_local_instance);\n-\n     /* We may need to inform the application\n        if a function has been programmed in the system structure.  */\n     if (_ux_system_host -> ux_system_host_change_function != UX_NULL)\n@@ -111,6 +108,12 @@ UINT                                status;\n         _ux_system_host ->  ux_system_host_change_function(UX_HID_CLIENT_REMOVAL, hid -> ux_host_class_hid_class, (VOID *) hid_client);\n     }\n \n+    /* Unload all the memory used by the remote control client.  */\n+    _ux_utility_memory_free(remote_control_instance -> ux_host_class_hid_remote_control_usage_array);\n+\n+    /* Now free the instance memory.  */\n+    _ux_utility_memory_free(hid_client -> ux_host_class_hid_client_local_instance);\n+\n     /* Return completion status.  */\n     return(status);    \n }"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_remote_control_usage_get.c",
            "diff": "@@ -130,7 +130,7 @@ UX_HOST_CLASS_HID   *hid;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_remote_control_usage_get        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -162,7 +162,7 @@ UX_HOST_CLASS_HID   *hid;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_remote_control_usage_get("
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_report_add.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_hid_report_add                       PORTABLE C      */ \n-/*                                                           6.1.8        */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -78,6 +78,10 @@\n /*  08-02-2021     Wen Wang                 Modified comment(s),          */\n /*                                            fixed spelling error,       */\n /*                                            resulting in version 6.1.8  */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            fixed field managing issue, */\n+/*                                            improved usage handling,    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hid_report_add(UX_HOST_CLASS_HID *hid, UCHAR *descriptor, UX_HOST_CLASS_HID_ITEM *item)\n@@ -193,13 +197,9 @@ ULONG                       current_field_address;\n     /* Take care of the bit padding if necessary.  */\n     if (new_hid_report -> ux_host_class_hid_report_bit_length & 7)\n         new_hid_report -> ux_host_class_hid_report_byte_length++;\n-    \n-    /* Get the number of field usage for this report, this value depends on the report type. If this is \n-       an array, we use the number of usages; if this a variable, we use the report count.  */\n-    if (hid_field_value & UX_HOST_CLASS_HID_ITEM_VARIABLE)\n-        hid_field_count =  hid_parser -> ux_host_class_hid_parser_global.ux_host_class_hid_global_item_report_count;\n-    else\n-        hid_field_count =  hid_parser -> ux_host_class_hid_parser_local.ux_host_class_hid_local_item_number_usage;\n+\n+    /* Get the number of fields for this report.  */\n+    hid_field_count =  hid_parser -> ux_host_class_hid_parser_global.ux_host_class_hid_global_item_report_count;\n \n     /* If the field count is null, this is only padding and there is no field to be allocated to the report.  */\n     if (hid_field_count == 0)       \n@@ -210,27 +210,6 @@ ULONG                       current_field_address;\n     if (new_hid_field == UX_NULL)\n         return(UX_MEMORY_INSUFFICIENT);\n \n-    /* Attach the new field to the report. The report may already contain a field, if so parse the chain \n-       until we reach the end of the chain.  */    \n-    new_hid_report -> ux_host_class_hid_report_number_item += hid_field_count;\n-    if (new_hid_report -> ux_host_class_hid_report_field == UX_NULL)\n-    {\n-\n-        /* This is the first field for the report.  */\n-        new_hid_report -> ux_host_class_hid_report_field =  new_hid_field;\n-    }\n-    else\n-    {    \n-\n-        /* We have previous HID fields, so search for the end of the chain.  */\n-        hid_field =  new_hid_report -> ux_host_class_hid_report_field;\n-        while(hid_field -> ux_host_class_hid_field_next_field != UX_NULL)\n-            hid_field =  hid_field -> ux_host_class_hid_field_next_field;\n-\n-        /* Attach the new field to the end of the chain.  */\n-        hid_field -> ux_host_class_hid_field_next_field =  new_hid_field;\n-    } \n-                          \n     /* From the parser structure, update the new field values. Start with logical values.  */\n     new_hid_field -> ux_host_class_hid_field_logical_min =  hid_parser -> ux_host_class_hid_parser_global.ux_host_class_hid_global_item_logical_min;\n     new_hid_field -> ux_host_class_hid_field_logical_max =  hid_parser -> ux_host_class_hid_parser_global.ux_host_class_hid_global_item_logical_max;\n@@ -269,14 +248,15 @@ ULONG                       current_field_address;\n         _ux_utility_memory_free(new_hid_field);\n         return(UX_MEMORY_INSUFFICIENT);\n     }\n-    \n+\n     /* We need some memory for the usages, but only for variable items; usage\n        values for array items can be calculated.  */\n-    if (hid_field_value & UX_HOST_CLASS_HID_ITEM_VARIABLE)\n+    if ((hid_field_value & UX_HOST_CLASS_HID_ITEM_VARIABLE) &&\n+        (hid_parser -> ux_host_class_hid_parser_local.ux_host_class_hid_local_item_number_usage > 0))\n     {\n \n         /* Allocate memory for the usages.  */\n-        new_hid_field -> ux_host_class_hid_field_usages =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, hid_field_count, 4);\n+        new_hid_field -> ux_host_class_hid_field_usages =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, hid_parser -> ux_host_class_hid_parser_local.ux_host_class_hid_local_item_number_usage, 4);\n         if (new_hid_field -> ux_host_class_hid_field_usages == UX_NULL)                   \n         {\n \n@@ -286,11 +266,32 @@ ULONG                       current_field_address;\n         }\n         \n         /* Copy the current usages in the field structure.  */\n-        _ux_utility_memory_copy(new_hid_field -> ux_host_class_hid_field_usages, hid_parser -> ux_host_class_hid_parser_local.ux_host_class_hid_local_item_usages, hid_field_count*4); /* Use case of memcpy is verified. */\n+        _ux_utility_memory_copy(new_hid_field -> ux_host_class_hid_field_usages, hid_parser -> ux_host_class_hid_parser_local.ux_host_class_hid_local_item_usages, hid_parser -> ux_host_class_hid_parser_local.ux_host_class_hid_local_item_number_usage * 4); /* Use case of memcpy is verified. */\n     }\n \n     /* Save the number of usages.  */\n-    new_hid_field -> ux_host_class_hid_field_number_usage =  hid_field_count;\n+    new_hid_field -> ux_host_class_hid_field_number_usage = hid_parser -> ux_host_class_hid_parser_local.ux_host_class_hid_local_item_number_usage;\n+\n+    /* Attach the new field to the report. The report may already contain a field, if so parse the chain \n+       until we reach the end of the chain.  */    \n+    new_hid_report -> ux_host_class_hid_report_number_item += hid_field_count;\n+    if (new_hid_report -> ux_host_class_hid_report_field == UX_NULL)\n+    {\n+\n+        /* This is the first field for the report.  */\n+        new_hid_report -> ux_host_class_hid_report_field =  new_hid_field;\n+    }\n+    else\n+    {\n+\n+        /* We have previous HID fields, so search for the end of the chain.  */\n+        hid_field =  new_hid_report -> ux_host_class_hid_report_field;\n+        while(hid_field -> ux_host_class_hid_field_next_field != UX_NULL)\n+            hid_field =  hid_field -> ux_host_class_hid_field_next_field;\n+\n+        /* Attach the new field to the end of the chain.  */\n+        hid_field -> ux_host_class_hid_field_next_field =  new_hid_field;\n+    }\n \n     /* Return successful completion.  */\n     return(UX_SUCCESS);"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_report_callback_register.c",
            "diff": "@@ -153,7 +153,7 @@ UX_HOST_CLASS_HID_REPORT         *hid_report;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_report_callback_register        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -185,7 +185,7 @@ UX_HOST_CLASS_HID_REPORT         *hid_report;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_report_callback_register(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_REPORT_CALLBACK *call_back)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_report_get.c",
            "diff": "@@ -277,7 +277,7 @@ UINT                            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_report_get                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -307,7 +307,7 @@ UINT                            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_report_get(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_report_id_get.c",
            "diff": "@@ -186,7 +186,7 @@ UX_HOST_CLASS_HID_REPORT    *next_hid_report;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_report_id_get                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -216,7 +216,7 @@ UX_HOST_CLASS_HID_REPORT    *next_hid_report;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_report_id_get(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_REPORT_GET_ID *report_id)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_report_set.c",
            "diff": "@@ -320,7 +320,7 @@ UINT                        status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_report_set                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -350,7 +350,7 @@ UINT                        status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_report_set(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hid_report_set_run.c",
            "diff": "@@ -252,7 +252,7 @@ UINT                        status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_hid_report_set_run                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -282,7 +282,7 @@ UINT                        status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_hid_report_set_run(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hub_deactivate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_hub_deactivate                       PORTABLE C      */ \n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,14 +84,17 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved deactivate flow,   */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hub_deactivate(UX_HOST_CLASS_COMMAND *command)\n {\n \n UX_HOST_CLASS_HUB       *hub;\n UX_HCD                  *hcd;\n-UX_TRANSFER             *transfer_request;\n+UX_TRANSFER             *transfer_request = UX_NULL;\n UINT                    port_index;\n \n \n@@ -105,7 +108,16 @@ UINT                    port_index;\n     hub -> ux_host_class_hub_state =  UX_HOST_CLASS_INSTANCE_SHUTDOWN;\n     \n     /* We need to abort transactions on the interrupt pipe.  */\n-    _ux_host_stack_endpoint_transfer_abort(hub -> ux_host_class_hub_interrupt_endpoint);\n+#if defined(UX_HOST_STANDALONE)\n+    if (hub -> ux_host_class_hub_interrupt_endpoint)\n+#endif\n+    {\n+        _ux_host_stack_endpoint_transfer_abort(hub -> ux_host_class_hub_interrupt_endpoint);\n+\n+        /* If the Hub class instance has a interrupt pipe with a data payload associated with it\n+           it must be freed.  First get the transfer request. */\n+        transfer_request =  &hub -> ux_host_class_hub_interrupt_endpoint -> ux_endpoint_transfer_request;\n+    }\n \n     /* Each device which is downstream on the HUB ports must be removed.  */\n     for (port_index = 1; port_index <= hub -> ux_host_class_hub_descriptor.bNbPorts; port_index++)\n@@ -120,20 +132,22 @@ UINT                    port_index;\n         }\n     }\n \n-    /* If the Hub class instance has a interrupt pipe with a data payload associated with it\n-       it must be freed.  First get the transfer request. */\n-    transfer_request =  &hub -> ux_host_class_hub_interrupt_endpoint -> ux_endpoint_transfer_request;\n \n     /* The enumeration thread needs to sleep a while to allow the application or the class that may be using\n        endpoints to exit properly.  */\n     _ux_host_thread_schedule_other(UX_THREAD_PRIORITY_ENUM); \n \n     /* Then de allocate the memory.  */\n+#if defined(UX_HOST_STANDALONE)\n+    if (transfer_request)\n+#endif\n     _ux_utility_memory_free(transfer_request -> ux_transfer_request_data_pointer);\n \n #if defined(UX_HOST_STANDALONE)\n     if (hub -> ux_host_class_hub_allocated)\n+    {\n         _ux_utility_memory_free(hub -> ux_host_class_hub_allocated);\n+    }\n #endif\n \n     /* Destroy the instance.  */\n@@ -154,10 +168,15 @@ UINT                    port_index;\n     /* If trace is enabled, register this object.  */\n     UX_TRACE_OBJECT_UNREGISTER(hub);\n \n+#if defined(UX_HOST_STANDALONE)\n+\n+    /* Unlink from device class instance.  */        \n+    hub -> ux_host_class_hub_device -> ux_device_class_instance =  (VOID *) hub;\n+#endif\n+\n     /* Free the memory block used by the class.  */\n     _ux_utility_memory_free(hub);\n \n     /* Return successful completion.  */\n     return(UX_SUCCESS);         \n }\n-"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hub_descriptor_get.c",
            "diff": "@@ -129,7 +129,7 @@ ULONG           port_index;\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_hub_descriptor_get                   PORTABLE C      */ \n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -174,9 +174,9 @@ ULONG           port_index;\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            added standalone support,   */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hub_descriptor_get(UX_HOST_CLASS_HUB *hub)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_hub_entry.c",
            "diff": "@@ -41,7 +41,7 @@ static inline UINT _ux_host_class_hub_activate_wait(UX_HOST_CLASS_COMMAND *comma\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_hub_entry                            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -84,9 +84,10 @@ static inline UINT _ux_host_class_hub_activate_wait(UX_HOST_CLASS_COMMAND *comma\n /*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed power on delay calc,  */\n /*                                            resulting in version 6.2.0  */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            fixed fail code sequence,   */\n /*                                            fixed compile warnings,     */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_hub_entry(UX_HOST_CLASS_COMMAND *command)\n@@ -410,17 +411,14 @@ ULONG                   current_ms, elapsed_ms;\n                 /* Unlink from device.  */\n                 device -> ux_device_class_instance = UX_NULL;\n \n-                /* Free hub.  */\n-                _ux_utility_memory_free(hub);\n-\n                 /* Error trap. */\n                 _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, hub -> ux_host_class_hub_run_status);\n \n                 /* If trace is enabled, insert this event into the trace buffer.  */\n                 UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, hub -> ux_host_class_hub_run_status, hub, 0, 0, UX_TRACE_ERRORS, 0, 0)\n \n-                /* To error state.  */\n-                hub -> ux_host_class_hub_enum_state = UX_STATE_ERROR;\n+                /* Free hub.  */\n+                _ux_utility_memory_free(hub);\n                 return(UX_STATE_ERROR);\n             }\n "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_command.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_command                         PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,8 +79,8 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            refined macros names,       */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_command(UX_HOST_CLASS_PIMA *pima, UX_HOST_CLASS_PIMA_COMMAND *command,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_deactivate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_pima_deactivate                      PORTABLE C      */ \n-/*                                                           6.1.10       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -59,8 +59,6 @@\n /*    _ux_host_stack_class_instance_destroy Destroy the class instance    */ \n /*    _ux_host_stack_endpoint_transfer_abort Abort endpoint transfer      */ \n /*    _ux_utility_memory_free               Free memory block             */ \n-/*    _ux_host_semaphore_get                Get protection semaphore      */ \n-/*    _ux_host_semaphore_delete             Delete protection semaphore   */ \n /*                                                                        */ \n /*  CALLED BY                                                             */ \n /*                                                                        */ \n@@ -76,6 +74,10 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            refined macros names,       */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            improved INT EP support,    */\n+/*                                            removed unused semaphore,   */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_deactivate(UX_HOST_CLASS_COMMAND *command)\n@@ -84,22 +86,14 @@ UINT  _ux_host_class_pima_deactivate(UX_HOST_CLASS_COMMAND *command)\n UX_HOST_CLASS_PIMA              *pima;\n UX_HOST_CLASS_PIMA_SESSION      *pima_session;\n UX_TRANSFER                     *transfer_request;\n-UINT                            status;\n-                            \n+\n \n     /* Get the instance for this class.  */\n     pima =  (UX_HOST_CLASS_PIMA *) command -> ux_host_class_command_instance;\n \n     /* The pima is being shut down.  */\n     pima -> ux_host_class_pima_state =  UX_HOST_CLASS_INSTANCE_SHUTDOWN;\n \n-    /* Protect thread reentry to this instance.  */\n-    status =  _ux_host_semaphore_get(&pima -> ux_host_class_pima_semaphore, UX_WAIT_FOREVER);\n-    if (status != UX_SUCCESS)\n-\n-        /* Return error. */\n-        return(status);\n-    \n     /* We come to this point when the device has been extracted. So there may have been a transaction\n        being scheduled. We make sure the transaction has been completed by the controller driver.\n        When the device is extracted, the controller tries multiple times the transaction and retires it\n@@ -122,12 +116,18 @@ UINT                            status;\n \n        \n     /* Then interrupt endpoint.  */\n-    transfer_request =  &pima -> ux_host_class_pima_interrupt_endpoint -> ux_endpoint_transfer_request;\n-    if (transfer_request -> ux_transfer_request_completion_code == UX_TRANSFER_STATUS_PENDING)\n-       \n-        /* We need to abort transactions on the Interrupt pipe.  */\n-        _ux_host_stack_endpoint_transfer_abort(pima -> ux_host_class_pima_interrupt_endpoint);\n-    \n+    if (pima -> ux_host_class_pima_interrupt_endpoint != UX_NULL)\n+    {\n+        transfer_request =  &pima -> ux_host_class_pima_interrupt_endpoint -> ux_endpoint_transfer_request;\n+        if (transfer_request -> ux_transfer_request_completion_code == UX_TRANSFER_STATUS_PENDING)\n+        \n+            /* We need to abort transactions on the Interrupt pipe.  */\n+            _ux_host_stack_endpoint_transfer_abort(pima -> ux_host_class_pima_interrupt_endpoint);\n+\n+        /* Free the interrupt transfer buffer.  */\n+        _ux_utility_memory_free(transfer_request -> ux_transfer_request_data_pointer);\n+    }\n+\n     /* The enumeration thread needs to sleep a while to allow the application or the class that may be using\n        endpoints to exit properly.  */\n     _ux_host_thread_schedule_other(UX_THREAD_PRIORITY_ENUM); \n@@ -164,9 +164,6 @@ UINT                            status;\n     /* Destroy the instance.  */\n     _ux_host_stack_class_instance_destroy(pima -> ux_host_class_pima_class, (VOID *) pima);\n \n-    /* Destroy the semaphore.  */\n-    _ux_host_semaphore_delete(&pima -> ux_host_class_pima_semaphore);\n-\n     /* Before we free the device resources, we need to inform the application\n         that the device is removed.  */\n     if (_ux_system_host -> ux_system_host_change_function != UX_NULL)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_device_info_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_device_info_get                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -79,9 +79,9 @@\n /*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed DeviceInfo extract,   */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_device_info_get(UX_HOST_CLASS_PIMA *pima,\n@@ -369,7 +369,7 @@ UINT                                 status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_device_info_get                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -399,7 +399,7 @@ UINT                                 status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_device_info_get(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_num_objects_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_num_objects_get                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,8 +70,8 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_num_objects_get(UX_HOST_CLASS_PIMA *pima,\n@@ -129,7 +129,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_num_objects_get                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -162,7 +162,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_num_objects_get(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_close.c",
            "diff": "@@ -228,7 +228,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_close                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -260,7 +260,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_close(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_delete.c",
            "diff": "@@ -121,7 +121,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_delete                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -152,7 +152,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_delete(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_get.c",
            "diff": "@@ -423,7 +423,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_get                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -459,7 +459,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_get(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_handles_get.c",
            "diff": "@@ -184,7 +184,7 @@ UINT                                 status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_handles_get             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -223,7 +223,7 @@ UINT                                 status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_handles_get(UX_HOST_CLASS_PIMA *pima, UX_HOST_CLASS_PIMA_SESSION *pima_session,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_info_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_object_info_get                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -76,10 +76,10 @@\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n /*                                            fixed allocated buffer      */\n /*                                            pointer checking issue,     */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_object_info_get(UX_HOST_CLASS_PIMA *pima,\n@@ -245,7 +245,7 @@ UINT                                 status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_info_get                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -277,7 +277,7 @@ UINT                                 status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_info_get(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_info_send.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_object_info_send                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -78,10 +78,10 @@\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun Xia                Modified comment(s),          */\n+/*  10-31-2023     Yajun Xia                Modified comment(s),          */\n /*                                            fixed allocated buffer      */\n /*                                            pointer checking issue,     */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_object_info_send(UX_HOST_CLASS_PIMA *pima,\n@@ -263,7 +263,7 @@ UINT                                 status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_info_send               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -296,7 +296,7 @@ UINT                                 status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_info_send(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_open.c",
            "diff": "@@ -109,7 +109,7 @@ UINT  _ux_host_class_pima_object_open(UX_HOST_CLASS_PIMA *pima,\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_open                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -141,7 +141,7 @@ UINT  _ux_host_class_pima_object_open(UX_HOST_CLASS_PIMA *pima,\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_open(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_send.c",
            "diff": "@@ -387,7 +387,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_send                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -423,7 +423,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_send(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_object_transfer_abort.c",
            "diff": "@@ -113,7 +113,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_object_transfer_abort          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -146,7 +146,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_object_transfer_abort(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_session_close.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_session_close                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -68,8 +68,8 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_session_close(UX_HOST_CLASS_PIMA *pima, UX_HOST_CLASS_PIMA_SESSION *pima_session)\n@@ -131,7 +131,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_session_close                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -161,7 +161,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_session_close(UX_HOST_CLASS_PIMA *pima, UX_HOST_CLASS_PIMA_SESSION *pima_session)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_session_open.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_session_open                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -70,8 +70,8 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_session_open(UX_HOST_CLASS_PIMA *pima, UX_HOST_CLASS_PIMA_SESSION *pima_session)\n@@ -136,7 +136,7 @@ ULONG                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_session_open                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -166,7 +166,7 @@ ULONG                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_session_open(UX_HOST_CLASS_PIMA *pima, UX_HOST_CLASS_PIMA_SESSION *pima_session)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_storage_ids_get.c",
            "diff": "@@ -168,7 +168,7 @@ ULONG                                nb_storage_ids;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_storage_ids_get                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -202,7 +202,7 @@ ULONG                                nb_storage_ids;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_storage_ids_get(UX_HOST_CLASS_PIMA *pima, UX_HOST_CLASS_PIMA_SESSION *pima_session,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_storage_info_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_pima_storage_info_get                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -76,8 +76,8 @@\n /*                                            verified memset and memcpy  */\n /*                                            cases,                      */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_pima_storage_info_get(UX_HOST_CLASS_PIMA *pima,\n@@ -167,7 +167,7 @@ ULONG                                unicode_string_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_storage_info_get               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -200,7 +200,7 @@ ULONG                                unicode_string_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_storage_info_get(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_pima_thumb_get.c",
            "diff": "@@ -383,7 +383,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_pima_thumb_get                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -419,7 +419,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_pima_thumb_get(UX_HOST_CLASS_PIMA *pima,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_printer_device_id_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_printer_device_id_get                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -83,9 +83,9 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_printer_device_id_get(UX_HOST_CLASS_PRINTER *printer, UCHAR *descriptor_buffer, ULONG length)\n@@ -169,7 +169,7 @@ UINT                 status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_printer_device_id_get               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -203,7 +203,7 @@ UINT                 status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_printer_device_id_get(UX_HOST_CLASS_PRINTER *printer, UCHAR *descriptor_buffer, ULONG length)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_printer_name_get.c",
            "diff": "@@ -125,7 +125,7 @@ UINT            printer_name_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_printer_name_get                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -176,9 +176,9 @@ UINT            printer_name_length;\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Modified comment(s),          */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            fixed compile warnings,     */\n-/*                                            resulting in version 6.x    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_printer_name_get(UX_HOST_CLASS_PRINTER *printer)\n@@ -247,7 +247,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_printer_name_get                    PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -276,7 +276,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_printer_name_get(UX_HOST_CLASS_PRINTER *printer)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_printer_read.c",
            "diff": "@@ -276,7 +276,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_printer_read                        PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -308,7 +308,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_printer_read (UX_HOST_CLASS_PRINTER *printer, UCHAR *data_pointer,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_printer_soft_reset.c",
            "diff": "@@ -177,7 +177,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_printer_soft_reset                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -206,7 +206,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT   _uxe_host_class_printer_soft_reset(UX_HOST_CLASS_PRINTER *printer)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_printer_status_get.c",
            "diff": "@@ -215,7 +215,7 @@ UCHAR *         printer_status_buffer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_printer_status_get                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -245,7 +245,7 @@ UCHAR *         printer_status_buffer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_printer_status_get(UX_HOST_CLASS_PRINTER *printer, ULONG *printer_status)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_printer_write.c",
            "diff": "@@ -259,7 +259,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_printer_write                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -291,7 +291,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_printer_write(UX_HOST_CLASS_PRINTER *printer, UCHAR * data_pointer,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_prolific_command.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_prolific_command                     PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -82,8 +82,8 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            refined macros names,       */\n /*                                            resulting in version 6.1.10 */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_prolific_command(UX_HOST_CLASS_PROLIFIC *prolific, ULONG command,\n@@ -130,7 +130,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_prolific_command                     PORTABLE C     */\n-/*                                                            6.x         */\n+/*                                                            6.3.0       */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -164,7 +164,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_prolific_command(UX_HOST_CLASS_PROLIFIC *prolific, ULONG command,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_prolific_configure.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_prolific_configure                   PORTABLE C      */ \n-/*                                                           6.1          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -74,6 +74,9 @@\n /*                                            optimized based on compile  */\n /*                                            definitions,                */\n /*                                            resulting in version 6.1    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            removed interface link,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_prolific_configure(UX_HOST_CLASS_PROLIFIC *prolific)\n@@ -141,20 +144,6 @@ UX_DEVICE               *parent_device;\n        the interrupt endpoint is hooked to it. */\n     status =  _ux_host_stack_configuration_interface_get(configuration, 0, 0, &prolific -> ux_host_class_prolific_interface);\n \n-    /* Check status for error.  */\n-    if (status == UX_SUCCESS)\n-    {\n-\n-        /* Store the instance in the interface container, this is for the USB stack\n-           when it needs to invoke the class.  */        \n-        prolific -> ux_host_class_prolific_interface -> ux_interface_class_instance =  (VOID *) prolific;\n-\n-        /* Store the class container in the interface.  The device has the correct class, duplicate it to the \n-           interface.  */\n-        prolific -> ux_host_class_prolific_interface -> ux_interface_class =  prolific -> ux_host_class_prolific_device -> ux_device_class ;\n-\n-    }\n-\n     /* Return completion status.  */\n     return(status);\n }"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_prolific_ioctl.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_prolific_ioctl                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -80,8 +80,8 @@\n /*  04-25-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            internal clean up,          */\n /*                                            resulting in version 6.1.11 */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_prolific_ioctl(UX_HOST_CLASS_PROLIFIC *prolific, ULONG ioctl_function,\n@@ -342,7 +342,7 @@ VOID                                (*callback_function) (struct UX_HOST_CLASS_P\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_prolific_ioctl                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -373,7 +373,7 @@ VOID                                (*callback_function) (struct UX_HOST_CLASS_P\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_prolific_ioctl(UX_HOST_CLASS_PROLIFIC *prolific, ULONG ioctl_function,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_prolific_read.c",
            "diff": "@@ -201,7 +201,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_prolific_read                       PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -233,7 +233,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_prolific_read (UX_HOST_CLASS_PROLIFIC *prolific, UCHAR *data_pointer, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_prolific_reception_start.c",
            "diff": "@@ -134,7 +134,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_prolific_reception_start            PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -165,7 +165,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_prolific_reception_start (UX_HOST_CLASS_PROLIFIC *prolific, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_prolific_reception_stop.c",
            "diff": "@@ -115,7 +115,7 @@ UINT  _ux_host_class_prolific_reception_stop (UX_HOST_CLASS_PROLIFIC *prolific,\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_prolific_reception_stop            PORTABLE C       */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -146,7 +146,7 @@ UINT  _ux_host_class_prolific_reception_stop (UX_HOST_CLASS_PROLIFIC *prolific,\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_prolific_reception_stop (UX_HOST_CLASS_PROLIFIC *prolific, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_prolific_write.c",
            "diff": "@@ -200,7 +200,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_prolific_write                      PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -232,7 +232,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_prolific_write(UX_HOST_CLASS_PROLIFIC *prolific, UCHAR *data_pointer, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_activate.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_storage_activate                     PORTABLE C      */\n-/*                                                           6.1.12       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -55,6 +55,9 @@\n /*  CALLS                                                                 */\n /*                                                                        */\n /*    _ux_host_class_storage_configure      Configure storage device      */\n+/*    _ux_host_class_storage_device_support_check                         */\n+/*                                          Check protocol support        */\n+/*    _ux_host_class_storage_endpoints_get  Get all endpoints             */\n /*    _ux_host_class_storage_device_initialize                            */\n /*                                          Initialize storage device     */\n /*    _ux_host_stack_class_instance_create  Create class instance         */\n@@ -81,6 +84,11 @@\n /*                                            fixed parameter/variable    */\n /*                                            names conflict C++ keyword, */\n /*                                            resulting in version 6.1.12 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            moved class/sub/protocol    */\n+/*                                            check and endpoints get     */\n+/*                                            into _activate function,    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_storage_activate(UX_HOST_CLASS_COMMAND *command)\n@@ -110,14 +118,6 @@ UINT                    status;\n     /* Store the device container into the storage class instance.  */\n     storage -> ux_host_class_storage_device =  interface_ptr -> ux_interface_configuration -> ux_configuration_device;\n \n-    /* Create this class instance.  */\n-    _ux_host_stack_class_instance_create(command -> ux_host_class_command_class_ptr, (VOID *) storage);\n-\n-    /* This instance of the device must also be stored in the interface container.  */\n-    interface_ptr -> ux_interface_class_instance =  (VOID *) storage;\n-\n-#if defined(UX_HOST_STANDALONE)\n-\n     /* Check class,sub class, protocol.  */\n     status =  _ux_host_class_storage_device_support_check(storage);\n     if (status != UX_SUCCESS)\n@@ -135,6 +135,14 @@ UINT                    status;\n         return(status);\n     }\n \n+    /* Create this class instance.  */\n+    _ux_host_stack_class_instance_create(command -> ux_host_class_command_class_ptr, (VOID *) storage);\n+\n+    /* This instance of the device must also be stored in the interface container.  */\n+    interface_ptr -> ux_interface_class_instance =  (VOID *) storage;\n+\n+#if defined(UX_HOST_STANDALONE)\n+\n     /* Activate storage class task function.  */\n     storage -> ux_host_class_storage_class -> ux_host_class_task_function = _ux_host_class_storage_tasks_run;\n "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_device_initialize.c",
            "diff": "@@ -36,7 +36,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_storage_device_initialize            PORTABLE C      */ \n-/*                                                           6.1.10       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -58,9 +58,6 @@\n /*  CALLS                                                                 */ \n /*                                                                        */ \n /*    _ux_host_class_storage_device_reset   Reset device                  */ \n-/*    _ux_host_class_storage_device_support_check                         */ \n-/*                                          Check protocol support        */ \n-/*    _ux_host_class_storage_endpoints_get  Get all endpoints             */ \n /*    _ux_host_class_storage_max_lun_get    Get maximum number of LUNs    */ \n /*    _ux_host_class_storage_media_characteristics_get                    */ \n /*                                          Get media characteristics     */ \n@@ -90,6 +87,11 @@\n /*                                            improved media insert/eject */\n /*                                            management without FX,      */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            moved class/sub/protocol    */\n+/*                                            check and endpoints get     */\n+/*                                            into _activate function,    */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_storage_device_initialize(UX_HOST_CLASS_STORAGE *storage)\n@@ -104,23 +106,12 @@ UINT                            inst_index;\n #endif\n \n \n-    /* Check the device protocol support and initialize the transport layer.  */\n-    status =  _ux_host_class_storage_device_support_check(storage);\n-    if (status != UX_SUCCESS)\n-        return(status);\n-    \n     /* Get the maximum number of LUN (Bulk Only device only, other device\n        will set the LUN number to 0).  */\n     status =  _ux_host_class_storage_max_lun_get(storage);\n     if (status != UX_SUCCESS)\n         return(status);\n \n-    /* Search all the endpoints for the storage interface (Bulk Out, Bulk in,\n-       and optional Interrupt endpoint).  */\n-    status =  _ux_host_class_storage_endpoints_get(storage);\n-    if (status != UX_SUCCESS)\n-        return(status);\n-\n     /* We need to wait for some device to settle. The INTUIX Flash disk is an example of\n        these device who fail the first Inquiry command if sent too quickly.  \n        The timing does not have to be precise so we use the thread sleep function.  "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_endpoints_get.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_storage_endpoints_get                PORTABLE C      */\n-/*                                                           6.1.10       */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -76,13 +76,17 @@\n /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            initial the timeout value,  */\n /*                                            resulting in version 6.1.10 */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            checked endpoint get status,*/\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_storage_endpoints_get(UX_HOST_CLASS_STORAGE *storage)\n {\n \n UINT            endpoint_index;\n UX_ENDPOINT     *endpoint;\n+UINT            status;\n \n \n     /* Search for the bulk OUT endpoint. It is attached to the interface container.  */\n@@ -91,7 +95,11 @@ UX_ENDPOINT     *endpoint;\n     {\n \n         /* Get an endpoint.  */\n-        _ux_host_stack_interface_endpoint_get(storage -> ux_host_class_storage_interface, endpoint_index, &endpoint);\n+        status = _ux_host_stack_interface_endpoint_get(storage -> ux_host_class_storage_interface, endpoint_index, &endpoint);\n+\n+        /* Check status.  */\n+        if (status != UX_SUCCESS)\n+            continue;\n \n         /* We have an endpoint. Check if endpoint is bulk and OUT.  */\n         if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_OUT) &&\n@@ -127,7 +135,11 @@ UX_ENDPOINT     *endpoint;\n     {\n \n         /* Get an endpoint.  */\n-        _ux_host_stack_interface_endpoint_get(storage -> ux_host_class_storage_interface, endpoint_index, &endpoint);\n+        status = _ux_host_stack_interface_endpoint_get(storage -> ux_host_class_storage_interface, endpoint_index, &endpoint);\n+\n+        /* Check status.  */\n+        if (status != UX_SUCCESS)\n+            continue;\n \n         /* We have an endpoint. Check if endpoint is bulk and IN.  */\n         if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&\n@@ -177,7 +189,11 @@ UX_ENDPOINT     *endpoint;\n         {\n \n             /* Get an endpoint.  */\n-            _ux_host_stack_interface_endpoint_get(storage -> ux_host_class_storage_interface, endpoint_index, &endpoint);\n+            status = _ux_host_stack_interface_endpoint_get(storage -> ux_host_class_storage_interface, endpoint_index, &endpoint);\n+\n+            /* Check status.  */\n+            if (status != UX_SUCCESS)\n+                continue;\n \n             /* Check if endpoint is Interrupt and IN.  */\n             if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_lock.c",
            "diff": "@@ -165,7 +165,7 @@ UX_DEVICE       *device;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_storage_lock                         PORTABLE C     */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -195,7 +195,7 @@ UX_DEVICE       *device;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT    _uxe_host_class_storage_lock(UX_HOST_CLASS_STORAGE *storage, ULONG wait)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_media_check.c",
            "diff": "@@ -90,7 +90,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_storage_media_check                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -119,7 +119,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_storage_media_check(UX_HOST_CLASS_STORAGE *storage)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_media_get.c",
            "diff": "@@ -141,7 +141,7 @@ UINT                            scan_index;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_storage_media_get                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -172,7 +172,7 @@ UINT                            scan_index;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT    _uxe_host_class_storage_media_get(UX_HOST_CLASS_STORAGE *storage,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_media_lock.c",
            "diff": "@@ -110,7 +110,7 @@ UINT                            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_storage_media_lock                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -141,7 +141,7 @@ UINT                            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT    _uxe_host_class_storage_media_lock(UX_HOST_CLASS_STORAGE_MEDIA *storage_media, ULONG wait)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_media_read.c",
            "diff": "@@ -200,7 +200,7 @@ UINT            media_retry;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_storage_media_read                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -232,7 +232,7 @@ UINT            media_retry;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_storage_media_read(UX_HOST_CLASS_STORAGE *storage, ULONG sector_start,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_storage_media_write.c",
            "diff": "@@ -177,7 +177,7 @@ UINT            media_retry;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_storage_media_write                  PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -209,7 +209,7 @@ UINT            media_retry;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_storage_media_write(UX_HOST_CLASS_STORAGE *storage, ULONG sector_start,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_swar_configure.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */ \n /*                                                                        */ \n /*    _ux_host_class_swar_configure                       PORTABLE C      */ \n-/*                                                           6.1          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -73,6 +73,9 @@\n /*                                            optimized based on compile  */\n /*                                            definitions,                */\n /*                                            resulting in version 6.1    */\n+/*  10-31-2023     Chaoqiong Xiao           Modified comment(s),          */\n+/*                                            removed interface link,     */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_swar_configure(UX_HOST_CLASS_SWAR *swar)\n@@ -138,19 +141,7 @@ UX_DEVICE               *parent_device;\n     /* If the operation went well, the swar default alternate setting for the swar interface is \n        active. We have to memorize the data interface since the bulk in/out endpoints are hooked to it. */\n     status =  _ux_host_stack_configuration_interface_get(configuration, UX_HOST_CLASS_SWAR_DATA_INTERFACE, 0, &swar -> ux_host_class_swar_interface);\n-    if (status == UX_SUCCESS)\n-    {\n-\n-        /* Store the instance in the interface container, this is for the USB stack\n-           when it needs to invoke the class.  */        \n-        swar -> ux_host_class_swar_interface -> ux_interface_class_instance =  (VOID *) swar;\n-\n-        /* Store the class container in the interface.  The device has the correct class, duplicate it to the \n-           interface.  */\n-        swar -> ux_host_class_swar_interface -> ux_interface_class =  swar -> ux_host_class_swar_device -> ux_device_class ;\n-    }\n \n     /* Return completion status.  */\n     return(status);\n }\n-"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_swar_ioctl.c",
            "diff": "@@ -35,7 +35,7 @@\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _ux_host_class_swar_ioctl                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -72,8 +72,8 @@\n /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */\n /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */\n /*                                            resulting in version 6.1    */\n-/*  xx-xx-xxxx     Yajun xia                Modified comment(s),          */\n-/*                                            resulting in version 6.x    */\n+/*  10-31-2023     Yajun xia                Modified comment(s),          */\n+/*                                            resulting in version 6.3.0  */\n /*                                                                        */\n /**************************************************************************/\n UINT  _ux_host_class_swar_ioctl(UX_HOST_CLASS_SWAR *swar, ULONG ioctl_function,\n@@ -135,7 +135,7 @@ UINT                                status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_swar_ioctl                          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -166,7 +166,7 @@ UINT                                status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_swar_ioctl(UX_HOST_CLASS_SWAR *swar, ULONG ioctl_function,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_swar_read.c",
            "diff": "@@ -218,7 +218,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_swar_read                           PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -250,7 +250,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_swar_read (UX_HOST_CLASS_SWAR *swar, UCHAR *data_pointer, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_swar_reception_start.c",
            "diff": "@@ -135,7 +135,7 @@ UINT            status;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_swar_reception_start                PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -166,7 +166,7 @@ UINT            status;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_swar_reception_start (UX_HOST_CLASS_SWAR *swar, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_swar_reception_stop.c",
            "diff": "@@ -116,7 +116,7 @@ UINT  _ux_host_class_swar_reception_stop (UX_HOST_CLASS_SWAR *swar,\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_swar_reception_stop                 PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -146,7 +146,7 @@ UINT  _ux_host_class_swar_reception_stop (UX_HOST_CLASS_SWAR *swar,\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_swar_reception_stop (UX_HOST_CLASS_SWAR *swar, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_swar_write.c",
            "diff": "@@ -219,7 +219,7 @@ ULONG           transfer_request_length;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_swar_write                          PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Chaoqiong Xiao, Microsoft Corporation                               */\n@@ -251,7 +251,7 @@ ULONG           transfer_request_length;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx     Chaoqiong Xiao           Initial Version 6.x           */\n+/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_swar_write(UX_HOST_CLASS_SWAR *swar, UCHAR *data_pointer, "
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_video_control_get.c",
            "diff": "@@ -223,7 +223,7 @@ UCHAR *         control_buffer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_video_control_get                   PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -254,7 +254,7 @@ UCHAR *         control_buffer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_video_control_get(UX_HOST_CLASS_VIDEO *video, UX_HOST_CLASS_VIDEO_CONTROL *video_control)"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_video_control_request.c",
            "diff": "@@ -212,7 +212,7 @@ UCHAR           interface_number;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_video_control_request               PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -251,7 +251,7 @@ UCHAR           interface_number;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT _uxe_host_class_video_control_request(UX_HOST_CLASS_VIDEO *video,"
        },
        {
            "filename": "common/usbx_host_classes/src/ux_host_class_video_control_value_get.c",
            "diff": "@@ -183,7 +183,7 @@ UCHAR *         control_buffer;\n /*  FUNCTION                                               RELEASE        */\n /*                                                                        */\n /*    _uxe_host_class_video_control_value_get             PORTABLE C      */\n-/*                                                           6.x          */\n+/*                                                           6.3.0        */\n /*  AUTHOR                                                                */\n /*                                                                        */\n /*    Yajun Xia, Microsoft Corporation                                    */\n@@ -216,7 +216,7 @@ UCHAR *         control_buffer;\n /*                                                                        */\n /*    DATE              NAME                      DESCRIPTION             */\n /*                                                                        */\n-/*  xx-xx-xxxx        Yajun xia             Initial Version 6.x           */\n+/*  10-31-2023        Yajun xia             Initial Version 6.3.0         */\n /*                                                                        */\n /**************************************************************************/\n UINT  _uxe_host_class_video_control_value_get(UX_HOST_CLASS_VIDEO *video, UX_HOST_CLASS_VIDEO_CONTROL *video_control)"
        }
    ],
    "commitTime": "2023-10-23 05:31:40"
}