{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "LOCAL",
        "attackComplexity": "HIGH",
        "privilegesRequired": "LOW",
        "userInteraction": "REQUIRED",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "NONE",
        "availability": "NONE"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "Red Hat",
            "cvssV3BaseScore": 5.5,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "LOCAL",
                "attackComplexity": "LOW",
                "privilegesRequired": "LOW",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "NONE",
                "availability": "NONE"
            },
            "severity": "medium"
        },
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 5.5,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "LOCAL",
                "attackComplexity": "LOW",
                "privilegesRequired": "LOW",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "NONE",
                "availability": "NONE"
            },
            "severity": "medium"
        }
    ],
    "cvssScore": 4.4,
    "disclosureTime": "2023-12-18 00:00:00",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.12298",
        "probability": "0.00045"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-UNMANAGED-OPENSSHPORTABLE-6132375",
    "identifiers": {
        "CVE": [
            "CVE-2023-51384"
        ],
        "CWE": [
            "CWE-304"
        ]
    },
    "language": "cpp",
    "malicious": false,
    "packageManager": "unmanaged",
    "publicationTime": "2023-12-20 13:00:09",
    "remediation": "Upgrade openssh-portable to version 9.6 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Missing Critical Step in Authentication",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Missing Critical Step in Authentication due to improper enforcement of security constraints on PKCS#11-hosted private keys. An attacker can bypass intended security restrictions by exploiting the issue where only the first key is constrained, even when multiple keys are returned from a PKCS#11 token. This is only exploitable if destination constraints are defined and multiple keys are returned from a PKCS#11 token. Note: Use of regular private keys, FIDO tokens and unconstrained keys are unaffected. "
    },
    "source_code": [
        {
            "filename": "ssh-agent.c",
            "diff": "@@ -1,4 +1,4 @@\n-/* $OpenBSD: ssh-agent.c,v 1.300 2023/07/19 13:56:33 djm Exp $ */\n+/* $OpenBSD: ssh-agent.c,v 1.301 2023/12/18 14:46:12 djm Exp $ */\n /*\n  * Author: Tatu Ylonen <ylo@cs.hut.fi>\n  * Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland\n@@ -247,6 +247,91 @@ free_dest_constraints(struct dest_constraint *dcs, size_t ndcs)\n \tfree(dcs);\n }\n \n+static void\n+dup_dest_constraint_hop(const struct dest_constraint_hop *dch,\n+    struct dest_constraint_hop *out)\n+{\n+\tu_int i;\n+\tint r;\n+\n+\tout->user = dch->user == NULL ? NULL : xstrdup(dch->user);\n+\tout->hostname = dch->hostname == NULL ? NULL : xstrdup(dch->hostname);\n+\tout->is_ca = dch->is_ca;\n+\tout->nkeys = dch->nkeys;\n+\tout->keys = out->nkeys == 0 ? NULL :\n+\t    xcalloc(out->nkeys, sizeof(*out->keys));\n+\tout->key_is_ca = out->nkeys == 0 ? NULL :\n+\t    xcalloc(out->nkeys, sizeof(*out->key_is_ca));\n+\tfor (i = 0; i < dch->nkeys; i++) {\n+\t\tif (dch->keys[i] != NULL &&\n+\t\t    (r = sshkey_from_private(dch->keys[i],\n+\t\t    &(out->keys[i]))) != 0)\n+\t\t\tfatal_fr(r, \"copy key\");\n+\t\tout->key_is_ca[i] = dch->key_is_ca[i];\n+\t}\n+}\n+\n+static struct dest_constraint *\n+dup_dest_constraints(const struct dest_constraint *dcs, size_t ndcs)\n+{\n+\tsize_t i;\n+\tstruct dest_constraint *ret;\n+\n+\tif (ndcs == 0)\n+\t\treturn NULL;\n+\tret = xcalloc(ndcs, sizeof(*ret));\n+\tfor (i = 0; i < ndcs; i++) {\n+\t\tdup_dest_constraint_hop(&dcs[i].from, &ret[i].from);\n+\t\tdup_dest_constraint_hop(&dcs[i].to, &ret[i].to);\n+\t}\n+\treturn ret;\n+}\n+\n+#ifdef DEBUG_CONSTRAINTS\n+static void\n+dump_dest_constraint_hop(const struct dest_constraint_hop *dch)\n+{\n+\tu_int i;\n+\tchar *fp;\n+\n+\tdebug_f(\"user %s hostname %s is_ca %d nkeys %u\",\n+\t    dch->user == NULL ? \"(null)\" : dch->user,\n+\t    dch->hostname == NULL ? \"(null)\" : dch->hostname,\n+\t    dch->is_ca, dch->nkeys);\n+\tfor (i = 0; i < dch->nkeys; i++) {\n+\t\tfp = NULL;\n+\t\tif (dch->keys[i] != NULL &&\n+\t\t    (fp = sshkey_fingerprint(dch->keys[i],\n+\t\t    SSH_FP_HASH_DEFAULT, SSH_FP_DEFAULT)) == NULL)\n+\t\t\tfatal_f(\"fingerprint failed\");\n+\t\tdebug_f(\"key %u/%u: %s%s%s key_is_ca %d\", i, dch->nkeys,\n+\t\t    dch->keys[i] == NULL ? \"\" : sshkey_ssh_name(dch->keys[i]),\n+\t\t    dch->keys[i] == NULL ? \"\" : \" \",\n+\t\t    dch->keys[i] == NULL ? \"none\" : fp,\n+\t\t    dch->key_is_ca[i]);\n+\t\tfree(fp);\n+\t}\n+}\n+#endif /* DEBUG_CONSTRAINTS */\n+\n+static void\n+dump_dest_constraints(const char *context,\n+    const struct dest_constraint *dcs, size_t ndcs)\n+{\n+#ifdef DEBUG_CONSTRAINTS\n+\tsize_t i;\n+\n+\tdebug_f(\"%s: %zu constraints\", context, ndcs);\n+\tfor (i = 0; i < ndcs; i++) {\n+\t\tdebug_f(\"constraint %zu / %zu: from: \", i, ndcs);\n+\t\tdump_dest_constraint_hop(&dcs[i].from);\n+\t\tdebug_f(\"constraint %zu / %zu: to: \", i, ndcs);\n+\t\tdump_dest_constraint_hop(&dcs[i].to);\n+\t}\n+\tdebug_f(\"done for %s\", context);\n+#endif /* DEBUG_CONSTRAINTS */\n+}\n+\n static void\n free_identity(Identity *id)\n {\n@@ -518,13 +603,22 @@ process_request_identities(SocketEntry *e)\n \tIdentity *id;\n \tstruct sshbuf *msg, *keys;\n \tint r;\n-\tu_int nentries = 0;\n+\tu_int i = 0, nentries = 0;\n+\tchar *fp;\n \n \tdebug2_f(\"entering\");\n \n \tif ((msg = sshbuf_new()) == NULL || (keys = sshbuf_new()) == NULL)\n \t\tfatal_f(\"sshbuf_new failed\");\n \tTAILQ_FOREACH(id, &idtab->idlist, next) {\n+\t\tif ((fp = sshkey_fingerprint(id->key, SSH_FP_HASH_DEFAULT,\n+\t\t    SSH_FP_DEFAULT)) == NULL)\n+\t\t\tfatal_f(\"fingerprint failed\");\n+\t\tdebug_f(\"key %u / %u: %s %s\", i++, idtab->nentries,\n+\t\t    sshkey_ssh_name(id->key), fp);\n+\t\tdump_dest_constraints(__func__,\n+\t\t    id->dest_constraints, id->ndest_constraints);\n+\t\tfree(fp);\n \t\t/* identity not visible, don't include in response */\n \t\tif (identity_permitted(id, e, NULL, NULL, NULL) != 0)\n \t\t\tcontinue;\n@@ -1224,6 +1318,7 @@ process_add_identity(SocketEntry *e)\n \t\tsshbuf_reset(e->request);\n \t\tgoto out;\n \t}\n+\tdump_dest_constraints(__func__, dest_constraints, ndest_constraints);\n \n \tif (sk_provider != NULL) {\n \t\tif (!sshkey_is_sk(k)) {\n@@ -1403,6 +1498,7 @@ process_add_smartcard_key(SocketEntry *e)\n \t\terror_f(\"failed to parse constraints\");\n \t\tgoto send;\n \t}\n+\tdump_dest_constraints(__func__, dest_constraints, ndest_constraints);\n \tif (e->nsession_ids != 0 && !remote_add_provider) {\n \t\tverbose(\"failed PKCS#11 add of \\\"%.100s\\\": remote addition of \"\n \t\t    \"providers is disabled\", provider);\n@@ -1438,10 +1534,9 @@ process_add_smartcard_key(SocketEntry *e)\n \t\t\t}\n \t\t\tid->death = death;\n \t\t\tid->confirm = confirm;\n-\t\t\tid->dest_constraints = dest_constraints;\n+\t\t\tid->dest_constraints = dup_dest_constraints(\n+\t\t\t    dest_constraints, ndest_constraints);\n \t\t\tid->ndest_constraints = ndest_constraints;\n-\t\t\tdest_constraints = NULL; /* transferred */\n-\t\t\tndest_constraints = 0;\n \t\t\tTAILQ_INSERT_TAIL(&idtab->idlist, id, next);\n \t\t\tidtab->nentries++;\n \t\t\tsuccess = 1;"
        }
    ],
    "commitTime": "2023-12-18 14:51:46"
}