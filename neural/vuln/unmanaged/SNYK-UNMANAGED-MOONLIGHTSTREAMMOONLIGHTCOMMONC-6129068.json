{
    "CVSSv3": {
        "CVSS": "3.1",
        "E": "P",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "REQUIRED",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "HIGH"
    },
    "credit": [
        "Keane"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 8.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "REQUIRED",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "high"
        }
    ],
    "cvssScore": 8.8,
    "disclosureTime": "2023-12-14 17:45:56",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.42816",
        "probability": "0.00106"
    },
    "exploitMaturity": "Proof of Concept",
    "id": "SNYK-UNMANAGED-MOONLIGHTSTREAMMOONLIGHTCOMMONC-6129068",
    "identifiers": {
        "CVE": [
            "CVE-2023-42799"
        ],
        "CWE": [
            "CWE-120"
        ]
    },
    "language": "cpp",
    "malicious": false,
    "packageManager": "unmanaged",
    "publicationTime": "2023-12-15 14:49:33",
    "remediation": "A fix was pushed into the master branch but not yet published. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Classic Buffer Overflow",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Classic Buffer Overflow via the parseUrlAddrFromRtspUrlString function in RtspConnection.c file. A malicious game streaming server could exploit a buffer overflow vulnerability to crash a moonlight client, or achieve remote code execution (RCE) on the client. "
    },
    "source_code": [
        {
            "filename": "src/RtspConnection.c",
            "diff": "@@ -657,7 +657,7 @@ static int parseOpusConfigurations(PRTSP_MESSAGE response) {\n     return 0;\n }\n \n-static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* destination) {\n+static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* destination, size_t destinationLength) {\n     char* rtspUrlScratchBuffer;\n     char* portSeparator;\n     char* v6EscapeEndChar;\n@@ -701,7 +701,8 @@ static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* desti\n         *urlPathSeparator = 0;\n     }\n \n-    strcpy(destination, rtspUrlScratchBuffer + prefixLen);\n+    PltSafeStrcpy(destination, destinationLength, rtspUrlScratchBuffer + prefixLen);\n+    destination[destinationLength - 1] = '\\0';\n \n     free(rtspUrlScratchBuffer);\n     return true;\n@@ -774,7 +775,7 @@ int performRtspHandshake(PSERVER_INFORMATION serverInfo) {\n             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&\n             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {\n         // If we have an RTSP URL string and it was successfully parsed, use that string\n-        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr)) {\n+        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {\n             strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);\n         }\n         else {\n@@ -784,12 +785,12 @@ int performRtspHandshake(PSERVER_INFORMATION serverInfo) {\n             // audio since it only does that for local streaming normally. We can avoid this limitation,\n             // but only if the caller gave us the RTSP session URL that it received from the host during launch.\n             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));\n-            sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n+\t\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n         }\n     }\n     else {\n         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");\n-        sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n+\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n     }\n \n     switch (AppVersionQuad[0]) {"
        }
    ],
    "commitTime": "2023-10-07 02:14:30"
}