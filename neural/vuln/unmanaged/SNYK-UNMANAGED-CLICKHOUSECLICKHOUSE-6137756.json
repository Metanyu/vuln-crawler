{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "LOW",
        "integrity": "LOW",
        "availability": "HIGH"
    },
    "credit": [
        "malacupa"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "critical"
        }
    ],
    "cvssScore": 7,
    "disclosureTime": "2023-12-20 17:45:56",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.23981",
        "probability": "0.00061"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-UNMANAGED-CLICKHOUSECLICKHOUSE-6137756",
    "identifiers": {
        "CVE": [
            "CVE-2023-47118"
        ],
        "CWE": [
            "CWE-122"
        ]
    },
    "language": "cpp",
    "malicious": false,
    "packageManager": "unmanaged",
    "publicationTime": "2023-12-21 20:57:40",
    "remediation": "Upgrade clickhouse/clickhouse to version 23.3.16.7, 23.8.6.16, 23.9.4.11, 23.10.2.13 or higher. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Heap-based Buffer Overflow",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Heap-based Buffer Overflow via the decompression logic of the T64 codec on the native interface. An attacker can cause a crash by sending malicious data to port 9000/tcp. This attack does not require authentication. However, when exploiting via the HTTP protocol, valid credentials are needed as HTTP authentication occurs first. "
    },
    "source_code": [
        {
            "filename": "src/Compression/CompressionCodecT64.cpp",
            "diff": "@@ -66,6 +66,7 @@ namespace ErrorCodes\n     extern const int ILLEGAL_SYNTAX_FOR_CODEC_TYPE;\n     extern const int ILLEGAL_CODEC_PARAMETER;\n     extern const int LOGICAL_ERROR;\n+    extern const int INCORRECT_DATA;\n }\n \n namespace\n@@ -145,7 +146,7 @@ TypeIndex deserializeTypeId(uint8_t serialized_type_id)\n         case MagicNumber::IPv4:         return TypeIndex::IPv4;\n     }\n \n-    throw Exception(ErrorCodes::LOGICAL_ERROR, \"Bad magic number in T64 codec: {}\", static_cast<UInt32>(serialized_type_id));\n+    throw Exception(ErrorCodes::INCORRECT_DATA, \"Bad magic number in T64 codec: {}\", static_cast<UInt32>(serialized_type_id));\n }\n \n \n@@ -378,13 +379,6 @@ void transpose(const T * src, char * dst, UInt32 num_bits, UInt32 tail = 64)\n \n /// UInt64[N] transposed matrix -> UIntX[64]\n template <typename T, bool full = false>\n-#if defined(__s390x__)\n-\n-/* Compiler Bug for S390x :- https://github.com/llvm/llvm-project/issues/62572\n- * Please remove this after the fix is backported\n- */\n-        __attribute__((noinline))\n-#endif\n void reverseTranspose(const char * src, T * buf, UInt32 num_bits, UInt32 tail = 64)\n {\n     UInt64 matrix[64] = {};\n@@ -544,12 +538,13 @@ void decompressData(const char * src, UInt32 bytes_size, char * dst, UInt32 unco\n     static constexpr const UInt32 header_size = 2 * sizeof(UInt64);\n \n     if (bytes_size < header_size)\n-        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress, data size {} is less then T64 header\",\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress, data size ({}) is less than the size of T64 header\",\n                         bytes_size);\n \n     if (uncompressed_size % sizeof(T))\n-        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress, unexpected uncompressed size {}\",\n-                        uncompressed_size);\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress, unexpected uncompressed size ({})\"\n+                        \" isn't a multiple of the data type size ({})\",\n+                        uncompressed_size, sizeof(T));\n \n     UInt64 num_elements = uncompressed_size / sizeof(T);\n     MinMaxType min;\n@@ -576,14 +571,20 @@ void decompressData(const char * src, UInt32 bytes_size, char * dst, UInt32 unco\n     UInt32 dst_shift = sizeof(T) * matrix_size;\n \n     if (!bytes_size || bytes_size % src_shift)\n-        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress, data size {} is not multiplier of {}\",\n-                        bytes_size, toString(src_shift));\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress, data size ({}) is not a multiplier of {}\",\n+                        bytes_size, src_shift);\n \n     UInt32 num_full = bytes_size / src_shift;\n     UInt32 tail = num_elements % matrix_size;\n     if (tail)\n         --num_full;\n \n+    UInt64 expected = static_cast<UInt64>(num_full) * matrix_size + tail;    /// UInt64 to avoid overflow.\n+    if (expected != num_elements)\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress, the number of elements in the compressed data ({})\"\n+                        \" is not equal to the expected number of elements in the decompressed data ({})\",\n+                        expected, num_elements);\n+\n     T upper_min = 0;\n     T upper_max [[maybe_unused]] = 0;\n     T sign_bit [[maybe_unused]] = 0;"
        },
        {
            "filename": "tests/queries/0_stateless/02914_t64_buffer_overflow.reference",
            "diff": "@@ -0,0 +1 @@\n+Exc"
        },
        {
            "filename": "tests/queries/0_stateless/02914_t64_buffer_overflow.sh",
            "diff": "@@ -0,0 +1,8 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+echo -ne 'checksumchecksum\\x93\\x1A\\x04\\x00\\x00\\x08\\x00\\x00\\x00\\04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' |\n+    ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&decompress=1&http_native_compression_disable_checksumming_on_decompress=1\" --data-binary @- 2>&1 | grep -oF 'Exc'"
        }
    ],
    "commitTime": "2023-11-08 05:04:00"
}