{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "LOW",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "NONE",
        "integrity": "NONE",
        "availability": "LOW"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 8.1,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "LOW",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "NONE",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "high"
        }
    ],
    "cvssScore": 4.3,
    "disclosureTime": "2023-12-13 15:30:57",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.06914",
        "probability": "0.00043"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-JAVA-ORGSILVERPEASCORE-6125710",
    "identifiers": {
        "CVE": [
            "CVE-2023-47320"
        ],
        "CWE": [
            "CWE-284"
        ]
    },
    "language": "java",
    "malicious": false,
    "packageManager": "maven",
    "publicationTime": "2023-12-14 14:47:54",
    "remediation": "Upgrade org.silverpeas.core:silverpeas-core-web to version 6.3.1 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Improper Access Control",
    "vulnDescription": {
        "Overview": "org.silverpeas.core:silverpeas-core-web is a WEB platform that improves the collaboration between the actors of a company or organization. Affected versions of this package are vulnerable to Improper Access Control due to improper enforcement of access restrictions. An attacker with low privileges can put the application into \"Maintenance Mode\", rendering it unavailable to all users. "
    },
    "source_code": [
        {
            "filename": "core-library/src/main/java/org/silverpeas/core/admin/service/cache/AdminCache.java",
            "diff": "@@ -379,6 +379,7 @@ public void opAddSpace(final SpaceInst theSpace) {\n               .ifPresent(subSpaces::remove);\n           subSpaces.add(theSpace);\n           f.setSubSpaces(subSpaces);\n+          resetManageableSpaceIds();\n         });\n       }\n     }"
        },
        {
            "filename": "core-war/src/main/java/com/sun/portal/portletcontainer/driver/admin/PortletDeployerServlet.java",
            "diff": "@@ -23,18 +23,19 @@\n  */\n package com.sun.portal.portletcontainer.driver.admin;\n \n-import org.silverpeas.web.portlets.portal.DesktopMessages;\n-import org.silverpeas.web.portlets.portal.PropertiesContext;\n-import org.silverpeas.core.admin.user.model.UserDetail;\n import com.sun.portal.portletcontainer.admin.PortletRegistryHelper;\n import com.sun.portal.portletcontainer.admin.deployment.WebAppDeployerException;\n import com.sun.portal.portletcontainer.context.registry.PortletRegistryException;\n+import org.silverpeas.core.admin.user.model.User;\n+import org.silverpeas.core.admin.user.model.UserDetail;\n+import org.silverpeas.core.web.mvc.webcomponent.SilverpeasAuthenticatedHttpServlet;\n+import org.silverpeas.web.portlets.portal.DesktopMessages;\n+import org.silverpeas.web.portlets.portal.PropertiesContext;\n \n import javax.servlet.RequestDispatcher;\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n@@ -48,7 +49,7 @@\n  * AdminServlet is a router for admin related requests like deploying/undeploying of portlets and\n  * creating of portlet windows.\n  */\n-public class PortletDeployerServlet extends HttpServlet {\n+public class PortletDeployerServlet extends SilverpeasAuthenticatedHttpServlet {\n   private static final long serialVersionUID = 7041695476364573175L;\n \n   private static final Logger logger = Logger.getLogger(PortletDeployerServlet.class\n@@ -131,6 +132,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n \n   public void doGetPost(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n+    if (!User.getCurrentRequester().isAccessAdmin()) {\n+      throwHttpForbiddenError();\n+    }\n \n     String language = getLanguage(request);\n "
        },
        {
            "filename": "core-war/src/main/java/com/sun/portal/portletcontainer/driver/admin/UploadServlet.java",
            "diff": "@@ -23,8 +23,6 @@\n  */\n package com.sun.portal.portletcontainer.driver.admin;\n \n-import org.silverpeas.web.portlets.portal.DesktopMessages;\n-import org.silverpeas.core.admin.user.model.UserDetail;\n import com.sun.portal.portletcontainer.admin.PortletRegistryHelper;\n import com.sun.portal.portletcontainer.admin.deployment.WebAppDeployerException;\n import com.sun.portal.portletcontainer.context.registry.PortletRegistryException;\n@@ -34,12 +32,15 @@\n import org.apache.commons.fileupload.disk.SilverpeasDiskFileItemFactory;\n import org.apache.commons.fileupload.servlet.ServletFileUpload;\n import org.apache.commons.io.FilenameUtils;\n+import org.silverpeas.core.admin.user.model.User;\n+import org.silverpeas.core.admin.user.model.UserDetail;\n+import org.silverpeas.core.web.mvc.webcomponent.SilverpeasAuthenticatedHttpServlet;\n+import org.silverpeas.web.portlets.portal.DesktopMessages;\n \n import javax.servlet.RequestDispatcher;\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n@@ -53,7 +54,7 @@\n /**\n  * UploadServlet is responsible for uploading the portlet war file\n  */\n-public class UploadServlet extends HttpServlet {\n+public class UploadServlet extends SilverpeasAuthenticatedHttpServlet {\n \n   private static final long serialVersionUID = 6041525805480787611L;\n \n@@ -76,6 +77,9 @@ public void init(ServletConfig config) throws ServletException {\n   @Override\n   public void doPost(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n+    if (!User.getCurrentRequester().isAccessAdmin()) {\n+      throwHttpForbiddenError();\n+    }\n \n     // Initialize DesktopMessages' Resource Bundle\n     DesktopMessages.init(getLanguage(request));"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/importexport/control/ImportExportSessionController.java",
            "diff": "@@ -32,7 +32,7 @@\n import org.silverpeas.core.util.MultiSilverpeasBundle;\n import org.silverpeas.core.util.ServiceProvider;\n import org.silverpeas.core.util.WAAttributeValuePair;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n \n@@ -41,7 +41,8 @@\n /**\n  * @author neysseri\n  */\n-public class ImportExportSessionController extends AbstractComponentSessionController {\n+public class ImportExportSessionController extends AbstractAdminComponentSessionController {\n+  private static final long serialVersionUID = -6252741698097859228L;\n \n   ExportTask exportTask = null;\n   Exception errorOccured = null;\n@@ -56,6 +57,11 @@ public ImportExportSessionController(MainSessionController mainSessionCtrl,\n     super(mainSessionCtrl, componentContext, multilangBundle, iconBundle);\n   }\n \n+  @Override\n+  public boolean isAccessGranted() {\n+    return true;\n+  }\n+\n   public ImportReport processImport(String xmlFileName,\n       MultiSilverpeasBundle resource) throws ImportExportException {\n     ImportReport importReport = importExport.processImport(getUserDetail(), xmlFileName);"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/importexport/servlets/ImportExportRequestRouter.java",
            "diff": "@@ -23,23 +23,20 @@\n  */\n package org.silverpeas.web.importexport.servlets;\n \n+import org.apache.commons.fileupload.FileItem;\n import org.silverpeas.core.importexport.report.ExportPDFReport;\n import org.silverpeas.core.importexport.report.ExportReport;\n import org.silverpeas.core.importexport.report.ImportReport;\n-import org.silverpeas.web.importexport.control.ImportExportSessionController;\n-\n+import org.silverpeas.core.node.model.NodePK;\n+import org.silverpeas.core.util.MultiSilverpeasBundle;\n+import org.silverpeas.core.util.WAAttributeValuePair;\n+import org.silverpeas.core.util.file.FileRepositoryManager;\n import org.silverpeas.core.util.file.FileUploadUtil;\n-\n+import org.silverpeas.core.web.http.HttpRequest;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n-import org.silverpeas.core.util.MultiSilverpeasBundle;\n-import org.silverpeas.core.util.file.FileRepositoryManager;\n-import org.silverpeas.core.util.WAAttributeValuePair;\n-import org.silverpeas.core.node.model.NodePK;\n-\n-import org.apache.commons.fileupload.FileItem;\n-import org.silverpeas.core.web.http.HttpRequest;\n+import org.silverpeas.web.importexport.control.ImportExportSessionController;\n \n import java.io.File;\n import java.util.List;\n@@ -83,8 +80,10 @@ public String getDestination(String function, ImportExportSessionController impo\n     String destination = \"\";\n     try {\n       if (function.startsWith(\"Main\")) {\n+        importExportSC.checkAdminAccessOnly();\n         destination = \"/importExportPeas/jsp/welcome.jsp\";\n       } else if (\"Import\".equals(function)) {\n+        importExportSC.checkAdminAccessOnly();\n         File file = null;\n         List<FileItem> items = request.getFileItems();\n         for (FileItem item : items) {"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
            "diff": "@@ -88,7 +88,7 @@\n import org.silverpeas.core.util.logging.SilverLogger;\n import org.silverpeas.core.web.authentication.LoginServlet;\n import org.silverpeas.core.web.http.HttpRequest;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.web.mvc.webcomponent.WebMessager;\n@@ -116,14 +116,15 @@\n import static org.silverpeas.core.admin.domain.DomainDriverManagerProvider.getCurrentDomainDriverManager;\n import static org.silverpeas.core.personalization.service.PersonalizationServiceProvider.getPersonalizationService;\n import static org.silverpeas.core.util.ResourceLocator.getSettingBundle;\n+import static org.silverpeas.core.util.StringUtil.defaultStringIfNotDefined;\n import static org.silverpeas.core.util.StringUtil.isDefined;\n \n /**\n  * Class declaration\n  *\n  * @author\n  */\n-public class JobDomainPeasSessionController extends AbstractComponentSessionController {\n+public class JobDomainPeasSessionController extends AbstractAdminComponentSessionController {\n \n   public static final String REPLACE_RIGHTS = \"1\";\n   public static final String ADD_RIGHTS = \"2\";\n@@ -179,6 +180,15 @@ public JobDomainPeasSessionController(MainSessionController mainSessionCtrl,\n         .getString(\"customersTemplatePath\"));\n   }\n \n+  /**\n+   * Dedicated for tests\n+   */\n+  protected JobDomainPeasSessionController(final MainSessionController controller,\n+      final ComponentContext context, final String localizedMessagesBundleName,\n+      final String iconFileName, final String settingsFileName) {\n+    super(controller, context, localizedMessagesBundleName, iconFileName, settingsFileName);\n+  }\n+\n   public int getMinLengthLogin() {\n     return JobDomainSettings.m_MinLengthLogin;\n   }\n@@ -187,11 +197,95 @@ public boolean isUserAddingAllowedForGroupManager() {\n     return JobDomainSettings.m_UserAddingAllowedForGroupManagers;\n   }\n \n+  @Override\n   public boolean isAccessGranted() {\n     return getUserDetail().isAccessAdmin() || getUserDetail().isAccessDomainManager() ||\n         isOnlySpaceManager() || !getUserManageableGroupIds().isEmpty();\n   }\n \n+  public void checkDomainAccessGranted(final String domainId) {\n+    checkDomainAccessGranted(domainId, true);\n+  }\n+\n+  public void checkCurrentDomainAccessGranted(final boolean readOnly) {\n+    final String domainId = Optional.ofNullable(getTargetDomain()).map(Domain::getId).orElse(null);\n+    checkDomainAccessGranted(domainId, readOnly);\n+  }\n+\n+  void checkDomainAccessGranted(final String domainId, final boolean readOnly) {\n+    checkAccessGranted(domainId, new DomainAccessContext(), readOnly);\n+  }\n+\n+  public void checkUserAccessGranted(final String userId, final boolean readOnly) {\n+    final User user = getUserDetail(userId);\n+    if (user == null || getTargetDomain() == null ||\n+        !getTargetDomain().getId().equals(user.getDomainId()) ||\n+        getTargetDomain().getId().equals(Domain.MIXED_DOMAIN_ID)) {\n+      throwForbiddenError();\n+    } else {\n+      checkAccessGranted(user.getDomainId(), new UserAccessContext(user), readOnly);\n+    }\n+  }\n+\n+  public void checkGroupAccessGranted(final String groupId, final boolean readOnly) {\n+    final Group group = getOrganisationController().getGroup(groupId);\n+    if (group == null) {\n+      throwForbiddenError();\n+    } else {\n+      final String domainId = defaultStringIfNotDefined(group.getDomainId(), Domain.MIXED_DOMAIN_ID);\n+      if (getTargetDomain() == null || !getTargetDomain().getId().equals(domainId)) {\n+        throwForbiddenError();\n+      } else {\n+        checkAccessGranted(domainId, new GroupAccessContext(group), readOnly);\n+      }\n+    }\n+  }\n+\n+  private <T> void checkAccessGranted(final String domainId, final AccessContext<T> accessContext,\n+      final boolean readOnly) {\n+    final UserDetail ud = getUserDetail();\n+    final boolean granted = ud.isAccessAdmin() || isAccessGrantedOnNotFullAdminAccess(\n+        defaultStringIfNotDefined(domainId, Domain.MIXED_DOMAIN_ID), accessContext, readOnly);\n+    if (!granted) {\n+      throwForbiddenError();\n+    }\n+  }\n+\n+  private <T> boolean isAccessGrantedOnNotFullAdminAccess(final String domainId,\n+      final AccessContext<T> accessContext, final boolean readOnly) {\n+    final UserDetail ud = getUserDetail();\n+    final boolean equalsUserDomain = domainId.equals(ud.getDomainId());\n+    boolean granted = ud.isAccessDomainManager() && equalsUserDomain;\n+    if (!granted && (readOnly || accessContext.getType().isGroup())) {\n+      Stream<Pair<Group, String>> groupStream = getUserManageableGroups().stream()\n+          .map(g -> Pair.of(g, defaultStringIfNotDefined(g.getDomainId(), Domain.MIXED_DOMAIN_ID)))\n+          .filter(p -> !ud.isDomainAdminRestricted() ||\n+              p.getSecond().equals(Domain.MIXED_DOMAIN_ID) ||\n+              p.getSecond().equals(ud.getDomainId()));\n+      if (!readOnly && accessContext.getType().isGroup()) {\n+        final Group aimedGroup = (Group) accessContext.getResource();\n+        if (aimedGroup == null) {\n+          groupStream = groupStream.filter(g -> false);\n+        } else {\n+          final List<String> aimedGroupPath = Stream.concat(\n+              Stream.of(aimedGroup.getId()),\n+              Optional.of(aimedGroup)\n+                  .filter(g -> isDefined(g.getSuperGroupId()))\n+                  .stream()\n+                  .flatMap(g -> getOrganisationController().getPathToGroup(g.getId()).stream()))\n+              .collect(toList());\n+          groupStream = groupStream.filter(p -> aimedGroupPath.contains(p.getFirst().getId()));\n+        }\n+      }\n+      granted = groupStream.map(Pair::getSecond).anyMatch(domainId::equals);\n+      if (!granted && readOnly) {\n+        granted = (equalsUserDomain || Domain.MIXED_DOMAIN_ID.equals(domainId)) &&\n+            (isOnlySpaceManager() || isCommunityManager());\n+      }\n+    }\n+    return granted;\n+  }\n+\n   public void setRefreshDomain(boolean refreshDomain) {\n     this.refreshDomain = refreshDomain;\n   }\n@@ -200,6 +294,9 @@ public void setRefreshDomain(boolean refreshDomain) {\n    * USER functions\n    */\n   public void setTargetUser(String userId) {\n+    if (isDefined(userId)) {\n+      checkUserAccessGranted(userId, true);\n+    }\n     targetUserId = userId;\n     processIndex(targetUserId);\n   }\n@@ -1455,6 +1552,7 @@ public void setTargetDomain(String domainId) {\n       targetDomain = null;\n       targetDomainId = \"\";\n     } else {\n+      checkDomainAccessGranted(domainId);\n       List<String> manageableGroupIds = null;\n       targetDomainId = domainId;\n       if (isOnlyGroupManager()) {\n@@ -2409,4 +2507,63 @@ public boolean isOnlySpaceManager() {\n         !isOnlyGroupManager() && !isManagerOfCurrentDomain() &&\n         ArrayUtil.isNotEmpty(getUserManageableSpaceIds());\n   }\n+\n+  /**\n+   * In order to check the user granted access to domain services, the context of use MUST be set.\n+   * <p>\n+   *   This context is an implementation of this abstraction.\n+   * </p>\n+   * @param <T>\n+   */\n+  private static abstract class AccessContext<T> {\n+    private final AccessContextType type;\n+    private final T resource;\n+\n+    private AccessContext(final AccessContextType accessContext, final T resource) {\n+      this.type = accessContext;\n+      this.resource = resource;\n+    }\n+\n+    public AccessContextType getType() {\n+      return type;\n+    }\n+\n+    public T getResource() {\n+      return resource;\n+    }\n+\n+    enum AccessContextType {\n+      DOMAIN, GROUP, USER;\n+      boolean isGroup() {\n+        return this == GROUP;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Context of a domain access.\n+   */\n+  private static class DomainAccessContext extends AccessContext<Void> {\n+    private DomainAccessContext() {\n+      super(AccessContextType.DOMAIN, null);\n+    }\n+  }\n+\n+  /**\n+   * Context of user services access.\n+   */\n+  private static class UserAccessContext extends AccessContext<User> {\n+    private UserAccessContext(final User user) {\n+      super(AccessContextType.USER, user);\n+    }\n+  }\n+\n+  /**\n+   * Context of group services access.\n+   */\n+  private static class GroupAccessContext extends AccessContext<Group> {\n+    private GroupAccessContext(final Group group) {\n+      super(AccessContextType.GROUP, group);\n+    }\n+  }\n }\n\\ No newline at end of file"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
            "diff": "@@ -52,7 +52,7 @@\n import org.silverpeas.core.web.http.RequestParameterDecoder;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n import org.silverpeas.core.web.selection.Selection;\n import org.silverpeas.web.jobdomain.JobDomainPeasException;\n import org.silverpeas.web.jobdomain.JobDomainSettings;\n@@ -72,7 +72,7 @@\n import static org.silverpeas.web.jobdomain.servlets.RemovedUserUIEntity.convertRemovedUserList;\n \n public class JobDomainPeasRequestRouter extends\n-    ComponentRequestRouter<JobDomainPeasSessionController> {\n+    AdminComponentRequestRouter<JobDomainPeasSessionController> {\n \n   private static final long serialVersionUID = 1L;\n \n@@ -120,6 +120,8 @@ public class JobDomainPeasRequestRouter extends\n   private static final String DISPLAY_REMOVED_USERS_DEST = \"displayRemovedUsers\";\n   private static final String DOMAIN_USER_FILTER_MANAGEMENT_DEST = \"domainUserFilterManagement.jsp\";\n   private static final String IS_ONLY_SPACE_MANAGER_ATTR = \"isOnlySpaceManager\";\n+  private static final String WRITE_OPERATION_PARTS =\n+      \"(?i)^.*(create|update|modify|delete|remove|block|activate|import|synchro).*$\";\n \n   @Override\n   public JobDomainPeasSessionController createComponentSessionController(\n@@ -147,15 +149,12 @@ public String getSessionControlBeanName() {\n    * \"/almanach/jsp/almanach.jsp?flag=user\")\n    */\n   @Override\n-  public String getDestination(String function, JobDomainPeasSessionController jobDomainSC,\n+  public String getAdminDestination(String function, JobDomainPeasSessionController jobDomainSC,\n       HttpRequest request) {\n     String destination = \"\";\n \n \n     try {\n-      if (!jobDomainSC.isAccessGranted()) {\n-        throw new JobDomainPeasException(\"Bad right for user {0}\", jobDomainSC.getUserId());\n-      }\n       // 1) Performs the action\n       // ----------------------\n       if (function.startsWith(\"selectUserOrGroup\")) {\n@@ -176,6 +175,7 @@ public String getDestination(String function, JobDomainPeasSessionController job\n       }\n \n       if (\"blankUsers\".equals(function)) {\n+        jobDomainSC.checkCurrentDomainAccessGranted(false);\n         final List<String> userIds = new ArrayList<>();\n         request.mergeSelectedItemsInto(userIds);\n         if (!userIds.isEmpty()) {\n@@ -197,20 +197,23 @@ public String getDestination(String function, JobDomainPeasSessionController job\n         jobDomainSC.setTargetUser(user.getId());\n         destination = USER_CONTENT_DEST;\n       } else if (\"restoreUsers\".equals(function)) {\n+        jobDomainSC.checkCurrentDomainAccessGranted(false);\n         final List<String> userIds = new ArrayList<>();\n         request.mergeSelectedItemsInto(userIds);\n         for (final String u : userIds) {\n           jobDomainSC.restoreUser(u);\n         }\n         destination = getDestination(DISPLAY_REMOVED_USERS_DEST, jobDomainSC, request);\n       } else if (\"deleteUsers\".equals(function)) {\n+        jobDomainSC.checkCurrentDomainAccessGranted(false);\n         final List<String> userIds = new ArrayList<>();\n         request.mergeSelectedItemsInto(userIds);\n         for (final String u : userIds) {\n           jobDomainSC.deleteUser(u);\n         }\n         destination = getDestination(DISPLAY_REMOVED_USERS_DEST, jobDomainSC, request);\n       } else if (\"restoreGroups\".equals(function)) {\n+        jobDomainSC.checkCurrentDomainAccessGranted(false);\n         final List<String> groupIds = new ArrayList<>();\n         request.mergeSelectedItemsInto(groupIds);\n         boolean refreshDomainNav = false;\n@@ -222,6 +225,7 @@ public String getDestination(String function, JobDomainPeasSessionController job\n         }\n         destination = getDestination(DISPLAY_REMOVED_GROUPS_DEST, jobDomainSC, request);\n       } else if (\"deleteGroups\".equals(function)) {\n+        jobDomainSC.checkCurrentDomainAccessGranted(false);\n         final List<String> groupIds = new ArrayList<>();\n         request.mergeSelectedItemsInto(groupIds);\n         for (final String group : groupIds) {\n@@ -231,6 +235,14 @@ public String getDestination(String function, JobDomainPeasSessionController job\n       } else if (function.startsWith(\"user\")) {\n         // USER Actions --------------------------------------------\n         String userId = request.getParameter(\"Iduser\");\n+        final boolean readOperation = !function.matches(WRITE_OPERATION_PARTS);\n+        if (isDefined(userId)) {\n+          jobDomainSC.checkUserAccessGranted(userId, readOperation);\n+        } else if (jobDomainSC.getTargetUserDetail() != null) {\n+          jobDomainSC.checkUserAccessGranted(jobDomainSC.getTargetUserDetail().getId(), readOperation);\n+        } else {\n+          jobDomainSC.checkCurrentDomainAccessGranted(readOperation);\n+        }\n         if (function.startsWith(USER_CONTENT_FCT)) {\n           if (isDefined(userId)) {\n             jobDomainSC.setTargetUser(userId);\n@@ -406,44 +418,55 @@ public String getDestination(String function, JobDomainPeasSessionController job\n         boolean bHaveToRefreshDomain = false;\n \n         jobDomainSC.setTargetUser(null);\n+        String groupId = request.getParameter(IDGROUP_PARAM);\n+        final boolean readOperation = !function.matches(WRITE_OPERATION_PARTS);\n+        if (isDefined(groupId)) {\n+          jobDomainSC.checkGroupAccessGranted(groupId, readOperation);\n+        } else if (jobDomainSC.getTargetGroup() != null) {\n+          jobDomainSC.checkGroupAccessGranted(jobDomainSC.getTargetGroup().getId(), readOperation);\n+        } else {\n+          jobDomainSC.checkCurrentDomainAccessGranted(readOperation);\n+        }\n \n         // Browse functions\n         // ----------------\n         if (function.startsWith(GROUP_CONTENT_FCT)) {\n-          String groupId = request.getParameter(IDGROUP_PARAM);\n           if (isDefined(groupId)) {\n             jobDomainSC.goIntoGroup(groupId);\n           }\n         } else if (function.startsWith(\"groupExport.txt\")) {\n-          String groupId = request.getParameter(IDGROUP_PARAM);\n           if (isDefined(groupId)) {\n-            jobDomainSC.goIntoGroup(request.getParameter(IDGROUP_PARAM));\n+            jobDomainSC.goIntoGroup(groupId);\n             destination = \"exportgroup.jsp\";\n           }\n         } else if (function.startsWith(\"groupReturn\")) {\n-          jobDomainSC.returnIntoGroup(request.getParameter(IDGROUP_PARAM));\n+          jobDomainSC.returnIntoGroup(groupId);\n         } else if (function.startsWith(\"groupSet\")) {\n           jobDomainSC.returnIntoGroup(null);\n-          jobDomainSC.goIntoGroup(request.getParameter(IDGROUP_PARAM));\n+          jobDomainSC.goIntoGroup(groupId);\n         } else if (function.startsWith(\"groupCreate\")) {\n-          bHaveToRefreshDomain = jobDomainSC.createGroup(request.getParameter(\"Idparent\"),\n+          final String parentGroupId = request.getParameter(\"Idparent\");\n+          if (isDefined(parentGroupId)) {\n+            jobDomainSC.checkGroupAccessGranted(parentGroupId, false);\n+          }\n+          bHaveToRefreshDomain = jobDomainSC.createGroup(parentGroupId,\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(GROUP_NAME_PARAM)),\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupDescription\")),\n               request.getParameter(\"groupRule\"));\n         } else if (function.startsWith(\"groupUpdate\")) {\n-          bHaveToRefreshDomain = jobDomainSC.modifyGroup(request.getParameter(IDGROUP_PARAM),\n+          bHaveToRefreshDomain = jobDomainSC.modifyGroup(groupId,\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(GROUP_NAME_PARAM)),\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupDescription\")),\n               request.getParameter(\"groupRule\"));\n         } else if (function.startsWith(\"groupAddRemoveUsers\")) {\n           bHaveToRefreshDomain = jobDomainSC\n               .updateGroupSubUsers(jobDomainSC.getTargetGroup().getId(), jobDomainSC.getSelectedUsersIds());\n         } else if (function.startsWith(\"groupRemove\")) {\n-          bHaveToRefreshDomain = jobDomainSC.removeGroup(request.getParameter(IDGROUP_PARAM));\n+          bHaveToRefreshDomain = jobDomainSC.removeGroup(groupId);\n         } else if (function.startsWith(\"groupDelete\")) {\n-          bHaveToRefreshDomain = jobDomainSC.deleteGroup(request.getParameter(IDGROUP_PARAM));\n+          bHaveToRefreshDomain = jobDomainSC.deleteGroup(groupId);\n         } else if (function.startsWith(\"groupSynchro\")) {\n-          final Optional<Group> synchronizedGroup = jobDomainSC.synchroGroup(request.getParameter(IDGROUP_PARAM));\n+          final Optional<Group> synchronizedGroup = jobDomainSC.synchroGroup(groupId);\n           if (synchronizedGroup.isPresent()) {\n             final Group group = synchronizedGroup.get();\n             if (group.isRemovedState()) {\n@@ -453,7 +476,7 @@ public String getDestination(String function, JobDomainPeasSessionController job\n             }\n           }\n         } else if (function.startsWith(\"groupUnSynchro\")) {\n-          bHaveToRefreshDomain = jobDomainSC.unsynchroGroup(request.getParameter(IDGROUP_PARAM));\n+          bHaveToRefreshDomain = jobDomainSC.unsynchroGroup(groupId);\n         } else if (function.startsWith(\"groupImport\")) {\n           bHaveToRefreshDomain = jobDomainSC.importGroup(WebEncodeHelper.htmlStringToJavaString(request.getParameter(\n               GROUP_NAME_PARAM)));\n@@ -480,7 +503,7 @@ public String getDestination(String function, JobDomainPeasSessionController job\n \n           destination = getDestination(\"groupManagersView\", jobDomainSC, request);\n         } else if (\"groupOpen\".equals(function)) {\n-          String groupId = request.getParameter(\"groupId\");\n+          groupId = request.getParameter(\"groupId\");\n \n           if (jobDomainSC.isAccessGranted() || jobDomainSC.isGroupManagerOnGroup(groupId)) {\n             OrganizationController orgaController = jobDomainSC.getOrganisationController();\n@@ -529,6 +552,12 @@ public String getDestination(String function, JobDomainPeasSessionController job\n         // DOMAIN Actions --------------------------------------------\n       } else if (function.startsWith(DOMAIN_ATTR)) {\n         jobDomainSC.setTargetUser(null);\n+        final boolean writeOperation = function.matches(WRITE_OPERATION_PARTS);\n+        if (writeOperation) {\n+          jobDomainSC.checkAdminAccessOnly();\n+        } else if (jobDomainSC.getTargetDomain() != null) {\n+          jobDomainSC.checkCurrentDomainAccessGranted(true);\n+        }\n         if (function.startsWith(\"domainModifyUserFilter\")) {\n           destination = handleUserFilterModification(jobDomainSC, request);\n         } else if (function.startsWith(\"domainGoTo\")) {\n@@ -811,6 +840,7 @@ public String getDestination(String function, JobDomainPeasSessionController job\n       } else if (\"SelectRightsUserOrGroup\".equals(function)) {\n         destination = jobDomainSC.initSelectionRightsUserOrGroup();\n       } else if (\"AssignSameRights\".equals(function)) {\n+        jobDomainSC.checkAdminAccessOnly();\n         if (!jobDomainSC.isRightCopyReplaceEnabled()) {\n           throwHttpForbiddenError();\n         }"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobmanager/control/JobManagerPeasSessionController.java",
            "diff": "@@ -28,7 +28,7 @@\n import org.silverpeas.core.util.ArrayUtil;\n import org.silverpeas.core.util.logging.SilverLogger;\n import org.silverpeas.core.wbe.WbeSettings;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.web.jobmanager.JobManagerService;\n@@ -48,7 +48,7 @@\n  *\n  * @author\n  */\n-public class JobManagerPeasSessionController extends AbstractComponentSessionController {\n+public class JobManagerPeasSessionController extends AbstractAdminComponentSessionController {\n \n   private Map<String, JobManagerService> services = null;\n   private String idCurrentServiceActif = null;\n@@ -144,7 +144,7 @@ private void initServices() {\n     JobManagerService jSTAT4 = new JobManagerService(\"34\", \"JSTAT4\", LEVEL_OPERATION, webContext\n         + getURL(CMP_SILVERSTATISTICSPEAS, null, null) + \"ViewPDCAccess\", null, false);\n \n-    boolean kmServiceAllowed = false;\n+    boolean pdcServicesAdded = false;\n     int nbServices = 0;\n \n     JobManagerSettings jobManagerSettings = JobManagerSettings.get();\n@@ -162,7 +162,7 @@ private void initServices() {\n         services.put(jKM.getId(), jKM);\n         services.put(jKM1.getId(), jKM1);\n         services.put(jKM2.getId(), jKM2);\n-        kmServiceAllowed = true;\n+        pdcServicesAdded = true;\n       }\n \n       if (jobManagerSettings.isToolSpecificAuthentVisible() ||\n@@ -241,7 +241,7 @@ private void initServices() {\n         services.put(jKM1.getId(), jKM1);\n         services.put(jKM2.getId(), jKM2);\n \n-        kmServiceAllowed = true;\n+        pdcServicesAdded = true;\n       }\n \n       services.put(jSTAT.getId(), jSTAT);\n@@ -255,7 +255,7 @@ private void initServices() {\n       services.put(jKM1.getId(), jKM1);\n       services.put(jKM2.getId(), jKM2);\n \n-      kmServiceAllowed = true;\n+      pdcServicesAdded = true;\n     } else if (getUserDetail().isAccessDomainManager() || !getUserManageableGroupIds().isEmpty()) {\n       String[] id1 = { jdp.getId() };\n       jDesigner = new JobManagerService(\"1\", \"JD\", LEVEL_SERVICE, null, id1, false);\n@@ -265,15 +265,9 @@ private void initServices() {\n       services.put(jdp.getId(), jdp);\n     }\n \n-    boolean isPDCManager = false;\n-\n-    try {\n-      isPDCManager = PdcManager.get().isUserManager(getUserId());\n-    } catch (PdcException e) {\n-      SilverLogger.getLogger(this).error(e);\n-    }\n+    final boolean isPDCManager = isPDCManager();\n \n-    if (!kmServiceAllowed && isPDCManager) {\n+    if (!pdcServicesAdded && isPDCManager) {\n       String[] id1 = { jKM1.getId() };\n       jKM = new JobManagerService(Integer.toString(nbServices + 1), \"JKM\",\n           LEVEL_SERVICE, null, id1, false);\n@@ -283,6 +277,33 @@ private void initServices() {\n     }\n   }\n \n+  @Override\n+  public boolean isAccessGranted() {\n+    boolean accessGranted =\n+        getUserDetail().isAccessAdmin() || getUserManageableSpaceIds().length != 0;\n+    if (!accessGranted) {\n+      accessGranted =\n+          getUserDetail().isAccessDomainManager() || !getUserManageableGroupIds().isEmpty();\n+    }\n+    if (!accessGranted) {\n+      JobManagerSettings jobManagerSettings = JobManagerSettings.get();\n+      accessGranted = jobManagerSettings.isKMVisible() &&\n+          (getUserDetail().isAccessPdcManager() || isPDCManager());\n+    }\n+    return accessGranted;\n+  }\n+\n+  private boolean isPDCManager() {\n+    boolean isPDCManager = false;\n+\n+    try {\n+      isPDCManager = PdcManager.get().isUserManager(getUserId());\n+    } catch (PdcException e) {\n+      SilverLogger.getLogger(this).error(e);\n+    }\n+    return isPDCManager;\n+  }\n+\n   // retourne les services de niveau level\n   // 0 => niveau Service\n   // 1 => op\u00e9ration"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobmanager/servlets/JobManagerPeasRequestRouter.java",
            "diff": "@@ -26,7 +26,7 @@\n import org.silverpeas.core.web.http.HttpRequest;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n import org.silverpeas.web.jobmanager.JobManagerService;\n import org.silverpeas.web.jobmanager.control.JobManagerPeasSessionController;\n \n@@ -40,7 +40,7 @@\n  * @author\n  */\n public class JobManagerPeasRequestRouter extends\n-    ComponentRequestRouter<JobManagerPeasSessionController> {\n+    AdminComponentRequestRouter<JobManagerPeasSessionController> {\n \n   private static final long serialVersionUID = -2003485584890163789L;\n   private static final String OPERATION_ACTION = \"Operation\";\n@@ -78,7 +78,8 @@ public String getSessionControlBeanName() {\n    * @return The complete destination URL for a forward (ex :\n    * \"/almanach/jsp/almanach.jsp?flag=user\")\n    */\n-  public String getDestination(String function, JobManagerPeasSessionController jobManagerSC,\n+  @Override\n+  public String getAdminDestination(String function, JobManagerPeasSessionController jobManagerSC,\n       HttpRequest request) {\n     String destination;\n     try {"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobstartpage/JobStartPagePeasException.java",
            "diff": "@@ -30,75 +30,25 @@\n \n package org.silverpeas.web.jobstartpage;\n \n-import org.silverpeas.core.exception.SilverpeasException;\n+import org.silverpeas.core.SilverpeasException;\n \n /**\n- * Class declaration\n- * @author\n+ * Exception when an error is raised from a Silverpeas space and component related job.\n  */\n public class JobStartPagePeasException extends SilverpeasException {\n \n   private static final long serialVersionUID = 7820592552517371949L;\n \n-  /**\n-   * Constructor declaration\n-   * @param callingClass\n-   * @param errorLevel\n-   * @param message\n-   *\n-   */\n-  public JobStartPagePeasException(String callingClass, int errorLevel,\n-      String message) {\n-    super(callingClass, errorLevel, message);\n-  }\n-\n-  /**\n-   * Constructor declaration\n-   * @param callingClass\n-   * @param errorLevel\n-   * @param message\n-   * @param extraParams\n-   *\n-   */\n-  public JobStartPagePeasException(String callingClass, int errorLevel,\n-      String message, String extraParams) {\n-    super(callingClass, errorLevel, message, extraParams);\n-  }\n \n-  /**\n-   * Constructor declaration\n-   * @param callingClass\n-   * @param errorLevel\n-   * @param message\n-   * @param nested\n-   *\n-   */\n-  public JobStartPagePeasException(String callingClass, int errorLevel,\n-      String message, Exception nested) {\n-    super(callingClass, errorLevel, message, nested);\n+  public JobStartPagePeasException(final String message, String ... parameters) {\n+    super(message, parameters);\n   }\n \n-  /**\n-   * Constructor declaration\n-   * @param callingClass\n-   * @param errorLevel\n-   * @param message\n-   * @param extraParams\n-   * @param nested\n-   *\n-   */\n-  public JobStartPagePeasException(String callingClass, int errorLevel,\n-      String message, String extraParams, Exception nested) {\n-    super(callingClass, errorLevel, message, extraParams, nested);\n+  public JobStartPagePeasException(final String message, final Throwable cause) {\n+    super(message, cause);\n   }\n \n-  /**\n-   * Method declaration\n-   * @return\n-   *\n-   */\n-  public String getModule() {\n-    return \"jobStartPagePeas\";\n+  public JobStartPagePeasException(final Throwable cause) {\n+    super(cause);\n   }\n-\n }"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobstartpage/control/JobStartPagePeasSessionController.java",
            "diff": "@@ -51,7 +51,6 @@\n import org.silverpeas.core.clipboard.ClipboardSelection;\n import org.silverpeas.core.contribution.template.publication.PublicationTemplateException;\n import org.silverpeas.core.contribution.template.publication.PublicationTemplateManager;\n-import org.silverpeas.core.exception.SilverpeasRuntimeException;\n import org.silverpeas.core.i18n.I18NHelper;\n import org.silverpeas.core.template.SilverpeasTemplate;\n import org.silverpeas.core.template.SilverpeasTemplateFactory;\n@@ -69,7 +68,7 @@\n import org.silverpeas.core.util.logging.SilverLogger;\n import org.silverpeas.core.util.memory.MemoryUnit;\n import org.silverpeas.core.web.look.SilverpeasLook;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.web.selection.Selection;\n@@ -93,7 +92,7 @@\n  *\n  * @author\n  */\n-public class JobStartPagePeasSessionController extends AbstractComponentSessionController {\n+public class JobStartPagePeasSessionController extends AbstractAdminComponentSessionController {\n \n   public static final int SCOPE_BACKOFFICE = 0;\n   public static final int SCOPE_FRONTOFFICE = 1;\n@@ -130,13 +129,24 @@ public JobStartPagePeasSessionController(MainSessionController mainSessionCtrl,\n         JobStartPagePeasSettings.CUSTOMERS_TEMPLATE_PATH);\n   }\n \n+  /**\n+   * Dedicated for tests\n+   */\n+  public JobStartPagePeasSessionController(final MainSessionController controller,\n+      final ComponentContext context, final String localizedMessagesBundleName,\n+      final String iconFileName, final String settingsFileName) {\n+    super(controller, context, localizedMessagesBundleName, iconFileName, settingsFileName);\n+    adminController = null;\n+  }\n+\n   // Init at first entry\n   public void init() {\n     m_NavBarMgr.initWithUser(this, getUserDetail());\n   }\n \n-  public boolean isUserAdmin() {\n-    return getUserDetail().isAccessAdmin();\n+  @Override\n+  public boolean isAccessGranted() {\n+    return isAccessGranted(getManagedSpaceId(), getManagedInstanceId(), true);\n   }\n \n   // method du spaceInst\n@@ -149,6 +159,7 @@ public SpaceInst getSpaceInstById() {\n \n   public void setManagedSpaceId(String sId, boolean isManagedSpaceRoot) {\n     String spaceId = getShortSpaceId(sId);\n+    checkAccessGranted(spaceId, null, true);\n     m_ManagedSpaceId = spaceId;\n     m_isManagedSpaceRoot = isManagedSpaceRoot;\n \n@@ -250,6 +261,7 @@ public void refreshCurrentSpaceCache() {\n   }\n \n   public void setManagedInstanceId(String sId) {\n+    checkAccessGranted(null, sId, true);\n     m_ManagedInstanceId = sId;\n     setScope(SCOPE_BACKOFFICE);\n   }\n@@ -263,10 +275,6 @@ public String getManagedInstanceId() {\n     return m_ManagedInstanceId;\n   }\n \n-  public boolean isComponentManageable(String componentId) {\n-    return getOrganisationController().isComponentManageable(componentId, getUserId());\n-  }\n-\n   public void setManagedProfile(ProfileInst sProfile) {\n     m_ManagedProfile = sProfile;\n \n@@ -353,25 +361,6 @@ public SpaceInst[] getBrotherSpaces(boolean isNew) {\n     return m_BrothersSpaces;\n   }\n \n-  // Get spaces \"manageable\" by the current user (ie spaces in maintenance or current space)\n-  public SpaceInst[] getUserManageableSpacesIds() {\n-    List<SpaceInst> vManageableSpaces = new ArrayList<SpaceInst>();\n-    String[] sids = getUserManageableSpaceIds();\n-    SpaceInst currentSpace = getSpaceInstById();\n-    String currentSpaceId = (currentSpace == null) ? \"-1\" : currentSpace.getId();\n-\n-    for (String sid : sids) {\n-      if (isSpaceInMaintenance(sid.substring(2)) || sid.equals(currentSpaceId)) {\n-        vManageableSpaces.add(adminController.getSpaceInstById(sid));\n-      }\n-    }\n-\n-    SpaceInst[] aManageableSpaces = vManageableSpaces.toArray(\n-        new SpaceInst[vManageableSpaces.size()]);\n-    Arrays.sort(aManageableSpaces, Comparator.comparing(SpaceInst::getOrderNum));\n-    return aManageableSpaces;\n-  }\n-\n   public void setSpacePlace(String idSpaceBefore) {\n     int orderNum = 0;\n     int i;\n@@ -1107,6 +1096,7 @@ public void cutComponent(String id) throws ClipboardException {\n   }\n \n   private void copyOrCutComponent(String id, boolean cut) throws ClipboardException {\n+    checkAccessGranted(null, id, false);\n     ComponentInst componentInst = getComponentInst(id);\n     ComponentSelection compoSelect = new ComponentSelection(componentInst);\n     compoSelect.setCutted(cut);\n@@ -1122,6 +1112,7 @@ public void cutSpace(String id) throws ClipboardException {\n   }\n \n   private void copyOrCutSpace(String id, boolean cut) throws ClipboardException {\n+    checkAccessGranted(id, null, false);\n     SpaceInst space = getSpaceInstById(id);\n     SpaceSelection spaceSelect = new SpaceSelection(space);\n     spaceSelect.setCutted(cut);\n@@ -1135,6 +1126,7 @@ private void copyOrCutSpace(String id, boolean cut) throws ClipboardException {\n    * @throws JobStartPagePeasException\n    */\n   public void paste(Map<String, String> options) throws ClipboardException, JobStartPagePeasException {\n+    checkAccessGranted(getManagedSpaceId(), getManagedInstanceId(), false);\n     try {\n       Collection<ClipboardSelection> clipObjects = getClipboardSelectedObjects();\n       boolean refreshCache = false;\n@@ -1170,8 +1162,7 @@ public void paste(Map<String, String> options) throws ClipboardException, JobSta\n       }\n     } catch (Exception e) {\n       m_NavBarMgr.resetAllCache();\n-      throw new JobStartPagePeasException(\"JobStartPagePeasSessionController.paste()\",\n-          SilverpeasRuntimeException.ERROR, \"jobStartPagePeas.EX_PASTE_ERROR\", e);\n+      throw new JobStartPagePeasException(e);\n     }\n     clipboardPasteDone();\n   }\n@@ -1206,8 +1197,7 @@ public Set<String> getCopiedComponents() throws JobStartPagePeasException {\n         }\n       }\n     } catch (Exception e) {\n-      throw new JobStartPagePeasException(\"JobStartPagePeasSessionController.getCopiedComponents()\",\n-          SilverpeasRuntimeException.ERROR, \"jobStartPagePeas.EX_PASTE_ERROR\", e);\n+      throw new JobStartPagePeasException(e);\n     }\n     return copiedComponents;\n   }\n@@ -1228,8 +1218,7 @@ private void pasteComponent(PasteDetail pasteDetail) throws JobStartPagePeasExce\n         refreshCurrentSpaceCache();\n       }\n     } catch (Exception e) {\n-      throw new JobStartPagePeasException(\"JobStartPagePeasSessionController.pasteComponent()\",\n-          SilverpeasRuntimeException.ERROR, \"jobStartPagePeas.EX_PASTE_ERROR\",\n+      throw new JobStartPagePeasException(\n           \"componentId = \" + pasteDetail.getFromComponentId() + \" in space \" + getManagedSpaceId(),\n           e);\n     }\n@@ -1252,8 +1241,6 @@ private void pasteSpace(PasteDetail pasteDetail) throws JobStartPagePeasExceptio\n       }\n     } catch (Exception e) {\n       throw new JobStartPagePeasException(\n-          \"JobStartPagePeasSessionController.pasteSpace()\",\n-          SilverpeasRuntimeException.ERROR, \"jobStartPagePeas.EX_PASTE_ERROR\",\n           \"spaceId = \" + pasteDetail.getFromSpaceId() + \" in space \" + getManagedSpaceId(), e);\n     }\n   }"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobstartpage/servlets/JobStartPagePeasRequestRouter.java",
            "diff": "@@ -43,7 +43,7 @@\n import org.silverpeas.core.web.http.HttpRequest;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n import org.silverpeas.core.web.selection.Selection;\n import org.silverpeas.web.jobstartpage.JobStartPagePeasSettings;\n import org.silverpeas.web.jobstartpage.NavBarJsonEncoder;\n@@ -61,7 +61,8 @@\n import static java.util.Optional.ofNullable;\n import static org.silverpeas.core.util.JSONCodec.encodeObject;\n \n-public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobStartPagePeasSessionController> {\n+public class JobStartPagePeasRequestRouter extends\n+    AdminComponentRequestRouter<JobStartPagePeasSessionController> {\n \n   private static final long serialVersionUID = 3751632991093466433L;\n   private static final String WELCOME_SPACE_ADMIN_TEMPLATE_FILE = \"/space/welcome_space_admin_\";\n@@ -99,6 +100,8 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta\n   private static final String ROLE_INSTANCE_FULL_DEST = \"/jobStartPagePeas/jsp/roleInstance.jsp\";\n   private static final String ROLE_ITEMS_PREFIX = \"roleItems\";\n   private static final String SPACE_TYPE = \"Space\";\n+  private static final String WRITE_OPERATION_PARTS =\n+      \"(?i)^.*(create|update|modify|delete|remove|effective).*$\";\n \n   @Override\n   public JobStartPagePeasSessionController createComponentSessionController(\n@@ -233,10 +236,12 @@ public String getDestinationNavBar(String function,\n       }\n       destination = \"/jobStartPagePeas/jsp/welcome.jsp\";\n     } else if (VIEW_BIN_FCT.equals(function)) {\n+      jobStartPageSC.checkAdminAccessOnly();\n       request.setAttribute(\"Spaces\", jobStartPageSC.getRemovedSpaces());\n       request.setAttribute(\"Components\", jobStartPageSC.getRemovedComponents());\n       destination = \"/jobStartPagePeas/jsp/bin.jsp\";\n     } else if (\"RestoreFromBin\".equals(function) || \"RemoveDefinitely\".equals(function)) {\n+      jobStartPageSC.checkAdminAccessOnly();\n       final List<String> spaceIds;\n       final List<String> componentIds;\n       final String itemId = request.getParameter(\"ItemId\");\n@@ -304,13 +309,9 @@ public String getDestinationComponent(String function,\n           COMPONENT_INFO_FULL_DEST;\n     } else if (\"SetupComponent\".equals(function)) {\n       String compoId = request.getParameter(COMPONENT_ID_PARAM);\n-      if (jobStartPageSC.isComponentManageable(compoId)) {\n-        jobStartPageSC.setManagedInstanceId(compoId,\n-            JobStartPagePeasSessionController.SCOPE_FRONTOFFICE);\n-        destination = getDestination(\"UpdateInstance\", jobStartPageSC, request);\n-      } else {\n-        destination = \"/admin/jsp/accessForbidden.jsp\";\n-      }\n+      jobStartPageSC.setManagedInstanceId(compoId,\n+          JobStartPagePeasSessionController.SCOPE_FRONTOFFICE);\n+      destination = getDestination(\"UpdateInstance\", jobStartPageSC, request);\n     } else if (GO_TO_CURRENT_COMPONENT_FCT.equals(function)) {\n       destination = COMPONENT_INFO_FULL_DEST;\n     } else if (\"ListComponent\".equals(function)) {\n@@ -466,15 +467,9 @@ public String getDestinationComponent(String function,\n         destination = getDestination(WELCOME_FCT, jobStartPageSC, request);\n       }\n     } else if (function.equals(\"OpenComponent\")) {\n-      // check if user can update it\n-      String id = request.getParameter(COMPONENT_ID_PARAM);\n-      if (!jobStartPageSC.isComponentManageable(id)) {\n-        destination = \"/admin/jsp/accessForbidden.jsp\";\n-      } else {\n-        jobStartPageSC.init();\n-        request.setAttribute(\"PopupMode\", true);\n-        destination = getDestination(GO_TO_COMPONENT_FCT, jobStartPageSC, request);\n-      }\n+      jobStartPageSC.init();\n+      request.setAttribute(\"PopupMode\", true);\n+      destination = getDestination(GO_TO_COMPONENT_FCT, jobStartPageSC, request);\n     }\n \n     return destination;\n@@ -718,8 +713,13 @@ public String getDestinationSpace(String function,\n    * \"/almanach/jsp/almanach.jsp?flag=user\")\n    */\n   @Override\n-  public String getDestination(String function, JobStartPagePeasSessionController jobStartPageSC,\n+  public String getAdminDestination(String function, JobStartPagePeasSessionController jobStartPageSC,\n       HttpRequest request) {\n+    if (function.matches(WRITE_OPERATION_PARTS)) {\n+      final String spaceId = jobStartPageSC.getManagedSpaceId();\n+      final String instanceId = jobStartPageSC.getManagedInstanceId();\n+      jobStartPageSC.checkAccessGranted(spaceId, instanceId, false);\n+    }\n     if (request.getParameterAsBoolean(HAVE_TO_REFRESH_NAV_BAR_ATTR)) {\n       request.setAttribute(HAVE_TO_REFRESH_NAV_BAR_ATTR, Boolean.TRUE);\n     }"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/pdc/control/PdcSessionController.java",
            "diff": "@@ -23,6 +23,7 @@\n  */\n package org.silverpeas.web.pdc.control;\n \n+import org.silverpeas.core.SilverpeasRuntimeException;\n import org.silverpeas.core.admin.service.AdminController;\n import org.silverpeas.core.admin.user.model.Group;\n import org.silverpeas.core.admin.user.model.UserDetail;\n@@ -40,7 +41,7 @@\n import org.silverpeas.core.util.ServiceProvider;\n import org.silverpeas.core.util.URLUtil;\n import org.silverpeas.core.util.logging.SilverLogger;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.web.selection.Selection;\n@@ -54,7 +55,8 @@\n import java.util.Iterator;\n import java.util.List;\n \n-public class PdcSessionController extends AbstractComponentSessionController {\n+public class PdcSessionController extends AbstractAdminComponentSessionController {\n+  private static final long serialVersionUID = -7993993070048344281L;\n \n   private String currentView = \"P\";\n   private Axis currentAxis = null;\n@@ -76,6 +78,15 @@ public PdcSessionController(MainSessionController mainSessionCtrl,\n     currentLanguage = getLanguage();\n   }\n \n+  @Override\n+  public boolean isAccessGranted() {\n+    try {\n+      return isPDCAdmin() || getPdcBm().isUserManager(getUserId());\n+    } catch (PdcException e) {\n+      throw new SilverpeasRuntimeException(e);\n+    }\n+  }\n+\n   private PdcManager getPdcBm() {\n     return PdcServiceProvider.getPdcManager();\n   }"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcRequestRouter.java",
            "diff": "@@ -34,7 +34,7 @@\n import org.silverpeas.core.web.http.HttpRequest;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n import org.silverpeas.core.web.mvc.util.AccessForbiddenException;\n import org.silverpeas.web.pdc.control.PdcSessionController;\n \n@@ -44,7 +44,7 @@\n import java.util.List;\n import java.util.StringTokenizer;\n \n-public class PdcRequestRouter extends ComponentRequestRouter<PdcSessionController> {\n+public class PdcRequestRouter extends AdminComponentRequestRouter<PdcSessionController> {\n \n   private static final long serialVersionUID = -1233766141114104308L;\n \n@@ -85,7 +85,7 @@ public String getSessionControlBeanName() {\n    * \"/notificationUser/jsp/notificationUser.jsp?flag=user\")\n    */\n   @Override\n-  public String getDestination(String function, PdcSessionController pdcSC,\n+  public String getAdminDestination(String function, PdcSessionController pdcSC,\n       HttpRequest request) {\n     String destination = \"\";\n     try {"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
            "diff": "@@ -58,7 +58,7 @@\n import org.silverpeas.core.util.UnitUtil;\n import org.silverpeas.core.util.logging.SilverLogger;\n import org.silverpeas.core.util.memory.MemoryUnit;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.web.selection.Selection;\n@@ -85,7 +85,8 @@\n  * Class declaration\n  * @author\n  */\n-public class SilverStatisticsPeasSessionController extends AbstractComponentSessionController {\n+public class SilverStatisticsPeasSessionController extends AbstractAdminComponentSessionController {\n+  private static final long serialVersionUID = -8394342857531676676L;\n \n   public static final int INDICE_VALUE = 0;\n   public static final int INDICE_LIB = 1;\n@@ -174,6 +175,11 @@ public SilverStatisticsPeasSessionController(MainSessionController mainSessionCt\n     initYears();\n   }\n \n+  @Override\n+  public boolean isAccessGranted() {\n+    return isAccessGranted(null, null, true);\n+  }\n+\n   public UserAccessLevel getUserProfile() {\n     if (getUserDetail().isAccessAdmin()) {\n       return getUserDetail().getAccessLevel();"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/silverstatistics/servlets/SilverStatisticsPeasRequestRouter.java",
            "diff": "@@ -23,35 +23,39 @@\n  */\n package org.silverpeas.web.silverstatistics.servlets;\n \n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.silverpeas.core.admin.user.constant.UserAccessLevel;\n+import org.silverpeas.core.chart.period.PeriodChart;\n+import org.silverpeas.core.chart.pie.PieChart;\n import org.silverpeas.core.util.StringUtil;\n+import org.silverpeas.core.web.http.HttpRequest;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n import org.silverpeas.web.silverstatistics.control.SilverStatisticsPeasSessionController;\n import org.silverpeas.web.silverstatistics.vo.AxisStatsFilter;\n import org.silverpeas.web.silverstatistics.vo.CrossAxisStatsFilter;\n import org.silverpeas.web.silverstatistics.vo.CrossStatisticVO;\n import org.silverpeas.web.silverstatistics.vo.StatisticVO;\n-import org.apache.commons.lang3.math.NumberUtils;\n-import org.silverpeas.core.admin.user.constant.UserAccessLevel;\n-import org.silverpeas.core.chart.period.PeriodChart;\n-import org.silverpeas.core.chart.pie.PieChart;\n-import org.silverpeas.core.web.http.HttpRequest;\n \n import javax.servlet.http.HttpServletRequest;\n import java.util.Calendar;\n import java.util.List;\n \n+import static org.silverpeas.core.util.StringUtil.isNotDefined;\n+\n /**\n  * Class declaration\n  * @author\n  */\n public class SilverStatisticsPeasRequestRouter extends\n-    ComponentRequestRouter<SilverStatisticsPeasSessionController> {\n+    AdminComponentRequestRouter<SilverStatisticsPeasSessionController> {\n \n   private static final long serialVersionUID = -7422373100761515806L;\n   private final SilverStatisticsActionAccessController actionAccessController =\n       new SilverStatisticsActionAccessController();\n+  private static final String PDC_FUNCTION = \"(?i)^.*(pdc).*$\";\n+  private static final String SPACE_MANAGER_FUNCTION = \"(?i)^.*(access|volume).*$\";\n \n   /**\n    * Method declaration\n@@ -87,7 +91,7 @@ public String getSessionControlBeanName() {\n    * \"/almanach/jsp/almanach.jsp?flag=user\")\n    */\n   @Override\n-  public String getDestination(String function, SilverStatisticsPeasSessionController statsSC,\n+  public String getAdminDestination(String function, SilverStatisticsPeasSessionController statsSC,\n       HttpRequest request) {\n     String destination = \"\";\n     UserAccessLevel userProfile = statsSC.getUserProfile();\n@@ -98,6 +102,14 @@ public String getDestination(String function, SilverStatisticsPeasSessionControl\n       return null;\n     }\n \n+    if (function.matches(SPACE_MANAGER_FUNCTION) && !function.matches(PDC_FUNCTION)) {\n+      final String accessSpaceId = StringUtil.defaultStringIfNotDefined(\n+          request.getParameter(\"SpaceId\"), statsSC.getAccessSpaceId());\n+      statsSC.checkAccessGranted(accessSpaceId, null, isNotDefined(accessSpaceId));\n+    } else {\n+      statsSC.checkAdminAccessOnly();\n+    }\n+\n     Calendar calendar = Calendar.getInstance();\n     String monthOfCurrentYear = String.valueOf(calendar.get(Calendar.MONTH));\n     String currentYear = String.valueOf(calendar.get(Calendar.YEAR));"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/templatedesigner/control/TemplateDesignerSessionController.java",
            "diff": "@@ -45,7 +45,7 @@\n import org.silverpeas.core.util.file.FileFolderManager;\n import org.silverpeas.core.util.file.FileRepositoryManager;\n import org.silverpeas.core.util.logging.SilverLogger;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.web.mvc.webcomponent.WebMessager;\n@@ -64,7 +64,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n-public class TemplateDesignerSessionController extends AbstractComponentSessionController {\n+public class TemplateDesignerSessionController extends AbstractAdminComponentSessionController {\n+  private static final long serialVersionUID = -6869148156113542542L;\n \n   private static final String VIEW_HTML = \"view.html\";\n   private static final String UPDATE_HTML = \"update.html\";"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/templatedesigner/servlets/TemplateDesignerRequestRouter.java",
            "diff": "@@ -23,42 +23,39 @@\n  */\n package org.silverpeas.web.templatedesigner.servlets;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.Enumeration;\n-import java.util.List;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n import org.apache.commons.fileupload.FileItem;\n-import org.silverpeas.core.contribution.content.form.field.PublicationsPickerField;\n-import org.silverpeas.core.security.encryption.cipher.CryptoException;\n-\n import org.silverpeas.core.contribution.content.form.DataRecord;\n import org.silverpeas.core.contribution.content.form.FieldTemplate;\n import org.silverpeas.core.contribution.content.form.Form;\n import org.silverpeas.core.contribution.content.form.FormException;\n import org.silverpeas.core.contribution.content.form.PagesContext;\n-import org.silverpeas.core.pdc.form.fieldtype.PdcField;\n+import org.silverpeas.core.contribution.content.form.field.PublicationsPickerField;\n import org.silverpeas.core.contribution.content.form.record.GenericFieldTemplate;\n import org.silverpeas.core.contribution.content.form.record.Label;\n import org.silverpeas.core.contribution.content.form.record.Parameter;\n import org.silverpeas.core.contribution.content.form.record.ParameterValue;\n import org.silverpeas.core.contribution.template.publication.PublicationTemplate;\n import org.silverpeas.core.contribution.template.publication.PublicationTemplateImpl;\n-import org.silverpeas.web.templatedesigner.control.TemplateDesignerSessionController;\n+import org.silverpeas.core.pdc.form.fieldtype.PdcField;\n+import org.silverpeas.core.security.encryption.cipher.CryptoException;\n import org.silverpeas.core.util.StringUtil;\n+import org.silverpeas.core.util.file.FileRepositoryManager;\n import org.silverpeas.core.util.file.FileUploadUtil;\n import org.silverpeas.core.web.http.HttpRequest;\n-\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n-import org.silverpeas.core.util.file.FileRepositoryManager;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n+import org.silverpeas.web.templatedesigner.control.TemplateDesignerSessionController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.List;\n \n public class TemplateDesignerRequestRouter extends\n-    ComponentRequestRouter<TemplateDesignerSessionController> {\n+    AdminComponentRequestRouter<TemplateDesignerSessionController> {\n \n   private static final long serialVersionUID = 1117593114737219878L;\n \n@@ -96,7 +93,7 @@ public TemplateDesignerSessionController createComponentSessionController(\n    * \"/almanach/jsp/almanach.jsp?flag=user\")\n    */\n   @Override\n-  public String getDestination(String function,\n+  public String getAdminDestination(String function,\n       TemplateDesignerSessionController templateDesignerSC,\n       HttpRequest request) {\n     String destination = \"\";"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/variables/VariablesRequestRouter.java",
            "diff": "@@ -23,15 +23,16 @@\n  */\n package org.silverpeas.web.variables;\n \n-import org.silverpeas.core.admin.user.model.User;\n import org.silverpeas.core.util.SilverpeasList;\n import org.silverpeas.core.util.StringUtil;\n import org.silverpeas.core.web.http.HttpRequest;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n \n-public class VariablesRequestRouter extends ComponentRequestRouter<VariablesSessionController> {\n+public class VariablesRequestRouter\n+    extends AdminComponentRequestRouter<VariablesSessionController> {\n+  private static final long serialVersionUID = 880659914133424280L;\n \n   private static final String SESSION_BEAN_NAME = \"Variables\";\n \n@@ -41,13 +42,9 @@ public String getSessionControlBeanName() {\n   }\n \n   @Override\n-  public String getDestination(final String action, final VariablesSessionController sc,\n+  public String getAdminDestination(final String action, final VariablesSessionController sc,\n       final HttpRequest request) {\n \n-    if (!User.getCurrentRequester().isAccessAdmin()) {\n-      throwHttpForbiddenError();\n-    }\n-\n     String destination = \"/variables/jsp/variables.jsp\";\n \n     if (\"Main\".equals(action)) {"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/variables/VariablesSessionController.java",
            "diff": "@@ -24,7 +24,7 @@\n package org.silverpeas.web.variables;\n \n import org.silverpeas.core.variables.Variable;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.webapi.variables.VariablesWebManager;\n@@ -34,7 +34,8 @@\n import java.util.List;\n import java.util.Set;\n \n-public class VariablesSessionController extends AbstractComponentSessionController {\n+public class VariablesSessionController extends AbstractAdminComponentSessionController {\n+  private static final long serialVersionUID = -6077929073402709139L;\n \n   private final Set<String> selectedValueIds = new HashSet<>();\n   private Variable currentVariable;"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/workflowdesigner/control/WorkflowDesignerSessionController.java",
            "diff": "@@ -37,7 +37,7 @@\n import org.silverpeas.core.util.StringUtil;\n import org.silverpeas.core.util.file.FileServerUtils;\n import org.silverpeas.core.util.file.FileUtil;\n-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n import org.silverpeas.core.workflow.api.ProcessModelManager;\n@@ -59,7 +59,7 @@\n import static java.util.Optional.ofNullable;\n import static org.silverpeas.core.util.file.FileRepositoryManager.getTemporaryPath;\n \n-public class WorkflowDesignerSessionController extends AbstractComponentSessionController {\n+public class WorkflowDesignerSessionController extends AbstractAdminComponentSessionController {\n \n   public static final String TYPE_USER = \"user\";\n   public static final String FORMS = \"forms\";"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/workflowdesigner/servlets/WorkflowDesignerRequestRouter.java",
            "diff": "@@ -25,12 +25,11 @@\n \n import org.apache.commons.fileupload.FileItem;\n import org.silverpeas.core.exception.SilverpeasException;\n-import org.silverpeas.core.util.ResourceLocator;\n import org.silverpeas.core.util.StringUtil;\n import org.silverpeas.core.web.http.HttpRequest;\n import org.silverpeas.core.web.mvc.controller.ComponentContext;\n import org.silverpeas.core.web.mvc.controller.MainSessionController;\n-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n import org.silverpeas.core.workflow.api.Workflow;\n import org.silverpeas.core.workflow.api.WorkflowException;\n import org.silverpeas.core.workflow.api.model.*;\n@@ -51,7 +50,7 @@\n import java.util.StringTokenizer;\n \n public class WorkflowDesignerRequestRouter extends\n-    ComponentRequestRouter<WorkflowDesignerSessionController> {\n+    AdminComponentRequestRouter<WorkflowDesignerSessionController> {\n \n   private static final long serialVersionUID = -6747786008527861783L;\n   static private Map<String, FunctionHandler> mapHandler; // mapping of functions to their handlers\n@@ -90,16 +89,12 @@ public WorkflowDesignerSessionController createComponentSessionController(\n    * @return The complete destination URL for a forward (ex :\n    * \"/almanach/jsp/almanach.jsp?flag=user\")\n    */\n-  public String getDestination(String function,\n+  @Override\n+  public String getAdminDestination(String function,\n       WorkflowDesignerSessionController workflowDesignerSC, HttpRequest request) {\n     String destination = null;\n     FunctionHandler handler = getHandler(function);\n \n-    // Check access rights\n-    if (!workflowDesignerSC.getUserDetail().isAccessAdmin()) {\n-      return ResourceLocator.getGeneralSettingBundle().getString(\"accessForbidden\");\n-    }\n-\n     try {\n       if (handler != null) {\n         destination = handler.getDestination(function, workflowDesignerSC, request);"
        },
        {
            "filename": "core-war/src/main/webapp/admin/jsp/SilverLoggerAdmin.jsp",
            "diff": "@@ -58,17 +58,19 @@\n <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n <%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %>\n+<%@ taglib uri=\"http://www.silverpeas.com/tld/silverFunctions\" prefix=\"silfn\" %>\n <%@ taglib uri=\"http://www.silverpeas.com/tld/viewGenerator\" prefix=\"view\" %>\n+\n+<c:set var=\"currentUser\" value=\"${silfn:currentUser()}\"/>\n+<c:if test=\"${currentUser == null or not currentUser.accessAdmin}\">\n+  <c:redirect url=\"/Login\"/>\n+</c:if>\n+\n <%\n   response.setHeader(\"Cache-Control\", \"no-store\"); //HTTP 1.1\n   response.setHeader(\"Pragma\", \"no-cache\"); //HTTP 1.0\n   response.setDateHeader(\"Expires\", -1); //prevents caching at the proxy server\n \n-  UserDetail currentUser = UserDetail.getCurrentRequester();\n-  if (currentUser == null || !currentUser.isAccessAdmin()) {\n-    request.getRequestDispatcher(\"../../Login.jsp\").forward(request, response);\n-  }\n-\n   List<String> loggingLevels = new ArrayList<>();\n   for (Level level : Level.values()) {\n     loggingLevels.add(level.name());"
        },
        {
            "filename": "core-war/src/main/webapp/admin/jsp/cipherkey.jsp",
            "diff": "@@ -1,4 +1,4 @@\n-<%--\n+<%@ page import=\"org.silverpeas.core.admin.user.model.User\" %><%--\n \n     Copyright (C) 2000 - 2022 Silverpeas\n \n@@ -26,9 +26,15 @@\n <%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%>\n+<%@ taglib uri=\"http://www.silverpeas.com/tld/silverFunctions\" prefix=\"silfn\" %>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%>\n <%@ taglib uri=\"http://www.silverpeas.com/tld/viewGenerator\" prefix=\"view\"%>\n \n+<c:set var=\"currentUser\" value=\"${silfn:currentUser()}\"/>\n+<c:if test=\"${currentUser == null or not currentUser.accessAdmin}\">\n+  <c:redirect url=\"/Login\"/>\n+</c:if>\n+\n <fmt:setLocale value=\"${sessionScope['SilverSessionController'].favoriteLanguage}\" />\n <view:setBundle basename=\"org.silverpeas.crypto.multilang.cryptoBundle\" />\n "
        },
        {
            "filename": "core-war/src/main/webapp/admin/jsp/errorpageMain.jsp",
            "diff": "@@ -46,6 +46,10 @@ if (response.isCommitted() == false) {\n <%@ page import=\"org.silverpeas.core.util.WebEncodeHelper\" %>\n <%@ page import=\"org.silverpeas.core.web.mvc.util.HomePageUtil\" %>\n <%@ page import=\"java.io.PrintWriter\" %>\n+<%@ page import=\"org.silverpeas.core.security.authorization.ForbiddenRuntimeException\" %>\n+<%@ page import=\"javax.ws.rs.WebApplicationException\" %>\n+<%@ page import=\"org.silverpeas.core.util.logging.SilverLogger\" %>\n+<%@ page import=\"org.silverpeas.core.web.mvc.webcomponent.SilverpeasHttpServlet\" %>\n \n <%@ include file=\"import.jsp\" %>\n \n@@ -64,6 +68,19 @@ if (exception instanceof SilverpeasTrappedException) {\n   extraInfos = StringUtil.defaultStringIfNotDefined(ste.getExtraInfos(), null);\n   // Trace the exception\n   HomePageUtil.traceException(exception);\n+} else if (exception instanceof ForbiddenRuntimeException) {\n+  SilverLogger.getLogger(SilverpeasHttpServlet.class).error(exception.getMessage());\n+  response.sendError(HttpServletResponse.SC_FORBIDDEN, exception.getMessage());\n+  return;\n+} else if (exception instanceof WebApplicationException) {\n+  final WebApplicationException wae = (WebApplicationException) exception;\n+  if (wae.getResponse().getStatus() == HttpServletResponse.SC_FORBIDDEN) {\n+    SilverLogger.getLogger(SilverpeasHttpServlet.class).error(wae.getMessage());\n+  }\n+  if (!response.isCommitted()) {\n+    response.sendError(wae.getResponse().getStatus(), exception.getMessage());\n+  }\n+  return;\n } else {\n   // Trace the exception\n   HomePageUtil.traceException(toDisplayException);"
        },
        {
            "filename": "core-war/src/main/webapp/applicationIndexer/jsp/applicationIndexer.jsp",
            "diff": "@@ -36,7 +36,6 @@ response.setDateHeader (\"Expires\",-1); //prevents caching at the proxy server\n %>\n \n <%@ page import=\"org.silverpeas.core.admin.space.SpaceInstLight\"%>\n-<%@ page import=\"org.silverpeas.core.admin.user.constant.UserAccessLevel\"%>\n \n <%@ page import=\"org.silverpeas.core.util.LocalizationBundle\"%>\n <%@ page import=\"org.silverpeas.core.util.ResourceLocator\"%>\n@@ -49,6 +48,7 @@ response.setDateHeader (\"Expires\",-1); //prevents caching at the proxy server\n \n <%@ page errorPage=\"../../admin/jsp/errorpage.jsp\"%>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n+<%@ taglib uri=\"http://www.silverpeas.com/tld/silverFunctions\" prefix=\"silfn\" %>\n <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %>\n <%@ taglib uri=\"http://www.silverpeas.com/tld/viewGenerator\" prefix=\"view\"%>\n <%@ taglib prefix=\"fmy\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %>\n@@ -92,14 +92,13 @@ response.setDateHeader (\"Expires\",-1); //prevents caching at the proxy server\n   }\n %>\n \n+<c:set var=\"currentUser\" value=\"${silfn:currentUser()}\"/>\n+<c:if test=\"${currentUser == null or not currentUser.accessAdmin}\">\n+  <c:redirect url=\"/Login\"/>\n+</c:if>\n+\n <%\n final MainSessionController mainSessionCtrl = (MainSessionController) session.getAttribute(MainSessionController.MAIN_SESSION_CONTROLLER_ATT);\n-if (mainSessionCtrl == null || !UserAccessLevel.ADMINISTRATOR.equals(mainSessionCtrl.getUserAccessLevel())) {\n-    // No session controller in the request -> security exception\n-    String sessionTimeout = ResourceLocator.getGeneralSettingBundle().getString(\"sessionTimeout\");\n-    getServletConfig().getServletContext().getRequestDispatcher(sessionTimeout).forward(request, response);\n-    return;\n-}\n %>\n \n <c:set var=\"_userLanguage\" value=\"<%=mainSessionCtrl.getFavoriteLanguage()%>\" scope=\"request\"/>"
        },
        {
            "filename": "core-war/src/main/webapp/silverpeasinfos.jsp",
            "diff": "@@ -55,8 +55,8 @@\n <%@ taglib uri=\"http://www.silverpeas.com/tld/viewGenerator\" prefix=\"view\" %>\n \n <c:set var=\"currentUser\" value=\"${silfn:currentUser()}\"/>\n-<c:if test=\"${currentUser == null or !currentUser.accessAdmin}\">\n-  <c:redirect url=\"/Login.jsp\"/>\n+<c:if test=\"${currentUser == null or not currentUser.accessAdmin}\">\n+  <c:redirect url=\"/Login\"/>\n </c:if>\n \n <html>"
        },
        {
            "filename": "core-war/src/test/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionControllerAccessGrantedTest.java",
            "diff": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright (C) 2000 - 2023 Silverpeas\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * As a special exception to the terms and conditions of version 3.0 of\n+ * the GPL, you may redistribute this Program in connection with Free/Libre\n+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's\n+ * FLOSS exception.  You should have received a copy of the text describing\n+ * the FLOSS exception, and it is also available here:\n+ * \"https://www.silverpeas.org/legal/floss_exception.html\"\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+package org.silverpeas.web.jobdomain.control;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+import org.mockito.stubbing.Answer;\n+import org.silverpeas.core.admin.domain.model.Domain;\n+import org.silverpeas.core.admin.service.OrganizationController;\n+import org.silverpeas.core.admin.user.model.Group;\n+import org.silverpeas.core.admin.user.model.UserDetail;\n+import org.silverpeas.core.admin.user.service.UserProvider;\n+import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;\n+import org.silverpeas.core.test.extention.EnableSilverTestEnv;\n+import org.silverpeas.core.test.extention.TestManagedMock;\n+import org.silverpeas.core.test.extention.TestedBean;\n+import org.silverpeas.core.util.StringUtil;\n+import org.silverpeas.core.web.mvc.controller.ComponentContext;\n+\n+import java.util.List;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.silverpeas.core.admin.domain.model.Domain.MIXED_DOMAIN_ID;\n+import static org.silverpeas.core.admin.user.constant.UserAccessLevel.USER;\n+\n+/**\n+ * @author silveryocha\n+ */\n+@EnableSilverTestEnv\n+class JobDomainPeasSessionControllerAccessGrantedTest {\n+\n+  private static final String LOGGED_USER_DOMAIN_ID = \"26\";\n+  private static final String OTHER_DOMAIN_ID = \"38\";\n+  private static final String USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID = \"7\";\n+  private static final String USER_ID_ON_OTHER_DOMAIN = \"8\";\n+  private static final String USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE = \"9\";\n+  private static final String GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID = LOGGED_USER_DOMAIN_ID;\n+  private static final String GROUP_ID_ON_OTHER_DOMAIN = OTHER_DOMAIN_ID;\n+  private static final String GROUP_ID_ON_MIXED_DOMAIN = USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID;\n+\n+  @TestManagedMock\n+  private Domain rightDomain;\n+\n+  @TestManagedMock\n+  private Domain wrongDomain;\n+\n+  @TestedBean\n+  private JobDomainPeasSessionController4Test controller;\n+\n+  @BeforeEach\n+  void setup(@TestManagedMock OrganizationController orgaController,\n+      @TestManagedMock UserProvider userProvider) {\n+    when(rightDomain.getId()).thenReturn(LOGGED_USER_DOMAIN_ID);\n+    when(wrongDomain.getId()).thenReturn(OTHER_DOMAIN_ID);\n+    controller.setupDefaultLoggedUser();\n+    final Answer<Object> getUserAnswer = i -> {\n+      final String id = i.getArgument(0);\n+      final UserDetail user = mock(UserDetail.class);\n+      when(user.getId()).thenReturn(id);\n+      when(user.getDomainId()).thenAnswer(a -> {\n+        switch (id) {\n+          case USER_ID_ON_OTHER_DOMAIN:\n+            return OTHER_DOMAIN_ID;\n+          case USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE:\n+            return MIXED_DOMAIN_ID;\n+          default:\n+            return LOGGED_USER_DOMAIN_ID;\n+        }\n+      });\n+      return user;\n+    };\n+    when(userProvider.getUser(anyString())).thenAnswer(getUserAnswer);\n+    when(orgaController.getUserDetail(anyString())).thenAnswer(getUserAnswer);\n+    when(orgaController.getGroup(anyString())).thenAnswer(i -> {\n+      final String id = i.getArgument(0);\n+      final int index = id.indexOf(\"_\");\n+      final String topLevelGroupId = index > 0 ? id.substring(0, index) : id;\n+      final Group group = mock(Group.class);\n+      when(group.getId()).thenReturn(id);\n+      when(group.getDomainId()).thenAnswer(a -> {\n+        switch (topLevelGroupId) {\n+          case GROUP_ID_ON_OTHER_DOMAIN:\n+            return OTHER_DOMAIN_ID;\n+          case GROUP_ID_ON_MIXED_DOMAIN:\n+            return MIXED_DOMAIN_ID;\n+          default:\n+            return LOGGED_USER_DOMAIN_ID;\n+        }\n+      });\n+      if (index > 0) {\n+        when(group.getSuperGroupId()).thenReturn(topLevelGroupId);\n+      }\n+      return group;\n+    });\n+    when(orgaController.getPathToGroup(anyString())).thenAnswer(i -> {\n+      final String id = i.getArgument(0);\n+      final int index = id.indexOf(\"_\");\n+      if (index > 0) {\n+        return List.of(id.substring(0, index));\n+      } else {\n+        return List.of();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * DOMAIN\n+   */\n+\n+  @DisplayName(\"User with admin access level has always granted access to a domain\")\n+  @Test\n+  void adminDomainAccessGranted() {\n+    when(controller.getUserDetail().isAccessAdmin()).thenReturn(true);\n+    controller.checkDomainAccessGranted(MIXED_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false);\n+    controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false);\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false);\n+  }\n+\n+  @DisplayName(\"User with user access level has never granted access to a domain\")\n+  @Test\n+  void simpleUserDomainAccessNotGranted() {\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+  }\n+\n+  @DisplayName(\"User with domain access level, without managed group, has granted access if \" +\n+      \"accessed domain corresponds to its domain\")\n+  @Test\n+  void domainAdminUserDomainAccess() {\n+    when(controller.getUserDetail().isAccessDomainManager()).thenReturn(true);\n+    assertDomainAdminUserDomainAccess();\n+    when(controller.getUserDetail().isDomainAdminRestricted()).thenReturn(true);\n+    assertDomainAdminUserDomainAccess();\n+  }\n+\n+  private void assertDomainAdminUserDomainAccess() {\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+  }\n+\n+  @DisplayName(\"User with domain access level, and with managed groups, has granted access if \" +\n+      \"accessed domain does not correspond to its domain\")\n+  @Test\n+  void domainAdminUserDomainAccessWithManageableGroups() {\n+    when(controller.getUserDetail().isAccessDomainManager()).thenReturn(true);\n+    when(controller.getUserDetail().getDomainId()).thenReturn(OTHER_DOMAIN_ID);\n+    assertDomainAdminUserDomainAccessWithManageableGroups(false);\n+    when(controller.getUserDetail().isDomainAdminRestricted()).thenReturn(true);\n+    assertDomainAdminUserDomainAccessWithManageableGroups(true);\n+  }\n+\n+  private void assertDomainAdminUserDomainAccessWithManageableGroups(boolean domainRestricted) {\n+    controller.setManageableGroupIds();\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false);\n+    // setting now the managed groups on mixed domain\n+    controller.setManageableGroupIds(MIXED_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(MIXED_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false);\n+    // setting now the managed groups on same domain of LOGGED user domain\n+    controller.setManageableGroupIds(LOGGED_USER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    if (domainRestricted) {\n+      assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    } else {\n+      controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID);\n+    }\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false);\n+    // setting now the managed groups on other domain than the one of LOGGED user domain\n+    controller.setManageableGroupIds(OTHER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false);\n+  }\n+\n+  @DisplayName(\"User with user access level, and with managed groups, has granted access if \" +\n+      \"accessed domain does not correspond to its domain\")\n+  @Test\n+  void simpleUserDomainAccessWithManageableGroups() {\n+    when(controller.getUserDetail().getDomainId()).thenReturn(OTHER_DOMAIN_ID);\n+    assertSimpleUserDomainAccessWithManageableGroups(false);\n+    when(controller.getUserDetail().isDomainAdminRestricted()).thenReturn(true);\n+    assertSimpleUserDomainAccessWithManageableGroups(true);\n+  }\n+\n+  private void assertSimpleUserDomainAccessWithManageableGroups(boolean domainRestricted) {\n+    controller.setManageableGroupIds();\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+    // setting now the managed groups on mixed domain\n+    controller.setManageableGroupIds(MIXED_DOMAIN_ID);\n+    controller.checkDomainAccessGranted(MIXED_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+    // setting now the managed groups on same domain of LOGGED user domain\n+    controller.setManageableGroupIds(LOGGED_USER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    if (domainRestricted) {\n+      assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    } else {\n+      controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID);\n+    }\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+    // setting now the managed groups on other domain than the one of LOGGED user domain\n+    controller.setManageableGroupIds(OTHER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(OTHER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+  }\n+\n+  @DisplayName(\"User with user access level, without managed groups and with space management \" +\n+      \"right, has granted access in read only mode\")\n+  @Test\n+  void simpleUserDomainAccessWhenSpaceManager() {\n+    controller.setManageableSpaceIds();\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+    controller.setManageableSpaceIds(\"3\");\n+    controller.checkDomainAccessGranted(MIXED_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+  }\n+\n+  @DisplayName(\"User with user access level, without managed groups and community manager \" +\n+      \"right, has granted access in read only mode\")\n+  @Test\n+  void simpleUserDomainAccessWhenCommunityManager() {\n+    controller.setCommunityManager(true);\n+    controller.checkDomainAccessGranted(MIXED_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(MIXED_DOMAIN_ID, false));\n+    controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkDomainAccessGranted(LOGGED_USER_DOMAIN_ID, false));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID));\n+    assertForbidden(() -> controller.checkDomainAccessGranted(OTHER_DOMAIN_ID, false));\n+  }\n+\n+  /**\n+   * USER\n+   */\n+\n+  @DisplayName(\"When admin modifying a user, domain access in write mode is verified and \" +\n+      \"target domain MUST be set to the right domain\")\n+  @Test\n+  void adminUserAccessGranted() {\n+    controller.setManageableGroupIds(GROUP_ID_ON_MIXED_DOMAIN, GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID,\n+        GROUP_ID_ON_OTHER_DOMAIN);\n+    assertAdminUserAccessGranted();\n+    controller.setManageableSpaceIds(\"3\");\n+    assertAdminUserAccessGranted();\n+  }\n+\n+  private void assertAdminUserAccessGranted() {\n+    controller.setTargetDomain(null);\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, false));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, false));\n+    // target domain is the mixed one\n+    controller.setTargetDomain(MIXED_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, false));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, false));\n+    // target domain is the one of the admin\n+    controller.setTargetDomain(LOGGED_USER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, false));\n+    controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true);\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, false));\n+    // target domain is not the one of the admin\n+    controller.setTargetDomain(OTHER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_MIXED_DOMAIN_EVEN_IF_NOT_POSSIBLE, false));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true));\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false));\n+    controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, true);\n+    assertForbidden(() -> controller.checkUserAccessGranted(USER_ID_ON_OTHER_DOMAIN, false));\n+  }\n+\n+  /**\n+   * GROUP\n+   */\n+\n+  @DisplayName(\"When admin modifying a group, domain access in write mode is verified and \" +\n+      \"target domain MUST be set to the right domain\")\n+  @Test\n+  void adminGroupAccessGranted() {\n+    controller.setManageableGroupIds(GROUP_ID_ON_MIXED_DOMAIN, GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID,\n+        GROUP_ID_ON_OTHER_DOMAIN);\n+    assertAdminGroupAccessGranted();\n+    controller.setManageableSpaceIds(\"4\");\n+    assertAdminUserAccessGranted();\n+  }\n+\n+  private void assertAdminGroupAccessGranted() {\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, false));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, false));\n+    // target domain is the mixed one\n+    controller.setTargetDomain(MIXED_DOMAIN_ID);\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, true);\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, false);\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, false));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN + \"_sub\", true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN + \"_sub\", false));\n+    // target domain is the one of the admin\n+    controller.setTargetDomain(LOGGED_USER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, false));\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true);\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false);\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, false));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN + \"_sub\", true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN + \"_sub\", false));\n+    // target domain is not the one of the admin\n+    controller.setTargetDomain(OTHER_DOMAIN_ID);\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_MIXED_DOMAIN, false));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, true));\n+    assertForbidden(() -> controller.checkGroupAccessGranted(GROUP_ID_ON_DOMAIN_OF_LOGGED_USER_ID, false));\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, true);\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN, false);\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN + \"_sub\", true);\n+    controller.checkGroupAccessGranted(GROUP_ID_ON_OTHER_DOMAIN + \"_sub\", false);\n+  }\n+\n+  private void assertForbidden(final Executable executable) {\n+    assertThrows(ForbiddenRuntimeException.class, executable);\n+  }\n+\n+  private static class JobDomainPeasSessionController4Test extends JobDomainPeasSessionController {\n+    private static final long serialVersionUID = -2464677549792058075L;\n+\n+    private final UserDetail loggedUser = mock(UserDetail.class);\n+    private boolean communityManager = false;\n+    private String[] manageableSpaceIds = new String[]{};\n+    private List<String> manageableGroupIds = List.of();\n+    private Domain targetDomain = null;\n+\n+    public JobDomainPeasSessionController4Test() {\n+      super(null, mockedContext(), null, null, null);\n+    }\n+\n+    private static ComponentContext mockedContext() {\n+      final ComponentContext mock = mock(ComponentContext.class);\n+      when(mock.getCurrentComponentName()).thenReturn(\"unknown\");\n+      return mock;\n+    }\n+\n+    private void setupDefaultLoggedUser() {\n+      when(loggedUser.getId()).thenReturn(\"2\");\n+      when(loggedUser.getDomainId()).thenReturn(LOGGED_USER_DOMAIN_ID);\n+      when(loggedUser.getAccessLevel()).thenReturn(USER);\n+    }\n+\n+    public void setCommunityManager(final boolean communityManager) {\n+      this.communityManager = communityManager;\n+    }\n+\n+    public void setManageableSpaceIds(String... spaceIds) {\n+      manageableSpaceIds = spaceIds;\n+    }\n+\n+    /**\n+     * Sets the manageable group identifiers.\n+     * <p>\n+     * IMPORTANT: the given identifier is used to set domain id too. So giving the identifier\n+     * of domain.\n+     * </p>\n+     * @param groupIds several identifiers.\n+     */\n+    public void setManageableGroupIds(String... groupIds) {\n+      manageableGroupIds = List.of(groupIds);\n+    }\n+\n+    @Override\n+    public void setTargetDomain(final String targetDomainId) {\n+      if (StringUtil.isDefined(targetDomainId)) {\n+        this.targetDomain = mock(Domain.class);\n+        when(this.targetDomain.getId()).thenReturn(targetDomainId);\n+      } else {\n+        this.targetDomain = null;\n+      }\n+    }\n+\n+    @Override\n+    public Domain getTargetDomain() {\n+      return targetDomain;\n+    }\n+\n+    @Override\n+    public boolean isCommunityManager() {\n+      return communityManager;\n+    }\n+\n+    @Override\n+    public UserDetail getUserDetail() {\n+      return loggedUser;\n+    }\n+\n+    @Override\n+    protected String[] getUserManageableSpaceIds() {\n+      return manageableSpaceIds;\n+    }\n+\n+    @Override\n+    protected List<String> getUserManageableGroupIds() {\n+      return manageableGroupIds;\n+    }\n+\n+    @Override\n+    public List<Group> getUserManageableGroups() {\n+      return manageableGroupIds.stream().map(i -> {\n+        Group group = mock(Group.class);\n+        when(group.getId()).thenReturn(i);\n+        when(group.getDomainId()).thenReturn(\n+            GROUP_ID_ON_MIXED_DOMAIN.equals(i) ? null : i);\n+        return group;\n+      }).collect(toList());\n+    }\n+  }\n+}\n\\ No newline at end of file"
        },
        {
            "filename": "core-war/src/test/java/org/silverpeas/web/jobstartpage/control/JobStartPagePeasSessionControllerTest.java",
            "diff": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright (C) 2000 - 2023 Silverpeas\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * As a special exception to the terms and conditions of version 3.0 of\n+ * the GPL, you may redistribute this Program in connection with Free/Libre\n+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's\n+ * FLOSS exception.  You should have received a copy of the text describing\n+ * the FLOSS exception, and it is also available here:\n+ * \"https://www.silverpeas.org/legal/floss_exception.html\"\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+package org.silverpeas.web.jobstartpage.control;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+import org.silverpeas.core.admin.component.model.SilverpeasComponentInstance;\n+import org.silverpeas.core.admin.service.OrganizationController;\n+import org.silverpeas.core.admin.space.SpaceInst;\n+import org.silverpeas.core.admin.space.SpaceInstLight;\n+import org.silverpeas.core.admin.user.model.UserDetail;\n+import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;\n+import org.silverpeas.core.test.extention.EnableSilverTestEnv;\n+import org.silverpeas.core.test.extention.TestManagedMock;\n+import org.silverpeas.core.test.extention.TestedBean;\n+import org.silverpeas.core.web.mvc.controller.ComponentContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.util.Optional.of;\n+import static java.util.Optional.ofNullable;\n+import static java.util.function.Predicate.not;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.silverpeas.core.admin.space.SpaceInst.SPACE_KEY_PREFIX;\n+import static org.silverpeas.core.admin.user.constant.UserAccessLevel.USER;\n+\n+/**\n+ * @author silveryocha\n+ */\n+@EnableSilverTestEnv\n+class JobStartPagePeasSessionControllerTest {\n+\n+  private static final String LOGGED_USER_DOMAIN_ID = \"26\";\n+\n+  private static final String SPACE_A = \"WA1\";\n+  private static final String SPACE_A_A1 = \"WA11\";\n+  private static final String SPACE_A_A1_A11 = \"WA111\";\n+  private static final String SPACE_A_A2 = \"WA12\";\n+  private static final String SPACE_B = \"WA2\";\n+  private static final List<String> ALL_SPACE_IDS = List.of(\n+      SPACE_A, SPACE_A_A1, SPACE_A_A1_A11, SPACE_A_A2,\n+      SPACE_B);\n+  private static final Map<String, String> SPACE_SPACE = Map.of(\n+      SPACE_A_A1, SPACE_A,\n+      SPACE_A_A1_A11, SPACE_A_A1,\n+      SPACE_A_A2, SPACE_A);\n+\n+  private static final String INSTANCE_AA = \"kmelia1\";\n+  private static final String INSTANCE_A_A1A = \"kmelia11\";\n+  private static final String INSTANCE_A_A1B = \"kmelia12\";\n+  private static final String INSTANCE_A_A1_A11A = \"kmelia111\";\n+  private static final String INSTANCE_BA = \"kmelia2\";\n+  private static final List<String> ALL_INSTANCE_IDS = List.of(\n+      INSTANCE_AA, INSTANCE_A_A1A, INSTANCE_A_A1B, INSTANCE_A_A1_A11A,\n+      INSTANCE_BA);\n+  private static final Map<String, String> INSTANCE_SPACE = Map.of(\n+      INSTANCE_AA, SPACE_A,\n+      INSTANCE_A_A1A, SPACE_A_A1,\n+      INSTANCE_A_A1B, SPACE_A_A1,\n+      INSTANCE_A_A1_A11A, SPACE_A_A1_A11,\n+      INSTANCE_BA, SPACE_B);\n+\n+  @TestedBean\n+  private JobStartPagePeasSessionController4Test controller;\n+\n+  @BeforeEach\n+  void setup(@TestManagedMock OrganizationController orgaController) {\n+    when(orgaController.getSpaceInstById(anyString())).thenAnswer(i -> {\n+      final String id = i.getArgument(0);\n+      final SpaceInst space = mock(SpaceInst.class);\n+      when(space.getId()).thenReturn(id);\n+      when(space.getLocalId()).thenReturn(parseInt(id.substring(SPACE_KEY_PREFIX.length())));\n+      ofNullable(SPACE_SPACE.get(id)).ifPresentOrElse(\n+          p -> when(space.getDomainFatherId()).thenReturn(p),\n+          () -> when(space.isRoot()).thenReturn(true));\n+      return space;\n+    });\n+    when(orgaController.getSpaceInstLightById(anyString())).thenAnswer(i -> {\n+      final String id = i.getArgument(0);\n+      final SpaceInstLight space = mock(SpaceInstLight.class);\n+      when(space.getId()).thenReturn(id);\n+      when(space.getLocalId()).thenReturn(parseInt(id.substring(SPACE_KEY_PREFIX.length())));\n+      ofNullable(SPACE_SPACE.get(id)).ifPresentOrElse(\n+          p -> when(space.getFatherId()).thenReturn(p),\n+          () -> when(space.isRoot()).thenReturn(true));\n+      return space;\n+    });\n+    when(orgaController.getComponentInstance(anyString())).thenAnswer(i -> {\n+      final String id = i.getArgument(0);\n+      final SilverpeasComponentInstance instance = mock(SilverpeasComponentInstance.class);\n+      when(instance.getId()).thenReturn(id);\n+      ofNullable(INSTANCE_SPACE.get(id)).ifPresent(p -> when(instance.getSpaceId()).thenReturn(p));\n+      return of(instance);\n+    });\n+    when(orgaController.getPathToSpace(anyString())).thenAnswer(i -> {\n+      final String id = i.getArgument(0, String.class);\n+      List<SpaceInstLight> path = new ArrayList<>();\n+      SpaceInstLight spaceInst = orgaController.getSpaceInstLightById(id);\n+      if (spaceInst != null) {\n+        if (!spaceInst.isRoot()) {\n+          path.addAll(orgaController.getPathToSpace(spaceInst.getFatherId()));\n+        }\n+        path.add(0, spaceInst);\n+      }\n+      return path;\n+    });\n+  }\n+\n+  @DisplayName(\"User with admin access level has always granted access to spaces and component \" +\n+      \"instances, even if space and instance ids does not exist\")\n+  @Test\n+  void adminOfSpaceAndInstanceAccessGranted() {\n+    when(controller.getUserDetail().isAccessAdmin()).thenReturn(true);\n+    Stream.concat(Stream.of((String) null), ALL_SPACE_IDS.stream())\n+        .forEach(s -> Stream.concat(Stream.of((String) null), ALL_INSTANCE_IDS.stream())\n+            .forEach(i -> {\n+              controller.checkAccessGranted(s, i, true);\n+              controller.checkAccessGranted(s, i, false);\n+            }));\n+  }\n+\n+  @DisplayName(\n+      \"User with user access level has never granted access to spaces and component instances\")\n+  @Test\n+  void simpleUserOfSpaceAndInstanceAccessNotGranted() {\n+    Stream.concat(Stream.of((String) null), ALL_SPACE_IDS.stream())\n+        .forEach(s -> Stream.concat(Stream.of((String) null), ALL_INSTANCE_IDS.stream())\n+            .forEach(i -> {\n+              assertForbidden(() -> controller.checkAccessGranted(s, i, true));\n+              assertForbidden(() -> controller.checkAccessGranted(s, i, false));\n+            }));\n+  }\n+\n+  @DisplayName(\"Manager has granted access to aimed spaces\")\n+  @Test\n+  void managerOfSpaceAccessGranted() {\n+    // ON SPACE A\n+    controller.setManageableSpaceIds(SPACE_A);\n+    controller.checkAccessGranted(null, null, true);\n+    assertForbidden(() -> controller.checkAccessGranted(null, null, false));\n+    controller.checkAccessGranted(SPACE_A, null, true);\n+    controller.checkAccessGranted(SPACE_A, null, false);\n+    controller.checkAccessGranted(SPACE_A_A1, null, true);\n+    controller.checkAccessGranted(SPACE_A_A1, null, false);\n+    controller.checkAccessGranted(SPACE_A_A1_A11, null, true);\n+    controller.checkAccessGranted(SPACE_A_A1_A11, null, false);\n+    controller.checkAccessGranted(SPACE_A_A2, null, true);\n+    controller.checkAccessGranted(SPACE_A_A2, null, false);\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_B, null, true));\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_B, null, false));\n+    // ON SPACE A_A1\n+    controller.setManageableSpaceIds(SPACE_A_A1);\n+    controller.checkAccessGranted(null, null, true);\n+    assertForbidden(() -> controller.checkAccessGranted(null, null, false));\n+    controller.checkAccessGranted(SPACE_A, null, true);\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_A, null, false));\n+    controller.checkAccessGranted(SPACE_A_A1, null, true);\n+    controller.checkAccessGranted(SPACE_A_A1, null, false);\n+    controller.checkAccessGranted(SPACE_A_A1_A11, null, true);\n+    controller.checkAccessGranted(SPACE_A_A1_A11, null, false);\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_A_A2, null, true));\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_A_A2, null, false));\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_B, null, true));\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_B, null, false));\n+  }\n+\n+  @DisplayName(\"Manager has granted access to aimed components\")\n+  @Test\n+  void managerOfSpaceComponentAccessGranted() {\n+    // ON SPACE A\n+    controller.setManageableSpaceIds(SPACE_A);\n+    controller.checkAccessGranted(null, null, true);\n+    assertForbidden(() -> controller.checkAccessGranted(null, null, false));\n+    controller.checkAccessGranted(null, INSTANCE_AA, true);\n+    controller.checkAccessGranted(null, INSTANCE_AA, false);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1A, true);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1A, false);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1_A11A, true);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1_A11A, false);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1B, true);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1B, false);\n+    assertForbidden(() -> controller.checkAccessGranted(null, INSTANCE_BA, true));\n+    assertForbidden(() -> controller.checkAccessGranted(null, INSTANCE_BA, false));\n+    // ON SPACE A_A1\n+    controller.setManageableSpaceIds(SPACE_A_A1);\n+    controller.checkAccessGranted(null, null, true);\n+    assertForbidden(() -> controller.checkAccessGranted(null, null, false));\n+    assertForbidden(() -> controller.checkAccessGranted(null, INSTANCE_AA, true));\n+    assertForbidden(() -> controller.checkAccessGranted(null, INSTANCE_AA, false));\n+    controller.checkAccessGranted(null, INSTANCE_A_A1A, true);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1A, false);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1_A11A, true);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1_A11A, false);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1B, true);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1B, false);\n+    assertForbidden(() -> controller.checkAccessGranted(null, INSTANCE_BA, true));\n+    assertForbidden(() -> controller.checkAccessGranted(null, INSTANCE_BA, false));\n+  }\n+\n+  @DisplayName(\"Manager has granted access if space and instance ids can be accessed\")\n+  @Test\n+  void managerOfSpaceAndComponentAccessGranted() {\n+    // ON SPACE A\n+    controller.setManageableSpaceIds(SPACE_A);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1A, false);\n+    controller.checkAccessGranted(SPACE_A, INSTANCE_A_A1_A11A, false);\n+    controller.checkAccessGranted(SPACE_A, INSTANCE_A_A1B, false);\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_A, INSTANCE_BA, false));\n+    // ON SPACE A_A1\n+    controller.setManageableSpaceIds(SPACE_A_A1);\n+    controller.checkAccessGranted(null, INSTANCE_A_A1A, false);\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_A, INSTANCE_A_A1_A11A, false));\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_A, INSTANCE_A_A1B, false));\n+    assertForbidden(() -> controller.checkAccessGranted(SPACE_A, INSTANCE_BA, false));\n+  }\n+\n+  private void assertForbidden(final Executable executable) {\n+    assertThrows(ForbiddenRuntimeException.class, executable);\n+  }\n+\n+  private static class JobStartPagePeasSessionController4Test\n+      extends JobStartPagePeasSessionController {\n+    private static final long serialVersionUID = 101781645406476047L;\n+\n+    private final UserDetail loggedUser = mock(UserDetail.class);\n+    private String[] manageableSpaceIds = new String[]{};\n+\n+    public JobStartPagePeasSessionController4Test() {\n+      super(null, mockedContext(), null, null, null);\n+    }\n+\n+    private static ComponentContext mockedContext() {\n+      final ComponentContext mock = mock(ComponentContext.class);\n+      when(mock.getCurrentComponentName()).thenReturn(\"unknown\");\n+      return mock;\n+    }\n+\n+    private void setupDefaultLoggedUser() {\n+      when(loggedUser.getId()).thenReturn(\"2\");\n+      when(loggedUser.getDomainId()).thenReturn(LOGGED_USER_DOMAIN_ID);\n+      when(loggedUser.getAccessLevel()).thenReturn(USER);\n+    }\n+\n+    public void setManageableSpaceIds(String... spaceIds) {\n+      final List<String> allIds = new ArrayList<>();\n+      List<String> currents = List.of(spaceIds);\n+      while (!currents.isEmpty()) {\n+        allIds.addAll(currents);\n+        currents = SPACE_SPACE.entrySet()\n+            .stream()\n+            .filter(e -> allIds.contains(e.getValue()))\n+            .map(Map.Entry::getKey)\n+            .filter(not(allIds::contains))\n+            .collect(Collectors.toList());\n+      }\n+      manageableSpaceIds = allIds.toArray(new String[0]);\n+    }\n+\n+    @Override\n+    public UserDetail getUserDetail() {\n+      return loggedUser;\n+    }\n+\n+    @Override\n+    protected String[] getUserManageableSpaceIds() {\n+      return manageableSpaceIds;\n+    }\n+  }\n+}\n\\ No newline at end of file"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/web/filter/MassiveWebSecurityFilter.java",
            "diff": "@@ -54,6 +54,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import static java.util.Optional.ofNullable;\n import static org.silverpeas.core.util.URLUtil.getCurrentServerURL;\n \n /**\n@@ -136,8 +137,8 @@ public void doFilter(final ServletRequest request, final ServletResponse respons\n \n     } catch (WebSecurityException wse) {\n \n-      logger.error(\"The request for path {0} isn''t valid: {1}\", pathOf(httpRequest),\n-          wse.getMessage());\n+      logger.error(\"The request for path {0} (uid={1}) isn''t valid: {2}\", pathOf(httpRequest),\n+          ofNullable(User.getCurrentRequester()).map(User::getId).orElse(\"N/A\"), wse.getMessage());\n \n       // An HTTP error is sended to the client\n       httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, wse.getMessage());"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/web/mvc/controller/AbstractAdminComponentSessionController.java",
            "diff": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (C) 2000 - 2023 Silverpeas\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * As a special exception to the terms and conditions of version 3.0 of\n+ * the GPL, you may redistribute this Program in connection with Free/Libre\n+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's\n+ * FLOSS exception.  You should have received a copy of the text describing\n+ * the FLOSS exception, and it is also available here:\n+ * \"https://www.silverpeas.org/legal/floss_exception.html\"\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+package org.silverpeas.core.web.mvc.controller;\n+\n+import org.silverpeas.core.admin.component.model.SilverpeasComponentInstance;\n+import org.silverpeas.core.admin.space.SpaceInst;\n+import org.silverpeas.core.admin.space.SpaceInstLight;\n+import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;\n+import org.silverpeas.core.util.StringUtil;\n+import org.silverpeas.core.web.mvc.route.AdminComponentRequestRouter;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import static java.util.Optional.ofNullable;\n+import static java.util.function.Predicate.not;\n+import static java.util.stream.Collectors.toSet;\n+import static java.util.stream.Stream.of;\n+import static org.silverpeas.core.util.StringUtil.isDefined;\n+\n+/**\n+ * This abstraction centralizes common processes dedicated to several\n+ * {@link AbstractComponentSessionController} implementations in charge of the management of\n+ * administration services.\n+ * <p>\n+ *   To be fully functional, an implementation of this abstraction MUST be used with an\n+ *   {@link AdminComponentRequestRouter} implementation.\n+ * </p>\n+ * @author silveryocha\n+ */\n+public abstract class AbstractAdminComponentSessionController\n+    extends AbstractComponentSessionController {\n+  private static final long serialVersionUID = 866731879572404115L;\n+\n+  public AbstractAdminComponentSessionController(final MainSessionController controller,\n+      final ComponentContext context, final String localizedMessagesBundleName) {\n+    super(controller, context, localizedMessagesBundleName);\n+  }\n+\n+  public AbstractAdminComponentSessionController(final MainSessionController controller,\n+      final ComponentContext context, final String localizedMessagesBundleName,\n+      final String iconFileName) {\n+    super(controller, context, localizedMessagesBundleName, iconFileName);\n+  }\n+\n+  public AbstractAdminComponentSessionController(final MainSessionController controller,\n+      final ComponentContext context, final String localizedMessagesBundleName,\n+      final String iconFileName, final String settingsFileName) {\n+    super(controller, context, localizedMessagesBundleName, iconFileName, settingsFileName);\n+  }\n+\n+  @Override\n+  public void setAppModeMaintenance(final boolean mode) {\n+    checkAdminAccessOnly();\n+    super.setAppModeMaintenance(mode);\n+  }\n+\n+  @Override\n+  public void setSpaceModeMaintenance(final String spaceId, final boolean mode) {\n+    if (isDefined(spaceId)) {\n+      checkAccessGranted(spaceId, null, false);\n+    } else {\n+      throwForbiddenError();\n+    }\n+    super.setSpaceModeMaintenance(spaceId, mode);\n+  }\n+\n+  public boolean isUserAdmin() {\n+    return getUserDetail().isAccessAdmin();\n+  }\n+\n+  /**\n+   * Checks the user has full admin access.\n+   */\n+  public void checkAdminAccessOnly() {\n+    if (!isUserAdmin()) {\n+      throwForbiddenError();\n+    }\n+  }\n+\n+  /**\n+   * Used mainly by {@link #checkAccessGranted()}.\n+   * <p>\n+   *   Each implementation can precise or change this default implementation.\n+   * </p>\n+   * @return true if access granted, false otherwise.\n+   */\n+  public boolean isAccessGranted() {\n+    return isUserAdmin();\n+  }\n+\n+  /**\n+   * This method is invoked at each administration service access.\n+   * @throws ForbiddenRuntimeException in case the user has forbidden access.\n+   */\n+  public void checkAccessGranted() {\n+    if (!isAccessGranted()) {\n+      throwForbiddenError();\n+    }\n+  }\n+\n+  /**\n+   * Indicates if the user can access administration about a space or a component instance.\n+   * <p>\n+   *   Whatever the parameters, user having admin access right on its account is always access\n+   *   granted.\n+   * </p>\n+   * <p>\n+   *   If both space id and instance id are given, they are both verified.\n+   * </p>\n+   * <p>\n+   *   If neither space if neither instance id are given, it is verified that current user is a\n+   *   space manager.\n+   * </p>\n+   * @param spaceId the optional identifier of a space.\n+   * @param instanceId the optional identifier of a component instance.\n+   * @param readOnly true if the operation is read only, false otherwise.\n+   * @return true if access granted, false otherwise.\n+   */\n+  public boolean isAccessGranted(final String spaceId, final String instanceId,\n+      final boolean readOnly)\n+      throws ForbiddenRuntimeException {\n+    boolean accessGranted = getUserDetail().isAccessAdmin();\n+    if (!accessGranted) {\n+      final String[] userManageableSpaceIds = getUserManageableSpaceIds();\n+      accessGranted = userManageableSpaceIds.length > 0 &&\n+          (readOnly || isDefined(spaceId) || isDefined(instanceId));\n+      if (accessGranted) {\n+        final Set<String> userManageableSpaceIdSet = of(userManageableSpaceIds).collect(toSet());\n+        if (isDefined(instanceId)) {\n+          accessGranted = getOrganisationController().getComponentInstance(instanceId)\n+              .map(SilverpeasComponentInstance::getSpaceId)\n+              .map(userManageableSpaceIdSet::contains)\n+              .orElse(false);\n+        }\n+        if (accessGranted && isDefined(spaceId)) {\n+          accessGranted = ofNullable(getOrganisationController().getSpaceInstById(spaceId))\n+              .map(SpaceInst::getId)\n+              .map(s -> userManageableSpaceIdSet.contains(s) ||\n+                  (readOnly && of(userManageableSpaceIds)\n+                      .map(getOrganisationController()::getSpaceInstById)\n+                      .filter(Objects::nonNull)\n+                      .map(SpaceInst::getDomainFatherId)\n+                      .filter(StringUtil::isDefined)\n+                      .filter(not(userManageableSpaceIdSet::contains))\n+                      .flatMap(m -> getOrganisationController().getPathToSpace(m).stream())\n+                      .map(SpaceInstLight::getId)\n+                      .anyMatch(s::equals)))\n+              .orElse(false);\n+        }\n+      }\n+    }\n+    return accessGranted;\n+  }\n+\n+  /**\n+   * Checks the user can access administration about a space or a component instance.\n+   * <p>\n+   *   Whatever the parameters, user having admin access right on its account is always access\n+   *   granted.\n+   * </p>\n+   * <p>\n+   *   If both space id and instance id are given, they are both verified.\n+   * </p>\n+   * <p>\n+   *   If neither space if neither instance id are given, it is verified that current user is a\n+   *   space manager.\n+   * </p>\n+   * @param spaceId the optional identifier of a space.\n+   * @param instanceId the optional identifier of a component instance.\n+   * @param readOnly true if the operation is read only, false otherwise.\n+   * @throws ForbiddenRuntimeException in case the user has forbidden access.\n+   */\n+  public void checkAccessGranted(final String spaceId, final String instanceId,\n+      final boolean readOnly)\n+      throws ForbiddenRuntimeException {\n+    if (!isAccessGranted(spaceId, instanceId, readOnly)) {\n+      throwForbiddenError();\n+    }\n+  }\n+\n+  protected void throwForbiddenError() {\n+    throw new ForbiddenRuntimeException(\n+        String.format(\"Forbidden admin access to user with id %s\", getUserId()));\n+  }\n+}"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/web/mvc/route/AdminComponentRequestRouter.java",
            "diff": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (C) 2000 - 2023 Silverpeas\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * As a special exception to the terms and conditions of version 3.0 of\n+ * the GPL, you may redistribute this Program in connection with Free/Libre\n+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's\n+ * FLOSS exception.  You should have received a copy of the text describing\n+ * the FLOSS exception, and it is also available here:\n+ * \"https://www.silverpeas.org/legal/floss_exception.html\"\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+package org.silverpeas.core.web.mvc.route;\n+\n+import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;\n+import org.silverpeas.core.util.Mutable;\n+import org.silverpeas.core.util.StringUtil;\n+import org.silverpeas.core.web.http.HttpRequest;\n+import org.silverpeas.core.web.mvc.controller.AbstractAdminComponentSessionController;\n+\n+import static java.util.Optional.ofNullable;\n+\n+/**\n+ * This abstraction is dedicated to administration implementations of\n+ * {@link ComponentRequestRouter}.\n+ * <p>\n+ * It mainly centralizes useful common processes for administration context, as the management of\n+ * forbidden access.\n+ * </p>\n+ * @author silveryocha\n+ */\n+public abstract class AdminComponentRequestRouter<T extends AbstractAdminComponentSessionController>\n+    extends ComponentRequestRouter<T> {\n+  private static final long serialVersionUID = -1845547120139170876L;\n+\n+  /**\n+   * This method has to be implemented by the admin component request Router it has to compute a\n+   * destination page\n+   * @param function The entering request function (ex : \"Main.jsp\", when accessing\n+   * \"/RjobManager/jsp/Main.jsp\")\n+   * @param componentSC The component Session Controller, build and initialised.\n+   * @param request The entering request. The request Router need it to get parameters\n+   * @return The complete destination URL for a forward (ex :\n+   * \"/RjobManager/jsp/Main.jsp?flag=read\")\n+   */\n+  public abstract String getAdminDestination(String function, T componentSC, HttpRequest request);\n+\n+  @Override\n+  public String getDestination(final String function, final T componentSC,\n+      final HttpRequest request) {\n+    String destination = StringUtil.EMPTY;\n+    final Mutable<ForbiddenRuntimeException> forbidden = Mutable.empty();\n+    try {\n+      componentSC.checkAccessGranted();\n+      try {\n+        destination = getAdminDestination(function, componentSC, request);\n+      } finally {\n+        ofNullable(request.getAttribute(\"javax.servlet.jsp.jspException\"))\n+            .filter(ForbiddenRuntimeException.class::isInstance)\n+            .map(ForbiddenRuntimeException.class::cast)\n+            .stream()\n+            .forEach(forbidden::set);\n+      }\n+    } catch (final ForbiddenRuntimeException e) {\n+      forbidden.set(e);\n+    }\n+    if (forbidden.isPresent()) {\n+      throwHttpForbiddenError(forbidden.get().getMessage());\n+    }\n+    return destination;\n+  }\n+}"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/SilverpeasHttpServlet.java",
            "diff": "@@ -58,7 +58,14 @@ protected void service(final HttpServletRequest request, final HttpServletRespon\n       super.service(request, response);\n \n     } catch (HttpError httpError) {\n-      SilverLogger.getLogger(this).debug(\"http error \" + httpError.errorCode, httpError);\n+      final String msg = String.format(\"http error %s [%s] -> %s\", httpError.errorCode,\n+          request.getRequestURI(), httpError.message);\n+      final SilverLogger logger = SilverLogger.getLogger(this);\n+      if (HttpServletResponse.SC_FORBIDDEN == httpError.errorCode) {\n+        logger.error(msg);\n+      } else {\n+        logger.debug(msg);\n+      }\n       httpError.performResponse(response);\n     }\n   }"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/webapi/security/CipherKeyResource.java",
            "diff": "@@ -32,6 +32,7 @@\n import org.silverpeas.core.util.LocalizationBundle;\n import org.silverpeas.core.util.ResourceLocator;\n import org.silverpeas.core.web.rs.RESTWebService;\n+import org.silverpeas.core.web.rs.UserPrivilegeValidation;\n import org.silverpeas.core.web.rs.annotation.Authorized;\n \n import javax.inject.Inject;\n@@ -40,6 +41,7 @@\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n@@ -121,6 +123,13 @@ private ContentEncryptionService getContentEncryptionService() {\n     return contentEncryptionService;\n   }\n \n+  @Override\n+  public void validateUserAuthorization(final UserPrivilegeValidation validation) {\n+    if (!getUser().isAccessAdmin()) {\n+      throw new WebApplicationException(Response.Status.FORBIDDEN);\n+    }\n+  }\n+\n   private static String formatMessage(String pattern, String value) {\n     String msg = pattern;\n     if (!pattern.endsWith(\"\\n\")) {"
        }
    ],
    "commitTime": "2023-11-06 14:44:43"
}