{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "NONE",
        "availability": "NONE"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 7.5,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "NONE",
                "availability": "NONE"
            },
            "severity": "high"
        }
    ],
    "cvssScore": 7.5,
    "disclosureTime": "2023-12-15 21:00:08",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.12367",
        "probability": "0.00045"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-JAVA-ORGXWIKIPLATFORM-6129511",
    "identifiers": {
        "CVE": [
            "CVE-2023-50719"
        ],
        "CWE": [
            "CWE-359"
        ]
    },
    "language": "java",
    "malicious": false,
    "packageManager": "maven",
    "publicationTime": "2023-12-17 12:15:24",
    "remediation": "Upgrade org.xwiki.platform:xwiki-platform-mail-general to version 14.10.15, 15.5.2, 5.7-rc-1 or higher. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Exposure of Private Personal Information to an Unauthorized Actor",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Exposure of Private Personal Information to an Unauthorized Actor via the Solr-based search feature. An attacker can obtain the password hashes of all users with view rights on the user profiles, which are public by default. This issue also exposes configurations and passwords used by extensions, such as API keys, which would normally be inaccessible but are disclosed as plain text due to this vulnerability. Exploiting this vulnerability is possible by searching for propertyvalue:?* AND reference:*.password and then deselect the \"Document\" property under \"Result type\" in the \"Refine your search\" widget at the right of the search results. "
    },
    "source_code": [
        {
            "filename": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-api/pom.xml",
            "diff": "@@ -44,6 +44,11 @@\n       <artifactId>xwiki-commons-component-api</artifactId>\n       <version>${commons.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.xwiki.commons</groupId>\n+      <artifactId>xwiki-commons-observation-api</artifactId>\n+      <version>${commons.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>com.sun.mail</groupId>\n       <artifactId>jakarta.mail</artifactId>"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-api/src/main/java/org/xwiki/mail/GeneralMailConfigurationUpdatedEvent.java",
            "diff": "@@ -0,0 +1,108 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.mail;\n+\n+import java.util.Objects;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.xwiki.observation.event.Event;\n+import org.xwiki.stability.Unstable;\n+\n+/**\n+ * An event triggered after the general mail configuration has been changed.\n+ * <p>\n+ * The event also sends the following parameters:\n+ * </p>\n+ * <ul>\n+ * <li>source: the wiki id (as string) where the configuration has been changed, or {@code null} if the change was on\n+ * the main wiki and thus affects all wikis.</li>\n+ * <li>data: {@code null}</li>\n+ * </ul>\n+ * <p>This event is intentionally not serializable as it will be triggered on every node of the cluster separately.</p>\n+ *\n+ * @since 14.10.15\n+ * @since 15.5.2\n+ * @since 15.7RC1\n+ * @version $Id$\n+ */\n+@Unstable\n+public class GeneralMailConfigurationUpdatedEvent implements Event\n+{\n+    private String wikiId;\n+\n+    /**\n+     * Default constructor, used to get notified about a mail configuration change in any wiki or to trigger an event\n+     * for a configuration change on the main wiki.\n+     */\n+    public GeneralMailConfigurationUpdatedEvent()\n+    {\n+    }\n+\n+    /**\n+     * An event for changes that affect the passed wiki id. Used to get notified about a change that affects the\n+     * specified wiki or to trigger an event on a subwiki.\n+     *\n+     * @param wikiId the id of the wiki where the configuration has been changed\n+     */\n+    public GeneralMailConfigurationUpdatedEvent(String wikiId)\n+    {\n+        this.wikiId = wikiId;\n+    }\n+\n+    @Override\n+    public boolean matches(Object otherEvent)\n+    {\n+        if (otherEvent == this) {\n+            return true;\n+        }\n+\n+        boolean isMatching = false;\n+\n+        if (this.getClass().isAssignableFrom(otherEvent.getClass())) {\n+            GeneralMailConfigurationUpdatedEvent other = (GeneralMailConfigurationUpdatedEvent) otherEvent;\n+            isMatching = this.wikiId == null || other.wikiId == null || Objects.equals(this.wikiId, other.wikiId);\n+        }\n+\n+        return isMatching;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        GeneralMailConfigurationUpdatedEvent that = (GeneralMailConfigurationUpdatedEvent) o;\n+\n+        return new EqualsBuilder().append(this.wikiId, that.wikiId).isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return new HashCodeBuilder(17, 37).append(this.wikiId).toHashCode();\n+    }\n+}"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-general/pom.xml",
            "diff": "@@ -73,5 +73,13 @@\n       <artifactId>javax.servlet-api</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <!-- Needed for ReferenceComponentList -->\n+    <dependency>\n+      <groupId>org.xwiki.platform</groupId>\n+      <artifactId>xwiki-platform-oldcore</artifactId>\n+      <version>${project.version}</version>\n+      <type>test-jar</type>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n </project>"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-general/src/main/java/org/xwiki/mail/internal/configuration/AbstractGeneralMailConfigClassDocumentConfigurationSource.java",
            "diff": "@@ -43,4 +43,16 @@ protected LocalDocumentReference getClassReference()\n     {\n         return GENERAL_MAILCONFIGCLASS_REFERENCE;\n     }\n+\n+    /**\n+     * Clear the cache.\n+     *\n+     * @since 14.10.15\n+     * @since 15.5.2\n+     * @since 15.7RC1\n+     */\n+    void clearCache()\n+    {\n+        this.cache.removeAll();\n+    }\n }"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-general/src/main/java/org/xwiki/mail/internal/configuration/GeneralMailConfigurationUpdatedEventGenerator.java",
            "diff": "@@ -0,0 +1,134 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.mail.internal.configuration;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Provider;\n+import javax.inject.Singleton;\n+\n+import org.xwiki.component.annotation.Component;\n+import org.xwiki.configuration.ConfigurationSource;\n+import org.xwiki.mail.GeneralMailConfigurationUpdatedEvent;\n+import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.model.reference.LocalDocumentReference;\n+import org.xwiki.model.reference.RegexEntityReference;\n+import org.xwiki.observation.EventListener;\n+import org.xwiki.observation.ObservationManager;\n+import org.xwiki.observation.event.Event;\n+\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.internal.event.XObjectAddedEvent;\n+import com.xpn.xwiki.internal.event.XObjectDeletedEvent;\n+import com.xpn.xwiki.internal.event.XObjectUpdatedEvent;\n+import com.xpn.xwiki.objects.BaseObjectReference;\n+\n+/**\n+ * Event generator for {@link GeneralMailConfigurationUpdatedEvent}.\n+ *\n+ * @since 14.10.15\n+ * @since 15.5.2\n+ * @since 15.7RC1\n+ * @version $Id$\n+ */\n+@Component\n+@Named(GeneralMailConfigurationUpdatedEventGenerator.NAME)\n+@Singleton\n+public class GeneralMailConfigurationUpdatedEventGenerator implements EventListener\n+{\n+    static final String NAME = \"generalmailconfigurationchangedeventgenerator\";\n+\n+    @Inject\n+    protected EntityReferenceSerializer<String> referenceSerializer;\n+\n+    @Inject\n+    private Provider<ObservationManager> observationManagerProvider;\n+\n+    @Inject\n+    private Provider<XWikiContext> contextProvider;\n+\n+    @Inject\n+    @Named(\"mailgeneral\")\n+    private ConfigurationSource currentWikiMailConfigSource;\n+\n+    @Inject\n+    @Named(\"mailgeneralmainwiki\")\n+    private ConfigurationSource mainWikiMailConfigSource;\n+\n+    @Override\n+    public String getName()\n+    {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Event> getEvents()\n+    {\n+        String serializedClassReference = this.referenceSerializer.serialize(\n+            AbstractGeneralMailConfigClassDocumentConfigurationSource.GENERAL_MAILCONFIGCLASS_REFERENCE);\n+        RegexEntityReference filter = BaseObjectReference.any(serializedClassReference);\n+\n+        return List.of(new XObjectAddedEvent(filter), new XObjectDeletedEvent(filter), new XObjectUpdatedEvent(filter));\n+    }\n+\n+    @Override\n+    public void onEvent(Event event, Object source, Object data)\n+    {\n+        ObservationManager observationManager = this.observationManagerProvider.get();\n+\n+        if (source instanceof XWikiDocument) {\n+            XWikiDocument document = (XWikiDocument) source;\n+\n+            // Test that the document is really a mail configuration document.\n+            LocalDocumentReference localDocumentReference = new LocalDocumentReference(document.getDocumentReference());\n+            if (!AbstractMailConfigClassDocumentConfigurationSource.MAILCONFIG_REFERENCE\n+                .equals(localDocumentReference))\n+            {\n+                return;\n+            }\n+\n+            // Clear the cache of the current wiki mail config source to ensure that any listener of the new events will\n+            // see the new configuration value regardless of which listener is called first.\n+            clearCache(this.currentWikiMailConfigSource);\n+\n+            // Get the wiki id from the document reference. If it is the main wiki, notify without wiki, otherwise\n+            // notify with the wiki id.\n+            String wikiId = document.getDocumentReference().getWikiReference().getName();\n+            if (this.contextProvider.get().isMainWiki(wikiId)) {\n+                // Clear the cache of the main wiki mail config source to ensure that any listener of the events will\n+                // see the new configuration value regardless of which listener is called first.\n+                clearCache(this.mainWikiMailConfigSource);\n+                observationManager.notify(new GeneralMailConfigurationUpdatedEvent(), null);\n+            } else {\n+                observationManager.notify(new GeneralMailConfigurationUpdatedEvent(wikiId), wikiId);\n+            }\n+        }\n+    }\n+\n+    private void clearCache(ConfigurationSource mainWikiMailConfigSource)\n+    {\n+        if (mainWikiMailConfigSource instanceof AbstractGeneralMailConfigClassDocumentConfigurationSource) {\n+            ((AbstractGeneralMailConfigClassDocumentConfigurationSource) mainWikiMailConfigSource).clearCache();\n+        }\n+    }\n+}"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-general/src/main/resources/META-INF/components.txt",
            "diff": "@@ -3,6 +3,7 @@ org.xwiki.mail.internal.AddressConverter\n org.xwiki.mail.internal.InternetAddressConverter\n org.xwiki.mail.internal.configuration.DefaultGeneralMailConfiguration\n org.xwiki.mail.internal.configuration.GeneralMailConfigClassDocumentConfigurationSource\n+org.xwiki.mail.internal.configuration.GeneralMailConfigurationUpdatedEventGenerator\n org.xwiki.mail.internal.configuration.MainWikiGeneralMailConfigClassDocumentConfigurationSource\n org.xwiki.mail.internal.DefaultEmailAddressObfuscator\n org.xwiki.mail.script.GeneralMailScriptService"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-general/src/test/java/org/xwiki/mail/internal/configuration/GeneralMailConfigurationUpdatedEventGeneratorTest.java",
            "diff": "@@ -0,0 +1,233 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.mail.internal.configuration;\n+\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Stream;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.xwiki.cache.Cache;\n+import org.xwiki.cache.CacheException;\n+import org.xwiki.cache.CacheManager;\n+import org.xwiki.cache.config.CacheConfiguration;\n+import org.xwiki.mail.GeneralMailConfigurationUpdatedEvent;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.model.reference.ObjectReference;\n+import org.xwiki.model.reference.WikiReference;\n+import org.xwiki.observation.EventListener;\n+import org.xwiki.observation.ObservationManager;\n+import org.xwiki.observation.event.Event;\n+import org.xwiki.observation.internal.DefaultObservationManager;\n+import org.xwiki.test.annotation.BeforeComponent;\n+import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.test.mockito.MockitoComponentManager;\n+\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.internal.event.XObjectAddedEvent;\n+import com.xpn.xwiki.internal.event.XObjectDeletedEvent;\n+import com.xpn.xwiki.internal.event.XObjectUpdatedEvent;\n+import com.xpn.xwiki.objects.BaseObjectReference;\n+import com.xpn.xwiki.test.reference.ReferenceComponentList;\n+import com.xpn.xwiki.web.Utils;\n+\n+import static org.junit.jupiter.api.Named.named;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit tests for {@link GeneralMailConfigurationUpdatedEventGenerator}.\n+ *\n+ * @version $Id$\n+ */\n+@ComponentTest\n+@ComponentList({\n+    DefaultObservationManager.class})\n+@ReferenceComponentList\n+class GeneralMailConfigurationUpdatedEventGeneratorTest\n+{\n+    private static final String MAIN_WIKI = \"main\";\n+\n+    private static final String CURRENT_WIKI_CACHE_ID = \"configuration.document.mail.general\";\n+\n+    private static final String MAIN_WIKI_CACHE_ID = \"configuration.document.mail.general.mainwiki\";\n+\n+    @MockComponent\n+    private CacheManager cacheManager;\n+\n+    /**\n+     * The mail configuration for the current wiki, needed by the eventGenerator, injected here to make\n+     * sure its members are all mocks. A real instance is used here as otherwise the cache invalidation cannot be\n+     * tested.\n+     */\n+    @InjectMockComponents\n+    private GeneralMailConfigClassDocumentConfigurationSource currentWikiConfigurationSource;\n+\n+    @InjectMockComponents\n+    private MainWikiGeneralMailConfigClassDocumentConfigurationSource mainWikiConfigurationSource;\n+\n+    @InjectMockComponents\n+    private GeneralMailConfigurationUpdatedEventGenerator eventGenerator;\n+\n+    @Inject\n+    private ObservationManager observationManager;\n+\n+    @MockComponent\n+    private XWikiContext context;\n+\n+    private Cache<Object> mainWikiCache;\n+\n+    private Cache<Object> currentWikiCache;\n+\n+    @BeforeComponent\n+    private void mockCache(MockitoComponentManager componentManager) throws CacheException\n+    {\n+        // Can't use @Mock annotation as mocks are injected too late.\n+        this.mainWikiCache = mock();\n+        this.currentWikiCache = mock();\n+        when(this.cacheManager.createNewCache(any())).then(invocation -> {\n+            CacheConfiguration configuration = invocation.getArgument(0);\n+            if (configuration.getConfigurationId().equals(CURRENT_WIKI_CACHE_ID)) {\n+                return this.currentWikiCache;\n+            } else if (MAIN_WIKI_CACHE_ID.equals(configuration.getConfigurationId())) {\n+                return this.mainWikiCache;\n+            }\n+\n+            throw new IllegalArgumentException(\"Unknown cache configuration ID [\"\n+                + configuration.getConfigurationId() + \"]\");\n+        });\n+\n+        when(this.context.isMainWiki(MAIN_WIKI)).thenReturn(true);\n+        Utils.setComponentManager(componentManager);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"eventParametersSource\")\n+    void onEvent(String wiki, Callable<Event> eventCallable, Object source, String newEventSource) throws Exception\n+    {\n+        Event event = eventCallable.call();\n+\n+        // Unregister the listeners of the configuration sources themselves to check that cache invalidation is\n+        // really triggered independently.\n+        this.observationManager.removeListener(CURRENT_WIKI_CACHE_ID);\n+        this.observationManager.removeListener(MAIN_WIKI_CACHE_ID);\n+        // Register the listener explicitly as it seems that it isn't registered automatically.\n+        this.observationManager.addListener(this.eventGenerator);\n+\n+        EventListener allWikiListener = mock();\n+        when(allWikiListener.getEvents()).thenReturn(List.of(new GeneralMailConfigurationUpdatedEvent()));\n+        when(allWikiListener.getName()).thenReturn(\"allWiki\");\n+\n+        EventListener currentWikiListener = mock();\n+        when(currentWikiListener.getEvents()).thenReturn(List.of(new GeneralMailConfigurationUpdatedEvent(wiki)));\n+        when(currentWikiListener.getName()).thenReturn(\"currentWiki\");\n+\n+        EventListener wikiListener = mock();\n+        when(wikiListener.getEvents()).thenReturn(List.of(new GeneralMailConfigurationUpdatedEvent(\"wiki\")));\n+        when(wikiListener.getName()).thenReturn(\"wiki\");\n+\n+        this.observationManager.addListener(allWikiListener);\n+        this.observationManager.addListener(currentWikiListener);\n+        this.observationManager.addListener(wikiListener);\n+\n+        this.observationManager.notify(event, source);\n+\n+        verify(this.currentWikiCache).removeAll();\n+        if (MAIN_WIKI.equals(wiki)) {\n+            verify(this.mainWikiCache).removeAll();\n+        } else {\n+            verify(this.mainWikiCache, never()).removeAll();\n+        }\n+\n+        if (List.of(MAIN_WIKI, \"wiki\").contains(wiki)) {\n+            verify(wikiListener).onEvent(any(), eq(newEventSource), eq(null));\n+        } else {\n+            verify(wikiListener, never()).onEvent(any(), any(), any());\n+        }\n+\n+        verify(allWikiListener).onEvent(any(), eq(newEventSource), eq(null));\n+        verify(currentWikiListener).onEvent(any(), eq(newEventSource), eq(null));\n+    }\n+\n+    private static ObjectReference getConfigurationObjectReference(String wikiId)\n+    {\n+        DocumentReference documentReference = new DocumentReference(\n+            AbstractGeneralMailConfigClassDocumentConfigurationSource.MAILCONFIG_REFERENCE, new WikiReference(wikiId));\n+        DocumentReference configClassReference = new DocumentReference(\n+            AbstractGeneralMailConfigClassDocumentConfigurationSource.GENERAL_MAILCONFIGCLASS_REFERENCE,\n+            new WikiReference(wikiId));\n+        return new BaseObjectReference(configClassReference, 0, documentReference);\n+    }\n+\n+    static Stream<Arguments> eventParametersSource()\n+    {\n+        // We cannot call getConfigurationObjectReference() here as the component manager hasn't been set on Utils\n+        // yet and thus initializing the BaseObjectReference fails. Therefore, this returns callables that do the call.\n+        return Stream.of(\"wiki\", \"otherwiki\", MAIN_WIKI).flatMap(wiki -> {\n+            DocumentReference documentReference =\n+                new DocumentReference(\n+                    AbstractGeneralMailConfigClassDocumentConfigurationSource.MAILCONFIG_REFERENCE,\n+                    new WikiReference(wiki)\n+                );\n+            Object source = new XWikiDocument(documentReference);\n+            String newEventSource = MAIN_WIKI.equals(wiki) ? null : wiki;\n+\n+            return Stream.of(\n+                arguments(\n+                    wiki,\n+                    named(\"XObjectUpdatedEvent\",\n+                        (Callable<Event>) () -> new XObjectUpdatedEvent(getConfigurationObjectReference(wiki))\n+                    ),\n+                    source,\n+                    newEventSource\n+                ),\n+                arguments(\n+                    wiki,\n+                    named(\"XObjectDeletedEvent\",\n+                        (Callable<Event>) () -> new XObjectDeletedEvent(getConfigurationObjectReference(wiki))\n+                    ),\n+                    source,\n+                    newEventSource\n+                ),\n+                arguments(\n+                    wiki,\n+                    named(\"XObjectAddedEvent\",\n+                        (Callable<Event>) () -> new XObjectAddedEvent(getConfigurationObjectReference(wiki))\n+                    ),\n+                    source,\n+                    newEventSource\n+                )\n+            );\n+        });\n+    }\n+}"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/java/org/xwiki/search/solr/internal/DefaultSolrIndexer.java",
            "diff": "@@ -24,10 +24,12 @@\n import java.util.concurrent.LinkedBlockingQueue;\n \n import javax.inject.Inject;\n+import javax.inject.Provider;\n import javax.inject.Singleton;\n \n import org.apache.solr.common.SolrInputDocument;\n import org.slf4j.Logger;\n+import org.xwiki.bridge.internal.DocumentContextExecutor;\n import org.xwiki.component.annotation.Component;\n import org.xwiki.component.annotation.DisposePriority;\n import org.xwiki.component.manager.ComponentLifecycleException;\n@@ -56,6 +58,7 @@\n import org.xwiki.search.solr.internal.reference.SolrReferenceResolver;\n \n import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.util.AbstractXWikiRunnable;\n \n /**\n@@ -292,6 +295,12 @@ public void runInternal()\n     @Inject\n     private JobExecutor jobs;\n \n+    @Inject\n+    private DocumentContextExecutor documentContextExecutor;\n+\n+    @Inject\n+    private Provider<XWikiContext> xWikiContextProvider;\n+\n     /**\n      * The queue of index operation to perform.\n      */\n@@ -507,7 +516,20 @@ private LengthSolrInputDocument getSolrDocument(EntityReference reference)\n \n         // If the entity type is supported, use the extractor to get the SolrInputDocuent.\n         if (metadataExtractor != null) {\n-            return metadataExtractor.getSolrDocument(reference);\n+            // Set the document that belongs to the entity reference as context document to ensure that the correct\n+            // settings are loaded for the current document/wiki.\n+            XWikiContext context = this.xWikiContextProvider.get();\n+            try {\n+                XWikiDocument document = context.getWiki().getDocument(reference, context);\n+\n+                return this.documentContextExecutor.call(() -> metadataExtractor.getSolrDocument(reference), document);\n+            } catch (SolrIndexerException | IllegalArgumentException e) {\n+                // Re-throw to avoid wrapping exceptions that are declared in the method signature.\n+                throw e;\n+            } catch (Exception e) {\n+                throw new SolrIndexerException(\"Error executing the indexer in the context of the document to index\",\n+                    e);\n+            }\n         }\n \n         return null;"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/java/org/xwiki/search/solr/internal/SolrIndexEventListener.java",
            "diff": "@@ -35,6 +35,7 @@\n import org.xwiki.bridge.event.DocumentUpdatedEvent;\n import org.xwiki.bridge.event.WikiDeletedEvent;\n import org.xwiki.component.annotation.Component;\n+import org.xwiki.mail.GeneralMailConfigurationUpdatedEvent;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.WikiReference;\n import org.xwiki.observation.EventListener;\n@@ -75,7 +76,7 @@ public class SolrIndexEventListener implements EventListener\n         new DocumentCreatedEvent(), new DocumentDeletedEvent(), new AttachmentAddedEvent(),\n         new AttachmentDeletedEvent(), new AttachmentUpdatedEvent(), new XObjectAddedEvent(), new XObjectDeletedEvent(),\n         new XObjectUpdatedEvent(), new XObjectPropertyAddedEvent(), new XObjectPropertyDeletedEvent(),\n-        new XObjectPropertyUpdatedEvent(), new WikiDeletedEvent());\n+        new XObjectPropertyUpdatedEvent(), new WikiDeletedEvent(), new GeneralMailConfigurationUpdatedEvent());\n \n     /**\n      * Logging framework.\n@@ -175,6 +176,14 @@ public void onEvent(Event event, Object source, Object data)\n                 WikiReference wikiReference = new WikiReference(wikiName);\n \n                 this.solrIndexer.get().delete(wikiReference, false);\n+            } else if (event instanceof GeneralMailConfigurationUpdatedEvent) {\n+                // Refresh the index when the mail configuration is changed because the mail configuration is used to\n+                // decide if emails shall be indexed or not.\n+                if (source instanceof String) {\n+                    this.solrIndexer.get().index(new WikiReference((String) source), true);\n+                } else {\n+                    this.solrIndexer.get().index(null, true);\n+                }\n             }\n         } catch (Exception e) {\n             this.logger.error(\"Failed to handle event [{}] with source [{}]\", event, source.toString(), e);"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/java/org/xwiki/search/solr/internal/metadata/AbstractSolrMetadataExtractor.java",
            "diff": "@@ -39,6 +39,7 @@\n import org.xwiki.component.manager.ComponentLookupException;\n import org.xwiki.component.manager.ComponentManager;\n import org.xwiki.context.Execution;\n+import org.xwiki.mail.GeneralMailConfiguration;\n import org.xwiki.model.EntityType;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.EntityReference;\n@@ -58,6 +59,7 @@\n import com.xpn.xwiki.objects.StringProperty;\n import com.xpn.xwiki.objects.classes.BaseClass;\n import com.xpn.xwiki.objects.classes.BooleanClass;\n+import com.xpn.xwiki.objects.classes.EmailClass;\n import com.xpn.xwiki.objects.classes.ListItem;\n import com.xpn.xwiki.objects.classes.PasswordClass;\n import com.xpn.xwiki.objects.classes.PropertyClass;\n@@ -122,6 +124,9 @@ public abstract class AbstractSolrMetadataExtractor implements SolrMetadataExtra\n     @Inject\n     protected SolrLinkSerializer linkSerializer;\n \n+    @Inject\n+    protected GeneralMailConfiguration generalMailConfiguration;\n+\n     private int shortTextLimit = -1;\n \n     /**\n@@ -387,7 +392,7 @@ protected void setObjectContent(SolrInputDocument solrDocument, BaseObject objec\n      * @param propertyClass the class that describes the given property\n      * @param locale the locale of the indexed document\n      */\n-    private void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<EntityReference> property,\n+    protected void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<?> property,\n         PropertyClass propertyClass, Locale locale)\n     {\n         Object propertyValue = property.getValue();\n@@ -431,8 +436,10 @@ private void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<Entit\n             // Boolean properties are stored as integers (0 is false and 1 is true).\n             Boolean booleanValue = ((Integer) propertyValue) != 0;\n             setPropertyValue(solrDocument, property, new TypedValue(booleanValue), locale);\n-        } else if (!(propertyClass instanceof PasswordClass)) {\n-            // Avoid indexing passwords.\n+        } else if (!(propertyClass instanceof PasswordClass)\n+            && !((propertyClass instanceof EmailClass) && this.generalMailConfiguration.shouldObfuscate()))\n+        {\n+            // Avoid indexing passwords and, when obfuscation is enabled, emails.\n             setPropertyValue(solrDocument, property, new TypedValue(propertyValue), locale);\n         }\n     }\n@@ -447,7 +454,7 @@ private void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<Entit\n      * @param locale the locale of the indexed document\n      * @see \"XWIKI-9417: Search does not return any results for Static List values\"\n      */\n-    private void setStaticListPropertyValue(SolrInputDocument solrDocument, BaseProperty<EntityReference> property,\n+    private void setStaticListPropertyValue(SolrInputDocument solrDocument, BaseProperty<?> property,\n         StaticListClass propertyClass, Locale locale)\n     {\n         // The list of known values specified in the XClass.\n@@ -482,7 +489,7 @@ private void setStaticListPropertyValue(SolrInputDocument solrDocument, BaseProp\n      * @param typedValue the value to add\n      * @param locale the locale of the indexed document\n      */\n-    protected void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<EntityReference> property,\n+    protected void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<?> property,\n         TypedValue typedValue, Locale locale)\n     {\n         // Collect all the property values from all the objects of a document in a single (localized) field."
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/java/org/xwiki/search/solr/internal/metadata/DocumentSolrMetadataExtractor.java",
            "diff": "@@ -260,7 +260,7 @@ protected void setObjects(SolrInputDocument solrDocument, Locale locale, XWikiDo\n     }\n \n     @Override\n-    protected void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<EntityReference> property,\n+    protected void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<?> property,\n         TypedValue typedValue, Locale locale)\n     {\n         Object value = typedValue.getValue();"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/java/org/xwiki/search/solr/internal/metadata/ObjectPropertySolrMetadataExtractor.java",
            "diff": "@@ -36,6 +36,7 @@\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.objects.BaseObjectReference;\n import com.xpn.xwiki.objects.BaseProperty;\n+import com.xpn.xwiki.objects.classes.PropertyClass;\n \n /**\n  * Extract the metadata to be indexed from object properties.\n@@ -89,6 +90,17 @@ public boolean setFieldsInternal(LengthSolrInputDocument solrDocument, EntityRef\n         return true;\n     }\n \n+    @Override\n+    protected void setPropertyValue(SolrInputDocument solrDocument, BaseProperty<?> property,\n+        TypedValue typedValue, Locale locale)\n+    {\n+        String fieldName = FieldUtils.getFieldName(FieldUtils.PROPERTY_VALUE, locale);\n+        // The current method can be called multiple times for the same property value (but with a different type).\n+        // Since we don't care about the value type here (all the values are collected in a localized field) we need to\n+        // make sure we don't add the same value twice. Derived classes can override this method and use the value type.\n+        addFieldValueOnce(solrDocument, fieldName, typedValue.getValue());\n+    }\n+\n     /**\n      * Set the locale to all the translations that the owning document has. This ensures that this entity is found for\n      * all the translations of a document, not just the original document.\n@@ -103,16 +115,16 @@ public boolean setFieldsInternal(LengthSolrInputDocument solrDocument, EntityRef\n     protected void setLocaleAndContentFields(DocumentReference documentReference, SolrInputDocument solrDocument,\n         BaseProperty<ObjectPropertyReference> objectProperty) throws Exception\n     {\n+        PropertyClass propertyClass = objectProperty.getPropertyClass(this.xcontextProvider.get());\n         // Do the work for each locale.\n         for (Locale documentLocale : getLocales(documentReference, null)) {\n             solrDocument.addField(FieldUtils.LOCALES, documentLocale);\n \n-            solrDocument.setField(FieldUtils.getFieldName(FieldUtils.PROPERTY_VALUE, documentLocale),\n-                objectProperty.getValue());\n+            setPropertyValue(solrDocument, objectProperty, propertyClass, documentLocale);\n         }\n \n         // We can`t rely on the schema's copyField here because we would trigger it for each locale. Doing the copy to\n         // the text_general field manually.\n-        solrDocument.setField(FieldUtils.getFieldName(FieldUtils.PROPERTY_VALUE, null), objectProperty.getValue());\n+        setPropertyValue(solrDocument, objectProperty, propertyClass, null);\n     }\n }"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/java/org/xwiki/search/solr/internal/migration/R141015000XWIKI20371XWIKI21208DataMigration.java",
            "diff": "@@ -0,0 +1,128 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.search.solr.internal.migration;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.xwiki.component.annotation.Component;\n+import org.xwiki.context.Execution;\n+import org.xwiki.context.ExecutionContext;\n+import org.xwiki.search.solr.internal.api.SolrInstance;\n+\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.store.migration.DataMigrationException;\n+import com.xpn.xwiki.store.migration.XWikiDBVersion;\n+import com.xpn.xwiki.store.migration.hibernate.HibernateDataMigration;\n+\n+/**\n+ * Migration in charge of emptying the Search solr core in order to perform a reindex of all documents after an\n+ * indexing bug has been fixed.\n+ *\n+ * @version $Id$\n+ * @since 14.10.15\n+ * @since 15.5.1\n+ * @since 15.7RC1\n+ */\n+@Component\n+@Named(R141015000XWIKI20371XWIKI21208DataMigration.HINT)\n+@Singleton\n+// Note that we implement HibernateDataMigration and not DataMigration only because of XWIKI-19399\n+public class R141015000XWIKI20371XWIKI21208DataMigration implements HibernateDataMigration\n+{\n+    /**\n+     * Hint of the migration.\n+     */\n+    public static final String HINT = \"R141015000XWIKI20371XWIKI21208\";\n+\n+    @Inject\n+    private SolrInstance solrInstance;\n+\n+    @Inject\n+    private Execution execution;\n+\n+    /**\n+     * @return XWikiContext to access the store\n+     */\n+    private XWikiContext getXWikiContext()\n+    {\n+        ExecutionContext context = this.execution.getContext();\n+        return (XWikiContext) context.getProperty(\"xwikicontext\");\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return HINT;\n+    }\n+\n+    @Override\n+    public String getDescription()\n+    {\n+        return \"Clear the index to purge sensitive data from the index.\";\n+    }\n+\n+    @Override\n+    public XWikiDBVersion getVersion()\n+    {\n+        // Change to 141015000 for 14.10.15.\n+        // Use 15.05.02 for 15.5.2 and 15.7RC1 as 15.05.01 is the most recent migration.\n+        return new XWikiDBVersion(150502000);\n+    }\n+\n+    @Override\n+    public void migrate() throws DataMigrationException\n+    {\n+        try {\n+            this.solrInstance.deleteByQuery(\"*:*\");\n+            this.solrInstance.commit();\n+        } catch (SolrServerException | IOException e) {\n+            throw new DataMigrationException(\"Error while performing Solr query to empty the search core\", e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean shouldExecute(XWikiDBVersion startupVersion)\n+    {\n+        XWikiDBVersion ltsVersion = new XWikiDBVersion(141015000);\n+        XWikiDBVersion afterLTSVersion = new XWikiDBVersion(150000000);\n+        // Execute the migration if the version is either before the LTS version or equal to or larger than the\n+        // afterLTSVersion and before the version of this migration.\n+        // We only need to execute this migration once on the main wiki.\n+        return getXWikiContext().isMainWiki() && (startupVersion.compareTo(ltsVersion) < 0\n+            || (startupVersion.compareTo(afterLTSVersion) >= 0 && startupVersion.compareTo(getVersion()) < 0));\n+    }\n+\n+    @Override\n+    public String getPreHibernateLiquibaseChangeLog() throws DataMigrationException\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getLiquibaseChangeLog() throws DataMigrationException\n+    {\n+        return null;\n+    }\n+}"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/resources/META-INF/components.txt",
            "diff": "@@ -28,6 +28,7 @@ org.xwiki.search.solr.internal.metadata.ObjectSolrMetadataExtractor\n org.xwiki.search.solr.internal.metadata.SolrLinkSerializer\n org.xwiki.search.solr.internal.metadata.SolrMetadataExtractorUtils\n org.xwiki.search.solr.internal.migration.R141005000XWIKI20575XWIKI20619DataMigration\n+org.xwiki.search.solr.internal.migration.R141015000XWIKI20371XWIKI21208DataMigration\n org.xwiki.search.solr.internal.reference.AttachmentSolrReferenceResolver\n org.xwiki.search.solr.internal.reference.DefaultSolrReferenceResolver\n org.xwiki.search.solr.internal.reference.DocumentSolrReferenceResolver"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/test/java/org/xwiki/search/solr/internal/SolrIndexEventListenerTest.java",
            "diff": "@@ -25,8 +25,10 @@\n import org.junit.jupiter.api.Test;\n import org.xwiki.bridge.event.DocumentDeletedEvent;\n import org.xwiki.bridge.event.DocumentUpdatedEvent;\n+import org.xwiki.mail.GeneralMailConfigurationUpdatedEvent;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.EntityReference;\n+import org.xwiki.model.reference.WikiReference;\n import org.xwiki.search.solr.internal.api.SolrIndexer;\n import org.xwiki.test.junit5.mockito.ComponentTest;\n import org.xwiki.test.junit5.mockito.InjectMockComponents;\n@@ -101,4 +103,15 @@ void onDocumentDefaultTranslationUpdated() throws Exception\n         verify(this.indexer).index(new DocumentReference(documentReference, Locale.FRENCH), false);\n         verify(this.indexer).index(new DocumentReference(documentReference, Locale.GERMAN), false);\n     }\n+\n+    @Test\n+    void onGeneralMailConfigurationUpdatedEvent()\n+    {\n+        this.listener.onEvent(new GeneralMailConfigurationUpdatedEvent(), null, null);\n+        verify(this.indexer).index(null, true);\n+\n+        String otherWiki = \"otherwiki\";\n+        this.listener.onEvent(new GeneralMailConfigurationUpdatedEvent(otherWiki), otherWiki, null);\n+        verify(this.indexer).index(new WikiReference(otherWiki), true);\n+    }\n }"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/test/java/org/xwiki/search/solr/internal/metadata/DocumentSolrMetadataExtractorTest.java",
            "diff": "@@ -40,11 +40,14 @@\n import org.hamcrest.Matchers;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n import org.mockito.AdditionalAnswers;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.xwiki.context.Execution;\n import org.xwiki.context.ExecutionContext;\n+import org.xwiki.mail.GeneralMailConfiguration;\n import org.xwiki.model.EntityType;\n import org.xwiki.model.document.DocumentAuthors;\n import org.xwiki.model.reference.AttachmentReference;\n@@ -75,6 +78,7 @@\n import com.xpn.xwiki.objects.BaseProperty;\n import com.xpn.xwiki.objects.classes.BaseClass;\n import com.xpn.xwiki.objects.classes.BooleanClass;\n+import com.xpn.xwiki.objects.classes.EmailClass;\n import com.xpn.xwiki.objects.classes.ListItem;\n import com.xpn.xwiki.objects.classes.PasswordClass;\n import com.xpn.xwiki.objects.classes.StaticListClass;\n@@ -130,6 +134,9 @@ class DocumentSolrMetadataExtractorTest\n     @MockComponent\n     private SolrFieldNameEncoder fieldNameEncoder;\n \n+    @MockComponent\n+    private GeneralMailConfiguration mailConfiguration;\n+\n     @MockComponent\n     @Named(\"document\")\n     private SolrReferenceResolver documentSolrReferenceResolver;\n@@ -485,6 +492,72 @@ void getDocumentWithObjects() throws Exception\n         assertEquals(8, objectProperties.size());\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void getDocumentWithEmailObject(boolean obfuscate) throws Exception\n+    {\n+        when(this.mailConfiguration.shouldObfuscate()).thenReturn(obfuscate);\n+\n+        // Mock the user object\n+        BaseObject userObject = mock(BaseObject.class);\n+        // Mock the email property\n+        String email = \"test@example.com\";\n+        BaseProperty<EntityReference> emailField = mock(BaseProperty.class);\n+        when(emailField.getName()).thenReturn(\"email\");\n+        when(emailField.getValue()).thenReturn(email);\n+        when(emailField.getObject()).thenReturn(userObject);\n+\n+        // Mock the class reference\n+        DocumentReference userClassRef = new DocumentReference(\"wiki\", \"space\", \"userClass\");\n+\n+        // Add the mocked email object\n+        when(this.document.getXObjects())\n+            .thenReturn(Collections.singletonMap(userClassRef, Arrays.asList(userObject)));\n+\n+        // Mock the class\n+        BaseClass xclass = mock(BaseClass.class);\n+        when(userObject.getXClass(this.xcontext)).thenReturn(xclass);\n+        when(userObject.getFieldList()).thenReturn(List.of(emailField));\n+        when(userObject.getRelativeXClassReference())\n+            .thenReturn(userClassRef.removeParent(userClassRef.getWikiReference()));\n+\n+        when(xclass.get(\"email\")).thenReturn(mock(EmailClass.class));\n+\n+        //\n+        // Call\n+        //\n+        SolrInputDocument solrDocument = this.metadataExtractor.getSolrDocument(this.frenchDocumentReference);\n+\n+        //\n+        // Assert and verify\n+        //\n+        String serializedUserClass = \"space.userClass\";\n+        assertEquals(List.of(serializedUserClass), solrDocument.getFieldValues(FieldUtils.CLASS));\n+\n+        // Make sure the password is not indexed (neither as a string nor as a localized text).\n+        String emailProperty = \"property.\" + serializedUserClass + \".email\";\n+        String emailString = emailProperty + \"_string\";\n+        String emailSortString = emailProperty + \"_sortString\";\n+        if (obfuscate) {\n+            assertNull(solrDocument.getFieldValue(emailString));\n+            assertNull(solrDocument.getFieldValue(emailSortString));\n+\n+            assertNull(solrDocument\n+                .getFieldValue(FieldUtils.getFieldName(emailProperty, Locale.FRENCH)));\n+        } else {\n+            assertEquals(email, solrDocument.getFieldValue(emailString));\n+            assertEquals(email, solrDocument.getFieldValue(emailSortString));\n+        }\n+\n+        Collection<Object> objectProperties =\n+            solrDocument.getFieldValues(FieldUtils.getFieldName(\"object.\" + serializedUserClass, Locale.FRENCH));\n+        assertEquals(obfuscate ? null : List.of(email), objectProperties);\n+\n+        objectProperties =\n+            solrDocument.getFieldValues(FieldUtils.getFieldName(FieldUtils.OBJECT_CONTENT, Locale.FRENCH));\n+        assertEquals(obfuscate ? null : List.of(\"email : \" + email), objectProperties);\n+    }\n+\n     /**\n      * @see \"XWIKI-9417: Search does not return any results for Static List values\"\n      */"
        },
        {
            "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/test/java/org/xwiki/search/solr/internal/metadata/ObjectPropertySolrMetadataExtractorTest.java",
            "diff": "@@ -0,0 +1,218 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.search.solr.internal.metadata;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import javax.inject.Provider;\n+\n+import org.apache.solr.common.SolrInputDocument;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.xwiki.context.Execution;\n+import org.xwiki.context.ExecutionContext;\n+import org.xwiki.mail.GeneralMailConfiguration;\n+import org.xwiki.model.document.DocumentAuthors;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.model.reference.ObjectPropertyReference;\n+import org.xwiki.search.solr.internal.SolrSearchCoreUtils;\n+import org.xwiki.search.solr.internal.api.FieldUtils;\n+import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.test.mockito.MockitoComponentManager;\n+\n+import com.xpn.xwiki.XWiki;\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.objects.BaseObjectReference;\n+import com.xpn.xwiki.objects.BaseProperty;\n+import com.xpn.xwiki.objects.classes.BaseClass;\n+import com.xpn.xwiki.objects.classes.EmailClass;\n+import com.xpn.xwiki.objects.classes.PasswordClass;\n+import com.xpn.xwiki.objects.classes.PropertyClass;\n+import com.xpn.xwiki.objects.classes.StaticListClass;\n+import com.xpn.xwiki.objects.classes.StringClass;\n+import com.xpn.xwiki.test.reference.ReferenceComponentList;\n+import com.xpn.xwiki.web.Utils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit test for {@link ObjectPropertySolrMetadataExtractor}.\n+ *\n+ * @version $Id$\n+ */\n+@ComponentTest\n+@ComponentList({ SolrSearchCoreUtils.class, SolrLinkSerializer.class })\n+@ReferenceComponentList\n+class ObjectPropertySolrMetadataExtractorTest\n+{\n+    @InjectMockComponents\n+    private ObjectPropertySolrMetadataExtractor metadataExtractor;\n+\n+    @MockComponent\n+    private Provider<XWikiContext> contextProvider;\n+\n+    @MockComponent\n+    private Execution execution;\n+\n+    @MockComponent\n+    private GeneralMailConfiguration mailConfiguration;\n+\n+    private final XWikiContext xcontext = mock(XWikiContext.class);\n+\n+    /**\n+     * The document from which we extract the meta data.\n+     */\n+    private final XWikiDocument document = mock(XWikiDocument.class);\n+\n+    private final XWikiDocument translatedDocument = mock(XWikiDocument.class, Locale.FRENCH.toString());\n+\n+    private final DocumentReference documentReference =\n+        new DocumentReference(\"wiki\", Arrays.asList(\"Path\", \"To\", \"Page\"), \"WebHome\");\n+\n+    private final DocumentReference frenchDocumentReference =\n+        new DocumentReference(this.documentReference, Locale.FRENCH);\n+\n+    private final DocumentAuthors documentAuthors = mock(DocumentAuthors.class);\n+\n+    @BeforeEach\n+    void setUp(MockitoComponentManager componentManager) throws Exception\n+    {\n+        // XWikiContext Provider\n+        when(this.contextProvider.get()).thenReturn(this.xcontext);\n+\n+        // XWikiContext trough Execution\n+        ExecutionContext executionContext = new ExecutionContext();\n+        executionContext.setProperty(XWikiContext.EXECUTIONCONTEXT_KEY, this.xcontext);\n+        when(this.execution.getContext()).thenReturn(executionContext);\n+\n+        // XWiki\n+        XWiki wiki = mock(XWiki.class);\n+        when(this.xcontext.getWiki()).thenReturn(wiki);\n+\n+        // XWikiDocument\n+        when(wiki.getDocument(this.documentReference, this.xcontext)).thenReturn(this.document);\n+        when(wiki.getDocument(this.frenchDocumentReference, this.xcontext)).thenReturn(this.translatedDocument);\n+        when(this.document.getDocumentReference()).thenReturn(this.documentReference);\n+        when(this.document.isHidden()).thenReturn(false);\n+        when(this.document.getLocale()).thenReturn(Locale.ROOT);\n+        when(this.document.getRealLocale()).thenReturn(Locale.US);\n+        when(this.document.getAuthors()).thenReturn(this.documentAuthors);\n+\n+        when(this.document.getTranslatedDocument(Locale.FRENCH, this.xcontext)).thenReturn(this.translatedDocument);\n+        when(this.translatedDocument.getRealLocale()).thenReturn(Locale.FRENCH);\n+        when(this.translatedDocument.getLocale()).thenReturn(Locale.FRENCH);\n+        when(this.translatedDocument.getDocumentReference()).thenReturn(this.frenchDocumentReference);\n+        when(this.translatedDocument.getAuthors()).thenReturn(this.documentAuthors);\n+\n+        // Make sure that Utils.getComponent works (used in BaseObjectReference).\n+        Utils.setComponentManager(componentManager);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getDocumentWithPropertyParameters\")\n+    void getDocumentWithProperty(PropertyClass propertyClass, Object value, boolean obfuscate, boolean visible)\n+        throws Exception\n+    {\n+        when(this.mailConfiguration.shouldObfuscate()).thenReturn(obfuscate);\n+        // Setup object\n+        BaseObject object = mock(BaseObject.class);\n+\n+        // Setup property\n+        BaseProperty<ObjectPropertyReference> property = mock(BaseProperty.class);\n+        String propertyName = \"property\";\n+        when(property.getName()).thenReturn(propertyName);\n+        when(property.getValue()).thenReturn(value);\n+        when(property.getObject()).thenReturn(object);\n+\n+        // Mock the class reference\n+        DocumentReference classReference = new DocumentReference(\"wiki\", Arrays.asList(\"Path\", \"To\"), \"Class\");\n+\n+        BaseClass xclass = mock(BaseClass.class);\n+        when(object.getXClass(this.xcontext)).thenReturn(xclass);\n+        when(object.getFieldList()).thenReturn(List.of(property));\n+        when(property.getPropertyClass(this.xcontext)).thenReturn(propertyClass);\n+        when(object.getXClassReference()).thenReturn(classReference);\n+        when(object.getRelativeXClassReference())\n+            .thenReturn(classReference.removeParent(classReference.getWikiReference()));\n+        when(xclass.get(propertyName)).thenReturn(propertyClass);\n+\n+        BaseObjectReference objectReference = new BaseObjectReference(classReference, 0, this.documentReference);\n+        ObjectPropertyReference propertyReference = new ObjectPropertyReference(propertyName, objectReference);\n+        when(property.getReference()).thenReturn(propertyReference);\n+        when(this.document.getXObjectProperty(propertyReference)).thenReturn(property);\n+\n+        // Construct a property reference based on the French document for getting the document.\n+        BaseObjectReference frenchObjectReference =\n+            new BaseObjectReference(classReference, 0, this.frenchDocumentReference);\n+        ObjectPropertyReference frenchPropertyReference =\n+            new ObjectPropertyReference(propertyName, frenchObjectReference);\n+        when(this.document.getXObjectProperty(frenchPropertyReference)).thenReturn(property);\n+\n+        SolrInputDocument solrDocument = this.metadataExtractor.getSolrDocument(frenchPropertyReference);\n+\n+        // Verify the fields\n+        String serializedClassReference = \"Path.To.Class\";\n+        assertEquals(List.of(serializedClassReference), solrDocument.getFieldValues(FieldUtils.CLASS));\n+        assertEquals(0, solrDocument.getFieldValue(FieldUtils.NUMBER));\n+        assertEquals(propertyName, solrDocument.getFieldValue(FieldUtils.PROPERTY_NAME));\n+        String fieldName = FieldUtils.getFieldName(FieldUtils.PROPERTY_VALUE, null);\n+        String localizedFieldName = FieldUtils.getFieldName(FieldUtils.PROPERTY_VALUE, Locale.FRENCH);\n+        if (visible) {\n+            List<?> values;\n+            if (value instanceof List) {\n+                values = (List<?>) value;\n+            } else {\n+                values = Collections.singletonList(value);\n+            }\n+            assertEquals(values, solrDocument.getFieldValues(fieldName));\n+            assertEquals(values, solrDocument.getFieldValues(localizedFieldName));\n+        } else {\n+            assertNull(solrDocument.getFieldValue(fieldName));\n+            assertNull(solrDocument.getFieldValue(localizedFieldName));\n+        }\n+    }\n+\n+    static Stream<Arguments> getDocumentWithPropertyParameters()\n+    {\n+        return Stream.of(\n+            arguments(mock(StringClass.class), \"value\", false, true),\n+            arguments(mock(EmailClass.class), \"email@example.com\", false, true),\n+            arguments(mock(EmailClass.class), \"hidden@example.com\", true, false),\n+            arguments(mock(PasswordClass.class), \"passw0rd\", false, false),\n+            arguments(mock(StaticListClass.class), List.of(\"red\", \"green\"), false, true)\n+        );\n+    }\n+\n+}"
        }
    ],
    "commitTime": "2023-08-10 10:03:08"
}