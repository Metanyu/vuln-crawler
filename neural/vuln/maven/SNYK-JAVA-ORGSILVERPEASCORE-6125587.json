{
    "CVSSv3": {
        "CVSS": "3.1",
        "E": "P",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "REQUIRED",
        "scope": "CHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "HIGH"
    },
    "credit": [
        "Tyler Ramsbey"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 8.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "REQUIRED",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "high"
        }
    ],
    "cvssScore": 8.3,
    "disclosureTime": "2023-12-13 15:30:58",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.06914",
        "probability": "0.00043"
    },
    "exploitMaturity": "Proof of Concept",
    "id": "SNYK-JAVA-ORGSILVERPEASCORE-6125587",
    "identifiers": {
        "CVE": [
            "CVE-2023-47326"
        ],
        "CWE": [
            "CWE-352"
        ]
    },
    "language": "java",
    "malicious": false,
    "packageManager": "maven",
    "publicationTime": "2023-12-14 13:55:27",
    "remediation": "A fix was pushed into the master branch but not yet published. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Cross-Site Request Forgery (CSRF)",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Cross-Site Request Forgery (CSRF) via the Domain SQL Create function. An attacker can perform unauthorized actions on behalf of a legitimate user by tricking the user into executing maliciously crafted web requests. Note: The targeted user must have administrator privileges. "
    },
    "source_code": [
        {
            "filename": "core-api/src/main/java/org/silverpeas/core/security/html/HtmlSanitizer.java",
            "diff": "@@ -39,6 +39,13 @@ static HtmlSanitizer get() {\n     return ServiceProvider.getSingleton(HtmlSanitizer.class);\n   }\n \n+  /**\n+   * @see #sanitize(String)\n+   */\n+  static String ofHtml(final String html) {\n+    return HtmlSanitizer.get().sanitize(html);\n+  }\n+\n   /**\n    * Sanitizing the given content by keeping:\n    * <ul>"
        },
        {
            "filename": "core-configuration/src/main/config/resources/StringTemplates/core/token/tokenSetting_js.st",
            "diff": "@@ -36,7 +36,7 @@ function __stampURL(url, tokenName, tokenValue) {\n \n function setTokens(targetContainerSelector) {\n   function hasProtectedWord(hrefLowerCase) {\n-    var actions = ['delete','update','create','block','unblock'];\n+    var actions = ['delete','update','creat','save','block'];\n     for (var i = 0; i < actions.length; i++) {\n       if (hrefLowerCase.indexOf(actions[i]) >= 0) {\n         return true;"
        },
        {
            "filename": "core-library/src/test/java/org/silverpeas/core/security/html/HtmlSanitizerTest.java",
            "diff": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (C) 2000 - 2023 Silverpeas\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * As a special exception to the terms and conditions of version 3.0 of\n+ * the GPL, you may redistribute this Program in connection with Free/Libre\n+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's\n+ * FLOSS exception.  You should have received a copy of the text describing\n+ * the FLOSS exception, and it is also available here:\n+ * \"https://www.silverpeas.org/legal/floss_exception.html\"\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+package org.silverpeas.core.security.html;\n+\n+import org.junit.jupiter.api.Test;\n+import org.silverpeas.core.test.extention.EnableSilverTestEnv;\n+import org.silverpeas.core.test.extention.TestedBean;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.emptyString;\n+import static org.hamcrest.Matchers.is;\n+import static org.silverpeas.core.util.StringUtil.EMPTY;\n+\n+/**\n+ * @author silveryocha\n+ */\n+@EnableSilverTestEnv\n+class HtmlSanitizerTest {\n+\n+  @TestedBean\n+  private DefaultHtmlSanitizer service;\n+\n+  @Test\n+  void sanitizeNotDefined() {\n+    assertThat(service.sanitize(null), emptyString());\n+    assertThat(service.sanitize(EMPTY), emptyString());\n+  }\n+\n+  @Test\n+  void sanitizeText() {\n+    String payload = \"BEFORE<iframe>INSIDE</iframe>AFTER\";\n+    assertThat(service.sanitize(payload), is(\"BEFOREAFTER\"));\n+    payload = \"BEFORE< iframe  >INSIDE</ iframe >AFTER\";\n+    assertThat(service.sanitize(payload),\n+        is(\"BEFORE&lt; iframe  &gt;INSIDE&lt;/ iframe &gt;AFTER\"));\n+    payload = \"BEFORE< \\t iframe>INSIDE</\\t iframe\\n>AFTER\";\n+    assertThat(service.sanitize(payload),\n+        is(\"BEFORE&lt; \\t iframe&gt;INSIDE&lt;/\\t iframe\\n&gt;AFTER\"));\n+  }\n+\n+  @Test\n+  void sanitizeIFrame() {\n+    String iframe = \"BEFORE<iframe>INSIDE</iframe>AFTER\";\n+    assertThat(service.sanitize(iframe), is(\"BEFOREAFTER\"));\n+    iframe = \"BEFORE< iframe  >INSIDE</ iframe >AFTER\";\n+    assertThat(service.sanitize(iframe), is(\"BEFORE&lt; iframe  &gt;INSIDE&lt;/ iframe &gt;AFTER\"));\n+    iframe = \"BEFORE< \\t iframe>INSIDE</\\t iframe\\n>AFTER\";\n+    assertThat(service.sanitize(iframe),\n+        is(\"BEFORE&lt; \\t iframe&gt;INSIDE&lt;/\\t iframe\\n&gt;AFTER\"));\n+  }\n+\n+  @Test\n+  void sanitizeScript() {\n+    String script =\n+        \"BEFORE<script type=\\\"text/javascript\\\">window.alert('Silverpeas')\" + \"</script>AFTER\";\n+    assertThat(service.sanitize(script), is(\"BEFOREAFTER\"));\n+    script =\n+        \"BEFORE< script type=\\\"text/javascript\\\">window.alert('Silverpeas')\" + \"</ script >AFTER\";\n+    assertThat(service.sanitize(script),\n+        is(\"BEFORE&lt; script type&#61;&#34;text/javascript&#34;&gt;window.alert(&#39;\" +\n+            \"Silverpeas&#39;)&lt;/ script &gt;AFTER\"));\n+  }\n+\n+  @Test\n+  void sanitizePayloadExploit() {\n+    final String payload = \"<html><body onload=\\\"document.forms0.submit();\\\"><form \" +\n+        \"action=\\\"http://server/users/1/update\\\" method=\\\"GET\\\"><input type=\\\"hidden\\\" \" +\n+        \"name=\\\"userId\\\" value=\\\"2\\\" /><input type=\\\"hidden\\\" name=\\\"userLastName\\\" \" +\n+        \"value=\\\"Toto\\\" /><input type=\\\"hidden\\\" name=\\\"userAccessLevel\\\" value=\\\"ADMINISTRATOR\\\"\" +\n+        \" /><input type=\\\"hidden\\\" name=\\\"X-STKN\\\" value=\\\"ZKWXYZ\\\" /></form><span>test</span><a \" +\n+        \"href=\\\"http://server/users/1\\\"></a></body></html>\";\n+    assertThat(service.sanitize(payload),\n+        is(\"test<a href=\\\"http://server/users/1\\\" rel=\\\"noopener noreferrer nofollow\\\" \" +\n+            \"target=\\\"_blank\\\"></a>\"));\n+  }\n+}\n\\ No newline at end of file"
        },
        {
            "filename": "core-rs/src/main/java/org/silverpeas/core/web/token/SynchronizerTokenService.java",
            "diff": "@@ -24,8 +24,7 @@\n package org.silverpeas.core.web.token;\n \n import org.silverpeas.core.admin.user.model.User;\n-import org.silverpeas.core.annotation.Bean;\n-import org.silverpeas.core.annotation.Technical;\n+import org.silverpeas.core.annotation.Service;\n import org.silverpeas.core.date.TemporalFormatter;\n import org.silverpeas.core.security.session.SessionInfo;\n import org.silverpeas.core.security.session.SessionManagement;\n@@ -51,25 +50,27 @@\n /**\n  * A service to manage the synchronizer tokens used in Silverpeas to protect the user sessions or\n  * the web resources published by Silverpeas.\n- *\n+ * <p>\n  * Each resource in Silverpeas and accessible through the Web can be protected by one or more\n  * security tokens. These tokens are named synchronizer token as they are transmitted within each\n  * request and must match the ones expected by Silverpeas to access the asked resource. This service\n  * provides the functions to generate, to validate and to set such tokens for the Web resource in\n  * Silverpeas to protect (not all resources require to be protected in Silverpeas).\n- *\n+ * </p>\n  * @author mmoquillon\n  */\n-@Technical\n-@Bean\n+@Service\n public class SynchronizerTokenService {\n \n   public static final String SESSION_TOKEN_KEY = \"X-STKN\";\n   public static final String NAVIGATION_TOKEN_KEY = \"X-NTKN\";\n   private static final String UNPROTECTED_URI_RULE =\n       \"(?i)(?!.*(/qaptcha|rpdcsearch/|rclipboard/|rselectionpeaswrapper/|rusernotification/|services/usernotifications/|blockingNews|services/password/)).*\";\n-  private static final String DEFAULT_GET_RULE\n-      = \"(?i)^/\\\\w+[\\\\w/]*/jsp/.*(delete|update|creat|block|unblock).*$\";\n+  private static final String DEFAULT_GET_RULE_KEYWORDS = \"(delete|update|creat|save|block)\";\n+  private static final String DEFAULT_GET_RULE_ON_KEYWORD =\n+      \"(?i)^.*\" + DEFAULT_GET_RULE_KEYWORDS + \".*$\";\n+  private static final String DEFAULT_GET_RULE =\n+      \"(?i)^/\\\\w+[\\\\w/]*/jsp/.*\" + DEFAULT_GET_RULE_KEYWORDS + \".*$\";\n   private static final SilverLogger logger = SilverLogger.getLogger(\"silverpeas.core.security\");\n   private static final List<String> DEFAULT_PROTECTED_METHODS = Arrays.asList(\"POST\", \"PUT\",\n       \"DELETE\");\n@@ -87,11 +88,11 @@ protected SynchronizerTokenService() {\n    * Sets up a session token for the specified Silverpeas session. It creates a synchronizer token\n    * to protect the specified opened user session. If a token is already protecting the session, the\n    * token is then renewed.\n-   *\n+   * <p>\n    * A session token is a token used to validate that any requests to a protected web resource are\n    * correctly sent within an opened and valid user session. The setting occurs only if the security\n    * mechanism by token is enabled.\n-   *\n+   * </p>\n    * @param session the user session to protect with a synchronizer token.\n    */\n   public void setUpSessionTokens(SessionInfo session) {\n@@ -136,23 +137,27 @@ public void setUpNavigationTokens(HttpServletRequest request) {\n    * Validates the request to a Silverpeas web resource can be trusted. The request is validated\n    * only if both the security mechanism by token is enabled and the request targets a protected web\n    * resource.\n-   *\n+   * <p>\n    * The access to a protected web resource is considered as trusted if and only if it is stamped\n    * with the expected security tokens for the requested resource. Otherwise, the request isn't\n    * considered as trusted and should be rejected. A request is stamped at least with the session\n    * token, that is to say with the token that is set with the user session.\n-   *\n+   * </p>\n    * @param request the HTTP request to check.\n+   * @param onKeywordsOnly true to verify the request URI against predefined keywords without\n+   * taking care of the entire request URI. false to verify the keywords into request URI structure.\n    * @throws TokenValidationException if the specified request cannot be trusted.\n    */\n-  public void validate(HttpServletRequest request) throws TokenValidationException {\n-    if (SecuritySettings.isWebSecurityByTokensEnabled() && isAProtectedResource(request)) {\n+  public void validate(HttpServletRequest request, final boolean onKeywordsOnly)\n+      throws TokenValidationException {\n+    if (SecuritySettings.isWebSecurityByTokensEnabled() &&\n+        isAProtectedResource(request, onKeywordsOnly)) {\n       logger.debug(\"Validate the request for path {0}\", getRequestPath(request));\n       Token expectedToken = getSessionToken(request);\n       // is there a user session opened?\n       if (expectedToken.isDefined()) {\n         String actualToken = getTokenInRequest(SESSION_TOKEN_KEY, request);\n-        validate(actualToken, expectedToken);\n+        validate(request, actualToken, expectedToken);\n       }\n \n       // is the navigation protected by a token?\n@@ -161,28 +166,32 @@ public void validate(HttpServletRequest request) throws TokenValidationException\n       if (expectedToken.isDefined()) {\n         logger.debug(\"Validate the request origin for path {0}\", getRequestPath(request));\n         String actualToken = getTokenInRequest(NAVIGATION_TOKEN_KEY, request);\n-        validate(actualToken, expectedToken);\n+        validate(request, actualToken, expectedToken);\n       }\n     }\n   }\n \n   /**\n    * Is the resource targeted by the specified request must be protected by a synchronizer token?\n-   *\n+   * <p>\n    * A resource is protected if either the request is a POST, PUT or a DELETE HTTP method or if the\n    * requested URI is declared as to be protected.\n-   *\n+   * </p>\n    * @param request the request to a possibly protected resource.\n+   * @param onKeywordsOnly true to verify the request URI against predefined keywords without\n+   * taking care of the entire request URI. false to verify the keywords into request URI structure.\n    * @return true if the requested resource is a protected one and then the request should be\n-   * validate.\n+   * validated.\n    */\n-  public boolean isAProtectedResource(HttpServletRequest request) {\n+  public boolean isAProtectedResource(HttpServletRequest request, final boolean onKeywordsOnly) {\n     boolean isProtected = false;\n     if (request.getRequestURI().matches(UNPROTECTED_URI_RULE)) {\n       isProtected = DEFAULT_PROTECTED_METHODS.contains(request.getMethod());\n-      if (!isProtected && request.getMethod().equals(\"GET\")) {\n+      if (!isProtected && \"GET\".equals(request.getMethod())) {\n         String path = getRequestPath(request);\n-        isProtected = path.matches(DEFAULT_GET_RULE);\n+        isProtected = onKeywordsOnly ?\n+            path.matches(DEFAULT_GET_RULE_ON_KEYWORD) :\n+            path.matches(DEFAULT_GET_RULE);\n       }\n     }\n     return isProtected;\n@@ -231,16 +240,22 @@ private String getRequestPath(HttpServletRequest request) {\n     return path;\n   }\n \n-  private void validate(String actualToken, Token expectedToken) throws TokenValidationException {\n+  private void validate(final HttpServletRequest request, String actualToken, Token expectedToken)\n+      throws TokenValidationException {\n     if (!(StringUtil.isDefined(actualToken) && expectedToken.isDefined()\n         && expectedToken.getValue().equals(actualToken))) {\n-      throwTokenInvalidException();\n+      throwTokenInvalidException(request);\n     }\n   }\n \n-  private void throwTokenInvalidException() throws TokenValidationException {\n+  private void throwTokenInvalidException(final HttpServletRequest request)\n+      throws TokenValidationException {\n     String now = TemporalFormatter.toBaseIso8601(OffsetDateTime.now(), true);\n-    throw new TokenValidationException(\"Attempt of a CSRF attack detected at \" + now);\n+    final TokenValidationException exception = new TokenValidationException(\n+        \"Attempt of a CSRF attack detected at \" + now);\n+    logger.error(\"The request for path {0} isn''t valid: {1}\", request.getRequestURI(),\n+        exception.getMessage());\n+    throw exception;\n   }\n \n   private Token getTokenInSession(String tokenId, HttpServletRequest request, boolean pop) {"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
            "diff": "@@ -258,7 +258,7 @@ public String getDestination(String function, JobDomainPeasSessionController job\n           }\n \n           destination = DOMAIN_CONTENT_DEST;\n-        } else if (function.startsWith(\"userModify\")) {\n+        } else if (function.startsWith(\"userUpdate\")) {\n           UserRequestData userRequestData =\n               RequestParameterDecoder.decode(request, UserRequestData.class);\n \n@@ -430,7 +430,7 @@ public String getDestination(String function, JobDomainPeasSessionController job\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(GROUP_NAME_PARAM)),\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupDescription\")),\n               request.getParameter(\"groupRule\"));\n-        } else if (function.startsWith(\"groupModify\")) {\n+        } else if (function.startsWith(\"groupUpdate\")) {\n           bHaveToRefreshDomain = jobDomainSC.modifyGroup(request.getParameter(IDGROUP_PARAM),\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(GROUP_NAME_PARAM)),\n               WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupDescription\")),\n@@ -634,9 +634,9 @@ public String getDestination(String function, JobDomainPeasSessionController job\n               .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),\n                   jobDomainSC.getString(\"JDP.groupAdd\") + \"...\"));\n           destination = \"groupCreate.jsp\";\n-        } else if (function.startsWith(\"displayGroupModify\")) {\n+        } else if (function.startsWith(\"displayGroupUpdate\")) {\n           request.setAttribute(GROUP_OBJECT_ATTR, jobDomainSC.getTargetGroup());\n-          request.setAttribute(ACTION_ATTR, \"groupModify\");\n+          request.setAttribute(ACTION_ATTR, \"groupUpdate\");\n           request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC\n               .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),\n                   jobDomainSC.getString(\"JDP.groupUpdate\") + \"...\"));\n@@ -679,9 +679,9 @@ public String getDestination(String function, JobDomainPeasSessionController job\n                   jobDomainSC.getString(\"JDP.csvImport\") + \"...\"));\n           request.setAttribute(\"FieldLabelsToImport\", jobDomainSC.getFieldLabelsOfCSVToImport());\n           destination = \"usersCsvImport.jsp\";\n-        } else if (function.startsWith(\"displayUserModify\")) {\n+        } else if (function.startsWith(\"displayUserUpdate\")) {\n           request.setAttribute(USER_OBJECT_ATTR, jobDomainSC.getTargetUserFull());\n-          request.setAttribute(ACTION_ATTR, \"userModify\");\n+          request.setAttribute(ACTION_ATTR, \"userUpdate\");\n           request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC\n               .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),\n                   jobDomainSC.getString(\"JDP.userUpdate\") + \"...\"));"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
            "diff": "@@ -25,6 +25,7 @@\n \n import org.silverpeas.core.notification.user.NotificationContext;\n import org.silverpeas.core.notification.user.UserNotification;\n+import org.silverpeas.core.security.html.HtmlSanitizer;\n import org.silverpeas.core.util.ResourceLocator;\n import org.silverpeas.core.util.SettingBundle;\n import org.silverpeas.core.util.StringUtil;\n@@ -125,9 +126,10 @@ public String getDestination(String function, UserNotificationSessionController\n   private NotificationContext getNotificationContext(final HttpRequest request) {\n     final NotificationContext context = new NotificationContext(getCurrentRequester());\n     Enumeration<String> parameters = request.getParameterNames();\n+    final HtmlSanitizer htmlSanitizer = HtmlSanitizer.get();\n     while (parameters.hasMoreElements()) {\n       final String name = parameters.nextElement();\n-      context.put(name, request.getParameter(name));\n+      context.put(name, htmlSanitizer.sanitize(request.getParameter(name)));\n     }\n     return context;\n   }"
        },
        {
            "filename": "core-war/src/main/java/org/silverpeas/web/token/SessionSynchronizerTokenValidator.java",
            "diff": "@@ -85,19 +85,17 @@ public class SessionSynchronizerTokenValidator implements Filter {\n   @Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n       throws IOException, ServletException {\n-\n     HttpServletRequest httpRequest = (HttpServletRequest) request;\n     if (SecuritySettings.isWebSecurityByTokensEnabled() && isProtectedResource(httpRequest)) {\n       try {\n         checkAuthenticatedRequest(httpRequest);\n-        tokenService.validate(httpRequest);\n+        tokenService.validate(httpRequest, false);\n         chain.doFilter(request, response);\n       } catch (TokenValidationException ex) {\n-        logger.error(\"The request for path {0} isn''t valid: {1}\", pathOf(request), ex.getMessage());\n         ((HttpServletResponse) response).sendError(HttpServletResponse.SC_FORBIDDEN);\n       } catch (UnauthenticatedRequestException ex) {\n         logger.error(\"The request for path {0} isn''t sent within an opened session\",\n-            pathOf(request));\n+            ((HttpServletRequest) request).getRequestURI());\n         redirectToAuthenticationPage(request, response);\n       }\n     } else {\n@@ -162,7 +160,7 @@ private boolean isCredentialManagement(HttpServletRequest request) {\n   }\n \n   private boolean isProtectedResource(HttpServletRequest request) {\n-    return tokenService.isAProtectedResource(request) && !isFileDragAndDrop(request) &&\n+    return tokenService.isAProtectedResource(request, false) && !isFileDragAndDrop(request) &&\n         !isCredentialManagement(request) && !isSsoAuthentication(request) &&\n         !isWebServiceRequested(request) &&\n         !isWebBrowserEditionResource(request) && !isCMISResource(request) &&\n@@ -198,13 +196,7 @@ private boolean isDragAndDropWebEditionResource(HttpServletRequest request) {\n     return request.getRequestURI().contains(getApplicationURL() + \"/Rddwe/\");\n   }\n \n-  private String pathOf(ServletRequest request) {\n-    return ((HttpServletRequest) request).getRequestURI();\n-  }\n-\n   private static class UnauthenticatedRequestException extends Exception {\n-\n     private static final long serialVersionUID = 9173126171348369053L;\n-\n   }\n }"
        },
        {
            "filename": "core-war/src/main/webapp/POPUP/jsp/readMessage.jsp",
            "diff": "@@ -53,7 +53,7 @@\n     <c:set var=\"popupMsgId\" value=\"${popupMsg.id}\"/>\n     <c:set var=\"popupMsgDate\" value=\"${popupMsg.date}\"/>\n     <c:set var=\"popupMsgTime\" value=\"${popupMsg.time}\"/>\n-    <c:set var=\"popupMsgBody\" value=\"${popupMsg.body}\"/>\n+    <c:set var=\"popupMsgBody\" value=\"${silfn:sanitizeHtml(popupMsg.body)}\"/>\n     <c:set var=\"popupMsgUrl\" value=\"${popupMsg.url}\"/>\n     <c:set var=\"senderId\" value=\"${popupMsg.senderId}\"/>\n     <c:set var=\"senderName\" value=\"${silfn:defaultEmptyString(popupMsg.senderName)}\"/>"
        },
        {
            "filename": "core-war/src/main/webapp/SILVERMAIL/jsp/main.jsp",
            "diff": "@@ -187,7 +187,7 @@\n               </c:if>\n             </view:arrayCellText>\n             <view:arrayCellText>\n-              <a href=\"${viewUrl}\">${silfn:escapeHtml(userNotification.data.subject)}</a>\n+              <a href=\"${viewUrl}\">${silfn:sanitizeHtml(userNotification.data.subject)}</a>\n             </view:arrayCellText>\n             <view:arrayCellText>\n               <a href=\"${viewUrl}\">${silfn:escapeHtml(userNotification.data.senderName)}</a>"
        },
        {
            "filename": "core-war/src/main/webapp/SILVERMAIL/jsp/readMessage.jsp",
            "diff": "@@ -97,7 +97,7 @@\n       </div>\n     </c:if>\n     <div class=\"content-notification rich-content\">\n-        ${msg.body}\n+        ${silfn:sanitizeHtml(msg.body)}\n     </div>\n \n     <view:buttonPane>"
        },
        {
            "filename": "core-war/src/main/webapp/SILVERMAIL/jsp/readSentNotification.jsp",
            "diff": "@@ -84,7 +84,7 @@\n       </div>\n     </c:if>\n     <div class=\"content-notification rich-content\">\n-        ${notif.body}\n+        ${silfn:sanitizeHtml(notif.body)}\n     </div>\n     <view:buttonPane>\n       <fmt:message var=\"deleteLabel\" key=\"delete\"/>"
        },
        {
            "filename": "core-war/src/main/webapp/SILVERMAIL/jsp/sentUserNotifications.jsp",
            "diff": "@@ -134,7 +134,7 @@ response.setDateHeader (\"Expires\",-1);          //prevents caching at the proxy\n               <a href=\"${viewUrl}\">${silfn:formatDate(sentUserNotification.data.notifDate, _userLanguage)}</a>\n             </view:arrayCellText>\n             <view:arrayCellText>\n-              <a href=\"${viewUrl}\">${silfn:escapeHtml(sentUserNotification.data.title)}</a>\n+              <a href=\"${viewUrl}\">${silfn:sanitizeHtml(sentUserNotification.data.title)}</a>\n             </view:arrayCellText>\n             <view:arrayCellText>\n               <a href=\"${viewUrl}\">${silfn:escapeHtml(sentUserNotification.data.source)}</a>"
        },
        {
            "filename": "core-war/src/main/webapp/jobDomainPeas/jsp/groupContent.jsp",
            "diff": "@@ -81,7 +81,7 @@\n       showTabs = true;\n       // Group operations\n       operationPane.addOperationOfCreation(resource.getIcon(\"JDP.groupAdd\"), resource.getString(\"JDP.groupAdd\"), \"displayGroupCreate?Idgroup=\" + thisGroupId);\n-      operationPane.addOperation(resource.getIcon(\"JDP.groupUpdate\"), resource.getString(\"GML.modify\"), \"displayGroupModify?Idgroup=\" + thisGroupId);\n+      operationPane.addOperation(resource.getIcon(\"JDP.groupUpdate\"), resource.getString(\"GML.modify\"), \"displayGroupUpdate?Idgroup=\" + thisGroupId);\n       operationPane.addOperation(resource.getIcon(\"JDP.groupDel\"), resource.getString(\"GML.remove\"), \"javascript:removeGroup()\");\n       // User operations\n       operationPane.addLine();\n@@ -103,7 +103,7 @@\n       } else {\n         //Group operations\n         operationPane.addOperationOfCreation(resource.getIcon(\"JDP.groupAdd\"), resource.getString(\"JDP.groupAdd\"), \"displayGroupCreate?Idgroup=\" + thisGroupId);\n-        operationPane.addOperation(resource.getIcon(\"JDP.groupUpdate\"), resource.getString(\"GML.modify\"), \"displayGroupModify?Idgroup=\" + thisGroupId);\n+        operationPane.addOperation(resource.getIcon(\"JDP.groupUpdate\"), resource.getString(\"GML.modify\"), \"displayGroupUpdate?Idgroup=\" + thisGroupId);\n         if (!isGroupManagerDirectly) {\n           operationPane.addOperation(resource.getIcon(\"JDP.groupDel\"), resource.getString(\"GML.remove\"), \"javascript:removeGroup()\");\n         }"
        },
        {
            "filename": "core-war/src/main/webapp/jobDomainPeas/jsp/userContent.jsp",
            "diff": "@@ -116,7 +116,7 @@\n     if (isUserFull) {\n       operationPane\n           .addOperation(resource.getIcon(\"JDP.userUpdate\"), resource.getString(\"GML.modify\"),\n-              \"displayUserModify?Iduser=\" + thisUserId);\n+              \"displayUserUpdate?Iduser=\" + thisUserId);\n     }\n     updatableUser = true;\n     if (userObject.isBlockedState()) {"
        },
        {
            "filename": "core-war/src/main/webapp/jobDomainPeas/jsp/userCreate.jsp",
            "diff": "@@ -90,7 +90,7 @@\n   List<Group> groups = (List<Group>) request.getAttribute(\"GroupsManagedByCurrentUser\");\n \n   boolean userCreation = \"userCreate\".equals(action);\n-  boolean extraInfosUpdatable = userCreation || \"userModify\".equals(action);\n+  boolean extraInfosUpdatable = userCreation || \"userUpdate\".equals(action);\n \n   browseBar.setComponentName(getDomainLabel(domObject, resource),\n       \"domainContent?Iddomain=\" + domObject.getId());\n@@ -165,8 +165,8 @@ function ifCorrectBasicFormExecute(callback) {\n   <% if (userObject.isPasswordAvailable()) { %>\n   if ($('#userPasswordValid:checked').val()) {\n     var $pwdInput = $('#userPasswordId');\n-    <% if (userCreation || \"userModify\".equals(action)) { %>\n-    <% if (\"userModify\".equals(action)) { %>\n+    <% if (userCreation || \"userUpdate\".equals(action)) { %>\n+    <% if (\"userUpdate\".equals(action)) { %>\n     if ($pwdInput.val()) {\n       <% } %>\n       var passwordDeferred = sp.promise.deferred();\n@@ -183,7 +183,7 @@ function ifCorrectBasicFormExecute(callback) {\n       if ($pwdInput.val() != $('#userPasswordAgainId').val()) {\n         SilverpeasError.add(\"<fmt:message key='JDP.confirmPwdError'/>\");\n       }\n-      <% if (\"userModify\".equals(action)) { %>\n+      <% if (\"userUpdate\".equals(action)) { %>\n     }\n     <% } %>\n     <% } %>"
        },
        {
            "filename": "core-war/src/main/webapp/util/javaScript/vuejs/components/notification/silverpeas-user-notification-templates.jsp",
            "diff": "@@ -80,7 +80,7 @@\n        v-bind:class=\"mainClasses\"\n        v-on:mouseover=\"toggleButtons(true)\"\n        v-on:mouseleave=\"toggleButtons(false)\">\n-    <div class=\"user-notification-subject\">{{notification.subject}}</div>\n+    <div class=\"user-notification-subject\" v-html=\"notification.subject\"></div>\n     <div class=\"date-from\">\n       <span class=\"user-notification-date\">{{notification.date | displayAsDate}}</span>\n       <span class=\"user-notification-from\">{{notification.senderName}}</span>"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
            "diff": "@@ -32,6 +32,7 @@\n import org.silverpeas.core.security.session.SessionManagement;\n import org.silverpeas.core.security.session.SessionManagementProvider;\n import org.silverpeas.core.security.token.Token;\n+import org.silverpeas.core.security.token.exception.TokenValidationException;\n import org.silverpeas.core.silverstatistics.volume.service.SilverStatisticsManager;\n import org.silverpeas.core.util.JSONCodec;\n import org.silverpeas.core.util.MultiSilverpeasBundle;\n@@ -205,6 +206,8 @@ private String computeDestination(HttpServletRequest request) {\n       return destination;\n     }\n \n+    validateSecurityTokens(request);\n+\n     T ctrl = this.getComponentSessionController(session, componentId);\n     if (ctrl == null) {\n       ctrl = setComponentSessionController(session, mainSessionCtrl, spaceId, componentId);\n@@ -319,6 +322,14 @@ public void updateSessionManagement(HttpSession session, String destination) {\n     sessionManagement.validateSession(session.getId());\n   }\n \n+  private void validateSecurityTokens(final HttpServletRequest request) {\n+    try {\n+      SynchronizerTokenService.getInstance().validate(request, true);\n+    } catch (TokenValidationException ex) {\n+      throwHttpForbiddenError();\n+    }\n+  }\n+\n   // isUserStateValid if the user is allowed to access the required component\n   private boolean isUserAllowed(MainSessionController controller, String componentId) {\n     boolean[] userAllowed = {componentId == null ||"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/browsebars/BrowseBarComplete.java",
            "diff": "@@ -33,7 +33,6 @@\n import org.silverpeas.core.admin.space.SpaceInstLight;\n import org.silverpeas.core.util.StringUtil;\n import org.silverpeas.core.util.URLUtil;\n-import org.silverpeas.core.util.WebEncodeHelper;\n import org.silverpeas.core.util.html.HtmlCleaner;\n import org.silverpeas.core.util.logging.SilverLogger;\n \n@@ -241,7 +240,7 @@ private void appendElement(StringBuilder breadcrumb, BrowseBarElement element) {\n       breadcrumb.append(\" id=\\\"\").append(element.getId()).append(\"\\\"\");\n     }\n     breadcrumb.append(\">\");\n-    breadcrumb.append(WebEncodeHelper.javaStringToHtmlString(element.getLabel()));\n+    breadcrumb.append(element.getLabel());\n     if (StringUtil.isDefined(element.getLink())) {\n       breadcrumb.append(\"</a>\");\n     } else {"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/browsebars/BrowseBarElement.java",
            "diff": "@@ -23,6 +23,8 @@\n  */\n package org.silverpeas.core.web.util.viewgenerator.html.browsebars;\n \n+import org.silverpeas.core.security.html.HtmlSanitizer;\n+\n public class BrowseBarElement {\n \n   private String label;\n@@ -40,7 +42,7 @@ public BrowseBarElement(String label, String link, String id) {\n   }\n \n   public String getLabel() {\n-    return label;\n+    return HtmlSanitizer.get().sanitize(label);\n   }\n \n   public String getLink() {"
        },
        {
            "filename": "core-web/src/main/java/org/silverpeas/core/webapi/notification/user/InboxUserNotificationEntity.java",
            "diff": "@@ -27,6 +27,7 @@\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILMessage;\n+import org.silverpeas.core.security.html.HtmlSanitizer;\n import org.silverpeas.core.util.logging.SilverLogger;\n import org.silverpeas.core.web.rs.WebEntity;\n \n@@ -142,15 +143,16 @@ public boolean isRead() {\n   protected InboxUserNotificationEntity decorate(final SILVERMAILMessage notification) {\n     this.id = notification.getId();\n     this.source = notification.getSource();\n-    this.subject = notification.getSubject();\n+    final HtmlSanitizer htmlSanitizer = HtmlSanitizer.get();\n+    this.subject = htmlSanitizer.sanitize(notification.getSubject());\n     this.senderName = notification.getSenderName();\n     this.date = toLocalDate(notification.getDate()).toString();\n     try {\n       this.resourceViewUrl = UriBuilder.fromUri(notification.getUrl()).build();\n     } catch (Exception e) {\n       SilverLogger.getLogger(this).warn(e);\n     }\n-    this.content = notification.getBody();\n+    this.content = htmlSanitizer.sanitize(notification.getBody());\n     this.read = notification.getReaden() > 0;\n     return this;\n   }"
        },
        {
            "filename": "core-web/src/main/resources/META-INF/silverFunctions.tld",
            "diff": "@@ -221,6 +221,12 @@\n     <function-class>org.silverpeas.core.util.WebEncodeHelper</function-class>\n     <function-signature>java.lang.String javaStringToJsString( java.lang.String ) </function-signature>\n   </function>\n+  <function>\n+    <description>Function to encode a java String into a HTML String.</description>\n+    <name>sanitizeHtml</name>\n+    <function-class>org.silverpeas.core.security.html.HtmlSanitizer</function-class>\n+    <function-signature>java.lang.String ofHtml(java.lang.String)</function-signature>\n+  </function>\n   <function>\n     <description>Function to encode a java String into a HTML String.</description>\n     <name>escapeHtml</name>"
        }
    ],
    "commitTime": "2023-10-27 14:49:42"
}