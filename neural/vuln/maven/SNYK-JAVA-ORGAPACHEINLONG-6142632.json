{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "HIGH"
    },
    "credit": [
        "X1r0z"
    ],
    "cvssDetails": [],
    "cvssScore": 9.8,
    "disclosureTime": "2024-01-03 10:51:30",
    "epssDetails": null,
    "exploitMaturity": "Not Defined",
    "id": "SNYK-JAVA-ORGAPACHEINLONG-6142632",
    "identifiers": {
        "CVE": [
            "CVE-2023-51785"
        ],
        "CWE": [
            "CWE-502"
        ]
    },
    "language": "java",
    "malicious": false,
    "packageManager": "maven",
    "publicationTime": "2024-01-03 17:05:42",
    "remediation": "Upgrade org.apache.inlong:manager-service to version 1.10.0 or higher. ",
    "severity": "critical",
    "socialTrendAlert": false,
    "title": "Deserialization of Untrusted Data",
    "vulnDescription": {
        "Details": "Serialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like Remote Method Invocation (RMI) , Java Management Extension (JMX) , Java Messaging System (JMS) , Action Message Format (AMF) , Java Server Faces (JSF) ViewState , etc. Deserialization of untrusted data ( CWE-502 ) is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, thus allowing the attacker to control the state or the flow of the execution. ",
        "Overview": "Affected versions of this package are vulnerable to Deserialization of Untrusted Data due to improper input handling during the deserialization process. An attacker can perform arbitrary file read attacks by exploiting the MySQL driver. "
    },
    "source_code": [
        {
            "filename": "inlong-manager/manager-pojo/src/main/java/org/apache/inlong/manager/pojo/node/starrocks/StarRocksDataNodeDTO.java",
            "diff": "@@ -21,6 +21,7 @@\n import org.apache.inlong.manager.common.exceptions.BusinessException;\n import org.apache.inlong.manager.common.util.CommonBeanUtils;\n import org.apache.inlong.manager.common.util.JsonUtils;\n+import org.apache.inlong.manager.pojo.util.MySQLSensitiveUrlUtils;\n \n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n@@ -67,4 +68,11 @@ public static StarRocksDataNodeDTO getFromJson(@NotNull String extParams) {\n         }\n     }\n \n+    /**\n+     * Convert ip:post to jdbcurl.\n+     */\n+    public static String convertToJdbcUrl(String url) {\n+        return MySQLSensitiveUrlUtils.filterSensitive(url);\n+    }\n+\n }"
        },
        {
            "filename": "inlong-manager/manager-pojo/src/main/java/org/apache/inlong/manager/pojo/sink/mysql/MySQLSinkDTO.java",
            "diff": "@@ -22,6 +22,7 @@\n import org.apache.inlong.manager.common.exceptions.BusinessException;\n import org.apache.inlong.manager.common.util.CommonBeanUtils;\n import org.apache.inlong.manager.common.util.JsonUtils;\n+import org.apache.inlong.manager.pojo.util.MySQLSensitiveUrlUtils;\n \n import com.google.common.base.Strings;\n import io.swagger.annotations.ApiModelProperty;\n@@ -35,13 +36,8 @@\n \n import javax.validation.constraints.NotNull;\n \n-import java.net.URLDecoder;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -54,25 +50,6 @@\n @AllArgsConstructor\n public class MySQLSinkDTO {\n \n-    /**\n-     * The sensitive param may lead the attack.\n-     */\n-    private static final Map<String, String> SENSITIVE_REPLACE_PARAM_MAP = new HashMap<String, String>() {\n-\n-        {\n-            put(\"autoDeserialize\", \"false\");\n-            put(\"allowLoadLocalInfile\", \"false\");\n-            put(\"allowUrlInLocalInfile\", \"false\");\n-        }\n-    };\n-\n-    private static final Set<String> SENSITIVE_REMOVE_PARAM_MAP = new HashSet<String>() {\n-\n-        {\n-            add(\"allowLoadLocalInfileInPath\");\n-        }\n-    };\n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(MySQLSinkDTO.class);\n     private static final String MYSQL_JDBC_PREFIX = \"jdbc:mysql://\";\n \n@@ -216,54 +193,8 @@ public static String setDbNameToUrl(String jdbcUrl, String databaseName) {\n         return resultUrl.toString();\n     }\n \n-    /**\n-     * Filter the sensitive params for the given URL.\n-     *\n-     * @param url str may have some sensitive params\n-     * @return str without sensitive param\n-     */\n     public static String filterSensitive(String url) {\n-        if (StringUtils.isBlank(url)) {\n-            return url;\n-        }\n-\n-        try {\n-            String resultUrl = url;\n-            while (resultUrl.contains(InlongConstants.PERCENT)) {\n-                resultUrl = URLDecoder.decode(resultUrl, \"UTF-8\");\n-            }\n-            resultUrl = resultUrl.replaceAll(InlongConstants.REGEX_WHITESPACE, InlongConstants.EMPTY);\n-\n-            if (resultUrl.contains(InlongConstants.QUESTION_MARK)) {\n-                StringBuilder builder = new StringBuilder();\n-                builder.append(StringUtils.substringBefore(resultUrl, InlongConstants.QUESTION_MARK));\n-                builder.append(InlongConstants.QUESTION_MARK);\n-\n-                List<String> paramList = new ArrayList<>();\n-                String queryString = StringUtils.substringAfter(resultUrl, InlongConstants.QUESTION_MARK);\n-                for (String param : queryString.split(InlongConstants.AMPERSAND)) {\n-                    String key = StringUtils.substringBefore(param, InlongConstants.EQUAL);\n-                    String value = StringUtils.substringAfter(param, InlongConstants.EQUAL);\n-\n-                    if (SENSITIVE_REMOVE_PARAM_MAP.contains(key) || SENSITIVE_REPLACE_PARAM_MAP.containsKey(key)) {\n-                        continue;\n-                    }\n-\n-                    paramList.add(key + InlongConstants.EQUAL + value);\n-                }\n-                SENSITIVE_REPLACE_PARAM_MAP.forEach((key, value) -> paramList.add(key + InlongConstants.EQUAL + value));\n-\n-                String params = StringUtils.join(paramList, InlongConstants.AMPERSAND);\n-                builder.append(params);\n-                resultUrl = builder.toString();\n-            }\n-\n-            LOGGER.info(\"the origin url [{}] was replaced to: [{}]\", url, resultUrl);\n-            return resultUrl;\n-        } catch (Exception e) {\n-            throw new BusinessException(ErrorCodeEnum.SINK_INFO_INCORRECT,\n-                    ErrorCodeEnum.SINK_INFO_INCORRECT.getMessage() + \": \" + e.getMessage());\n-        }\n+        return MySQLSensitiveUrlUtils.filterSensitive(url);\n     }\n \n }"
        },
        {
            "filename": "inlong-manager/manager-pojo/src/main/java/org/apache/inlong/manager/pojo/util/MySQLSensitiveUrlUtils.java",
            "diff": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.inlong.manager.pojo.util;\n+\n+import org.apache.inlong.manager.common.consts.InlongConstants;\n+import org.apache.inlong.manager.common.exceptions.BaseException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Slf4j\n+public class MySQLSensitiveUrlUtils {\n+\n+    /**\n+     * The sensitive param may lead the attack.\n+     */\n+    private static final Map<String, String> SENSITIVE_REPLACE_PARAM_MAP = new HashMap<String, String>() {\n+\n+        {\n+            put(\"autoDeserialize\", \"false\");\n+            put(\"allowLoadLocalInfile\", \"false\");\n+            put(\"allowUrlInLocalInfile\", \"false\");\n+        }\n+    };\n+\n+    private static final Set<String> SENSITIVE_REMOVE_PARAM_MAP = new HashSet<String>() {\n+\n+        {\n+            add(\"allowLoadLocalInfileInPath\");\n+        }\n+    };\n+\n+    /**\n+     * Filter the sensitive params for the given URL.\n+     *\n+     * @param url str may have some sensitive params\n+     * @return str without sensitive param\n+     */\n+    public static String filterSensitive(String url) {\n+        if (StringUtils.isBlank(url)) {\n+            return url;\n+        }\n+\n+        try {\n+            String resultUrl = url;\n+            while (resultUrl.contains(InlongConstants.PERCENT)) {\n+                resultUrl = URLDecoder.decode(resultUrl, \"UTF-8\");\n+            }\n+            resultUrl = resultUrl.replaceAll(InlongConstants.REGEX_WHITESPACE, InlongConstants.EMPTY);\n+\n+            if (resultUrl.contains(InlongConstants.QUESTION_MARK)) {\n+                StringBuilder builder = new StringBuilder();\n+                builder.append(StringUtils.substringBefore(resultUrl, InlongConstants.QUESTION_MARK));\n+                builder.append(InlongConstants.QUESTION_MARK);\n+\n+                List<String> paramList = new ArrayList<>();\n+                String queryString = StringUtils.substringAfter(resultUrl, InlongConstants.QUESTION_MARK);\n+                for (String param : queryString.split(InlongConstants.AMPERSAND)) {\n+                    String key = StringUtils.substringBefore(param, InlongConstants.EQUAL);\n+                    String value = StringUtils.substringAfter(param, InlongConstants.EQUAL);\n+\n+                    if (SENSITIVE_REMOVE_PARAM_MAP.contains(key) || SENSITIVE_REPLACE_PARAM_MAP.containsKey(key)) {\n+                        continue;\n+                    }\n+\n+                    paramList.add(key + InlongConstants.EQUAL + value);\n+                }\n+                SENSITIVE_REPLACE_PARAM_MAP.forEach((key, value) -> paramList.add(key + InlongConstants.EQUAL + value));\n+\n+                String params = StringUtils.join(paramList, InlongConstants.AMPERSAND);\n+                builder.append(params);\n+                resultUrl = builder.toString();\n+            }\n+\n+            log.info(\"MySQL original URL {} was replaced to {}\", url, resultUrl);\n+            return resultUrl;\n+        } catch (Exception e) {\n+            throw new BaseException(String.format(\"Failed to filter MySQL sensitive URL: %s, error: %s\",\n+                    url, e.getMessage()));\n+        }\n+    }\n+}"
        },
        {
            "filename": "inlong-manager/manager-service/src/main/java/org/apache/inlong/manager/service/node/starrocks/StarRocksDataNodeOperator.java",
            "diff": "@@ -88,7 +88,7 @@ protected void setTargetEntity(DataNodeRequest request, DataNodeEntity targetEnt\n \n     @Override\n     public Boolean testConnection(DataNodeRequest request) {\n-        String jdbcUrl = request.getUrl();\n+        String jdbcUrl = StarRocksDataNodeDTO.convertToJdbcUrl(request.getUrl());\n         String username = request.getUsername();\n         String password = request.getToken();\n         Preconditions.expectNotBlank(jdbcUrl, ErrorCodeEnum.INVALID_PARAMETER, \"connection jdbcUrl cannot be empty\");"
        }
    ],
    "commitTime": "2023-11-28 04:52:45"
}