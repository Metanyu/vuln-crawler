{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "NONE"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.1,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "NONE"
            },
            "severity": "critical"
        }
    ],
    "cvssScore": 7.4,
    "disclosureTime": "2023-12-09 03:30:15",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.06910",
        "probability": "0.00043"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-JAVA-IOQUARKUS-6117640",
    "identifiers": {
        "CVE": [
            "CVE-2023-6394"
        ],
        "CWE": [
            "CWE-696"
        ]
    },
    "language": "java",
    "malicious": false,
    "packageManager": "maven",
    "publicationTime": "2023-12-12 13:36:40",
    "remediation": "Upgrade io.quarkus:quarkus-smallrye-graphql-client-parent to version 2.13.9.Final, 3.5.3 or higher. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Incorrect Authorization",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Incorrect Authorization via the handling of websocket requests that lack role-based permissions for GraphQL operations. An attacker can access information and execute functionality that should be restricted by exploiting the lack of authentication checks on secured endpoints. "
    },
    "source_code": [
        {
            "filename": ".github/native-tests.json",
            "diff": "@@ -111,7 +111,7 @@\n         {\n             \"category\": \"Misc3\",\n             \"timeout\": 80,\n-            \"test-modules\": \"kubernetes-client, openshift-client, kubernetes-service-binding-jdbc, smallrye-config, smallrye-graphql, smallrye-graphql-client, smallrye-metrics, smallrye-opentracing\",\n+            \"test-modules\": \"kubernetes-client, openshift-client, kubernetes-service-binding-jdbc, smallrye-config, smallrye-graphql, smallrye-graphql-client, smallrye-graphql-client-keycloak, smallrye-metrics, smallrye-opentracing\",\n             \"os-name\": \"ubuntu-latest\"\n         },\n         {"
        },
        {
            "filename": "extensions/smallrye-graphql-client/deployment/pom.xml",
            "diff": "@@ -63,6 +63,16 @@\n             <artifactId>stork-service-discovery-static-list</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-elytron-security-deployment</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-elytron-security-properties-file-deployment</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n     <build>"
        },
        {
            "filename": "extensions/smallrye-graphql-client/deployment/src/test/java/io/quarkus/smallrye/graphql/client/deployment/DynamicGraphQLClientWebSocketAuthenticationTest.java",
            "diff": "@@ -0,0 +1,207 @@\n+package io.quarkus.smallrye.graphql.client.deployment;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import jakarta.annotation.security.RolesAllowed;\n+import jakarta.json.JsonValue;\n+\n+import org.eclipse.microprofile.graphql.GraphQLApi;\n+import org.eclipse.microprofile.graphql.Query;\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.smallrye.common.annotation.NonBlocking;\n+import io.smallrye.graphql.api.Subscription;\n+import io.smallrye.graphql.client.Response;\n+import io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient;\n+import io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder;\n+import io.smallrye.mutiny.Multi;\n+\n+/**\n+ * Due to the complexity of establishing a WebSocket, WebSocket/Subscription testing of the GraphQL server is done here,\n+ * as the client framework comes in very useful for establishing the connection to the server.\n+ * <br>\n+ * This test establishes connections to the server, and ensures that the connected user has the necessary permissions to\n+ * execute the operation.\n+ */\n+public class DynamicGraphQLClientWebSocketAuthenticationTest {\n+\n+    static String url = \"http://\" + System.getProperty(\"quarkus.http.host\", \"localhost\") + \":\" +\n+            System.getProperty(\"quarkus.http.test-port\", \"8081\") + \"/graphql\";\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest test = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(SecuredApi.class, Foo.class)\n+                    .addAsResource(\"application-secured.properties\", \"application.properties\")\n+                    .addAsResource(\"users.properties\")\n+                    .addAsResource(\"roles.properties\")\n+                    .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\"));\n+\n+    @Test\n+    public void testAuthenticatedUserForSubscription() throws Exception {\n+        DynamicGraphQLClientBuilder clientBuilder = DynamicGraphQLClientBuilder.newBuilder()\n+                .url(url)\n+                .header(\"Authorization\", \"Basic ZGF2aWQ6cXdlcnR5MTIz\");\n+        try (DynamicGraphQLClient client = clientBuilder.build()) {\n+            Multi<Response> subscription = client\n+                    .subscription(\"subscription fooSub { fooSub { message } }\");\n+\n+            assertNotNull(subscription);\n+\n+            AtomicBoolean hasData = new AtomicBoolean(false);\n+            AtomicBoolean hasCompleted = new AtomicBoolean(false);\n+\n+            subscription.subscribe().with(item -> {\n+                assertFalse(hasData.get());\n+                assertTrue(item.hasData());\n+                assertEquals(JsonValue.ValueType.OBJECT, item.getData().get(\"fooSub\").getValueType());\n+                assertEquals(\"foo\", item.getData().getJsonObject(\"fooSub\").getString(\"message\"));\n+                hasData.set(true);\n+            }, Assertions::fail, () -> {\n+                hasCompleted.set(true);\n+            });\n+\n+            await().untilTrue(hasCompleted);\n+            assertTrue(hasData.get());\n+        }\n+    }\n+\n+    @Test\n+    public void testAuthenticatedUserForQueryWebSocket() throws Exception {\n+        DynamicGraphQLClientBuilder clientBuilder = DynamicGraphQLClientBuilder.newBuilder()\n+                .url(url)\n+                .header(\"Authorization\", \"Basic ZGF2aWQ6cXdlcnR5MTIz\")\n+                .executeSingleOperationsOverWebsocket(true);\n+        try (DynamicGraphQLClient client = clientBuilder.build()) {\n+            Response response = client.executeSync(\"{ foo { message} }\");\n+            assertTrue(response.hasData());\n+            assertEquals(\"foo\", response.getData().getJsonObject(\"foo\").getString(\"message\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testAuthorizedAndUnauthorizedForQueryWebSocket() throws Exception {\n+        DynamicGraphQLClientBuilder clientBuilder = DynamicGraphQLClientBuilder.newBuilder()\n+                .url(url)\n+                .header(\"Authorization\", \"Basic ZGF2aWQ6cXdlcnR5MTIz\")\n+                .executeSingleOperationsOverWebsocket(true);\n+        try (DynamicGraphQLClient client = clientBuilder.build()) {\n+            Response response = client.executeSync(\"{ foo { message} }\");\n+            assertTrue(response.hasData());\n+            assertEquals(\"foo\", response.getData().getJsonObject(\"foo\").getString(\"message\"));\n+\n+            // Run a second query with a different result to validate that the result of the first query isn't being cached at all.\n+            response = client.executeSync(\"{ bar { message} }\");\n+            assertEquals(JsonValue.ValueType.NULL, response.getData().get(\"bar\").getValueType());\n+        }\n+    }\n+\n+    @Test\n+    public void testUnauthorizedUserForSubscription() throws Exception {\n+        DynamicGraphQLClientBuilder clientBuilder = DynamicGraphQLClientBuilder.newBuilder()\n+                .url(url)\n+                .header(\"Authorization\", \"Basic ZGF2aWQ6cXdlcnR5MTIz\");\n+        try (DynamicGraphQLClient client = clientBuilder.build()) {\n+            Multi<Response> subscription = client\n+                    .subscription(\"subscription barSub { barSub { message } }\");\n+\n+            assertNotNull(subscription);\n+\n+            AtomicBoolean returned = new AtomicBoolean(false);\n+\n+            subscription.subscribe().with(item -> {\n+                assertEquals(JsonValue.ValueType.NULL, item.getData().get(\"barSub\").getValueType());\n+                returned.set(true);\n+            }, throwable -> Assertions.fail(throwable));\n+\n+            await().untilTrue(returned);\n+        }\n+    }\n+\n+    @Test\n+    public void testUnauthorizedUserForQueryWebSocket() throws Exception {\n+        DynamicGraphQLClientBuilder clientBuilder = DynamicGraphQLClientBuilder.newBuilder()\n+                .url(url)\n+                .header(\"Authorization\", \"Basic ZGF2aWQ6cXdlcnR5MTIz\")\n+                .executeSingleOperationsOverWebsocket(true);\n+        try (DynamicGraphQLClient client = clientBuilder.build()) {\n+            Response response = client.executeSync(\"{ bar { message } }\");\n+            assertEquals(JsonValue.ValueType.NULL, response.getData().get(\"bar\").getValueType());\n+        }\n+    }\n+\n+    @Test\n+    public void testUnauthenticatedForQueryWebSocket() throws Exception {\n+        DynamicGraphQLClientBuilder clientBuilder = DynamicGraphQLClientBuilder.newBuilder()\n+                .url(url)\n+                .executeSingleOperationsOverWebsocket(true);\n+        try (DynamicGraphQLClient client = clientBuilder.build()) {\n+            Response response = client.executeSync(\"{ foo { message} }\");\n+            assertEquals(JsonValue.ValueType.NULL, response.getData().get(\"foo\").getValueType());\n+        }\n+    }\n+\n+    public static class Foo {\n+\n+        private String message;\n+\n+        public Foo(String foo) {\n+            this.message = foo;\n+        }\n+\n+        public String getMessage() {\n+            return message;\n+        }\n+\n+        public void setMessage(String message) {\n+            this.message = message;\n+        }\n+\n+    }\n+\n+    @GraphQLApi\n+    public static class SecuredApi {\n+\n+        @Query\n+        @RolesAllowed(\"fooRole\")\n+        @NonBlocking\n+        public Foo foo() {\n+            return new Foo(\"foo\");\n+        }\n+\n+        @Query\n+        @RolesAllowed(\"barRole\")\n+        public Foo bar() {\n+            return new Foo(\"bar\");\n+        }\n+\n+        @Subscription\n+        @RolesAllowed(\"fooRole\")\n+        public Multi<Foo> fooSub() {\n+            return Multi.createFrom().emitter(emitter -> {\n+                emitter.emit(new Foo(\"foo\"));\n+                emitter.complete();\n+            });\n+        }\n+\n+        @Subscription\n+        @RolesAllowed(\"barRole\")\n+        public Multi<Foo> barSub() {\n+            return Multi.createFrom().emitter(emitter -> {\n+                emitter.emit(new Foo(\"bar\"));\n+                emitter.complete();\n+            });\n+        }\n+\n+    }\n+}"
        },
        {
            "filename": "extensions/smallrye-graphql-client/deployment/src/test/resources/application-secured.properties",
            "diff": "@@ -0,0 +1,9 @@\n+quarkus.security.users.file.enabled=true\n+quarkus.security.users.file.plain-text=true\n+quarkus.security.users.file.users=users.properties\n+quarkus.security.users.file.roles=roles.properties\n+quarkus.http.auth.basic=true\n+\n+quarkus.smallrye-graphql.log-payload=queryAndVariables\n+quarkus.smallrye-graphql.print-data-fetcher-exception=true\n+quarkus.smallrye-graphql.error-extension-fields=exception,classification,code,description,validationErrorType,queryPath"
        },
        {
            "filename": "extensions/smallrye-graphql-client/deployment/src/test/resources/roles.properties",
            "diff": "@@ -0,0 +1 @@\n+david=fooRole\n\\ No newline at end of file"
        },
        {
            "filename": "extensions/smallrye-graphql-client/deployment/src/test/resources/users.properties",
            "diff": "@@ -0,0 +1 @@\n+david=qwerty123\n\\ No newline at end of file"
        },
        {
            "filename": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java",
            "diff": "@@ -64,6 +64,7 @@\n import io.quarkus.smallrye.graphql.runtime.SmallRyeGraphQLRecorder;\n import io.quarkus.smallrye.graphql.runtime.SmallRyeGraphQLRuntimeConfig;\n import io.quarkus.vertx.http.deployment.BodyHandlerBuildItem;\n+import io.quarkus.vertx.http.deployment.FilterBuildItem;\n import io.quarkus.vertx.http.deployment.HttpRootPathBuildItem;\n import io.quarkus.vertx.http.deployment.NonApplicationRootPathBuildItem;\n import io.quarkus.vertx.http.deployment.RouteBuildItem;\n@@ -147,7 +148,7 @@ public class SmallRyeGraphQLProcessor {\n     private static final List<String> SUPPORTED_WEBSOCKET_SUBPROTOCOLS = List.of(SUBPROTOCOL_GRAPHQL_WS,\n             SUBPROTOCOL_GRAPHQL_TRANSPORT_WS);\n \n-    private static final int GRAPHQL_WEBSOCKET_HANDLER_ORDER = -10000;\n+    private static final int GRAPHQL_WEBSOCKET_HANDLER_ORDER = (-1 * FilterBuildItem.AUTHORIZATION) + 1;\n \n     private static final String GRAPHQL_MEDIA_TYPE = \"application/graphql+json\";\n "
        },
        {
            "filename": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLOverWebSocketHandler.java",
            "diff": "@@ -1,17 +1,21 @@\n package io.quarkus.smallrye.graphql.runtime;\n \n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n \n import org.jboss.logging.Logger;\n \n+import io.netty.util.concurrent.ScheduledFuture;\n import io.quarkus.security.identity.CurrentIdentityAssociation;\n import io.quarkus.vertx.http.runtime.CurrentVertxRequest;\n+import io.quarkus.vertx.http.runtime.security.QuarkusHttpUser;\n import io.smallrye.graphql.websocket.GraphQLWebSocketSession;\n import io.smallrye.graphql.websocket.GraphQLWebsocketHandler;\n import io.smallrye.graphql.websocket.graphqltransportws.GraphQLTransportWSSubprotocolHandler;\n import io.smallrye.graphql.websocket.graphqlws.GraphQLWSSubprotocolHandler;\n import io.vertx.core.http.HttpHeaders;\n import io.vertx.core.http.ServerWebSocket;\n+import io.vertx.core.net.impl.ConnectionBase;\n import io.vertx.ext.web.RoutingContext;\n \n /**\n@@ -54,9 +58,31 @@ protected void doHandle(final RoutingContext ctx) {\n                             serverWebSocket.close();\n                             return;\n                     }\n+\n+                    QuarkusHttpUser user = (QuarkusHttpUser) ctx.user();\n+                    ScheduledFuture<?> authExpiryFuture = null;\n+                    if (user != null) {\n+                        //close the connection when the identity expires\n+                        Long expire = user.getSecurityIdentity().getAttribute(\"quarkus.identity.expire-time\");\n+                        if (expire != null) {\n+                            authExpiryFuture = ((ConnectionBase) ctx.request().connection()).channel().eventLoop()\n+                                    .schedule(() -> {\n+                                        if (!serverWebSocket.isClosed()) {\n+                                            serverWebSocket.close((short) 1008, \"Authentication expired\");\n+                                        }\n+                                    }, (expire * 1000) - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n+                        }\n+                    }\n+\n                     log.debugf(\"Starting websocket with subprotocol = %s\", subprotocol);\n                     GraphQLWebsocketHandler finalHandler = handler;\n-                    serverWebSocket.closeHandler(v -> finalHandler.onClose());\n+                    ScheduledFuture<?> finalAuthExpiryFuture = authExpiryFuture;\n+                    serverWebSocket.closeHandler(v -> {\n+                        finalHandler.onClose();\n+                        if (finalAuthExpiryFuture != null) {\n+                            finalAuthExpiryFuture.cancel(false);\n+                        }\n+                    });\n                     serverWebSocket.endHandler(v -> finalHandler.onEnd());\n                     serverWebSocket.exceptionHandler(finalHandler::onThrowable);\n                     serverWebSocket.textMessageHandler(finalHandler::onMessage);"
        },
        {
            "filename": "integration-tests/pom.xml",
            "diff": "@@ -318,6 +318,7 @@\n                 <module>smallrye-graphql</module>\n                 <module>smallrye-graphql-client</module>\n                 <module>smallrye-opentracing</module>\n+                <module>smallrye-graphql-client-keycloak</module>\n                 <module>smallrye-stork-registration</module>\n                 <module>jpa-without-entity</module>\n                 <module>quartz</module>"
        },
        {
            "filename": "integration-tests/smallrye-graphql-client-keycloak/pom.xml",
            "diff": "@@ -0,0 +1,247 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-integration-test-smallrye-graphql-client-keycloak</artifactId>\n+    <name>Quarkus - Integration Tests - SmallRye GraphQL Client with Keycloak</name>\n+\n+    <properties>\n+        <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-graphql</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-graphql-client</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-client-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!-- Minimal test dependencies to *-deployment artifacts for consistent build order -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-graphql-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-graphql-client-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-test-keycloak-server</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>junit</groupId>\n+                    <artifactId>junit</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-oidc-deployment</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+        <profile>\n+            <id>test-keycloak</id>\n+            <activation>\n+                <property>\n+                    <name>test-containers</name>\n+                </property>\n+            </activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <configuration>\n+                            <skip>false</skip>\n+                            <systemPropertyVariables>\n+                                <keycloak.url>${keycloak.url}</keycloak.url>\n+                            </systemPropertyVariables>\n+                        </configuration>\n+                    </plugin>\n+                    <plugin>\n+                        <artifactId>maven-failsafe-plugin</artifactId>\n+                        <configuration>\n+                            <skip>false</skip>\n+                            <systemPropertyVariables>\n+                                <keycloak.url>${keycloak.url}</keycloak.url>\n+                            </systemPropertyVariables>\n+                        </configuration>\n+                    </plugin>\n+                    <plugin>\n+                        <groupId>io.quarkus</groupId>\n+                        <artifactId>quarkus-maven-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <goals>\n+                                    <goal>build</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+\n+        <profile>\n+            <id>docker-keycloak</id>\n+            <activation>\n+                <property>\n+                    <name>start-containers</name>\n+                </property>\n+            </activation>\n+            <properties>\n+                <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>io.fabric8</groupId>\n+                        <artifactId>docker-maven-plugin</artifactId>\n+                        <configuration>\n+                            <images>\n+                                <image>\n+                                    <name>${keycloak.docker.legacy.image}</name>\n+                                    <alias>quarkus-test-keycloak</alias>\n+                                    <run>\n+                                        <ports>\n+                                            <port>8180:8080</port>\n+                                        </ports>\n+                                        <env>\n+                                            <KEYCLOAK_USER>admin</KEYCLOAK_USER>\n+                                            <KEYCLOAK_PASSWORD>admin</KEYCLOAK_PASSWORD>\n+                                        </env>\n+                                        <log>\n+                                            <prefix>Keycloak:</prefix>\n+                                            <date>default</date>\n+                                            <color>cyan</color>\n+                                        </log>\n+                                        <wait>\n+                                            <!-- good docs found at: https://dmp.fabric8.io/#build-healthcheck -->\n+                                            <http>\n+                                                <url>http://localhost:8180</url>\n+                                            </http>\n+                                            <time>100000</time>\n+                                        </wait>\n+                                    </run>\n+                                </image>\n+                            </images>\n+                            <allContainers>true</allContainers>\n+                        </configuration>\n+                        <executions>\n+                            <execution>\n+                                <id>docker-start</id>\n+                                <phase>compile</phase>\n+                                <goals>\n+                                    <goal>stop</goal>\n+                                    <goal>start</goal>\n+                                </goals>\n+                            </execution>\n+                            <execution>\n+                                <id>docker-stop</id>\n+                                <phase>post-integration-test</phase>\n+                                <goals>\n+                                    <goal>stop</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                    <!--<plugin>\n+                        <groupId>org.codehaus.mojo</groupId>\n+                        <artifactId>exec-maven-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>docker-prune</id>\n+                                <phase>generate-resources</phase>\n+                                <goals>\n+                                    <goal>exec</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <executable>${basedir}/../../.github/docker-prune.sh</executable>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>-->\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+\n+</project>"
        },
        {
            "filename": "integration-tests/smallrye-graphql-client-keycloak/src/main/java/io/quarkus/io/smallrye/graphql/keycloak/GraphQLAuthExpiryTester.java",
            "diff": "@@ -0,0 +1,83 @@\n+package io.quarkus.io.smallrye.graphql.keycloak;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import io.restassured.RestAssured;\n+import io.smallrye.common.annotation.Blocking;\n+import io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient;\n+import io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder;\n+\n+/**\n+ * We can't perform these tests in the `@Test` methods directly, because the GraphQL client\n+ * relies on CDI, and CDI is not available in native mode on the `@Test` side.\n+ * Therefore the test only calls this REST endpoint which then performs all the client related work.\n+ * <br>\n+ * This test establishes connections to the server, and ensures that if authentication has an expiry, that following the\n+ * expiry of their access the connection is correctly terminated.\n+ */\n+@Path(\"/\")\n+public class GraphQLAuthExpiryTester {\n+\n+    @ConfigProperty(name = \"quarkus.oidc.auth-server-url\")\n+    String keycloakRealm;\n+\n+    @GET\n+    @Path(\"/dynamic-subscription-auth-expiry/{url}\")\n+    @Blocking\n+    public void dynamicSubscription(@PathParam(\"url\") String url)\n+            throws Exception {\n+        String authHeader = getAuthHeader();\n+\n+        DynamicGraphQLClientBuilder clientBuilder = DynamicGraphQLClientBuilder.newBuilder()\n+                .url(url + \"/graphql\")\n+                .header(\"Authorization\", authHeader)\n+                .executeSingleOperationsOverWebsocket(true);\n+\n+        try (DynamicGraphQLClient client = clientBuilder.build()) {\n+            CompletableFuture<Void> authenticationExpired = new CompletableFuture<>();\n+            AtomicBoolean receivedValue = new AtomicBoolean(false);\n+            client.subscription(\"subscription { sub { value } }\").subscribe().with(item -> {\n+                if (item.hasData()) {\n+                    receivedValue.set(true);\n+                } else {\n+                    authenticationExpired.completeExceptionally(new RuntimeException(\"Subscription provided no data\"));\n+                }\n+            }, cause -> {\n+                if (cause.getMessage().contains(\"Authentication expired\")) {\n+                    authenticationExpired.complete(null);\n+                } else {\n+                    authenticationExpired\n+                            .completeExceptionally(new RuntimeException(\"Invalid close response from server.\", cause));\n+                }\n+            }, () -> authenticationExpired\n+                    .completeExceptionally(new RuntimeException(\"Subscription should not complete successfully\")));\n+\n+            authenticationExpired.get(10, TimeUnit.SECONDS);\n+            if (!receivedValue.get()) {\n+                throw new RuntimeException(\"Did not receive subscription value\");\n+            }\n+        }\n+    }\n+\n+    private String getAuthHeader() {\n+        io.restassured.response.Response response = RestAssured.given()\n+                .contentType(\"application/x-www-form-urlencoded\")\n+                .accept(\"application/json\")\n+                .formParam(\"username\", \"alice\")\n+                .formParam(\"password\", \"alice\")\n+                .param(\"client_id\", \"quarkus-app\")\n+                .param(\"client_secret\", \"secret\")\n+                .formParam(\"grant_type\", \"password\")\n+                .post(keycloakRealm + \"/protocol/openid-connect/token\");\n+\n+        return \"Bearer \" + response.getBody().jsonPath().getString(\"access_token\");\n+    }\n+}"
        },
        {
            "filename": "integration-tests/smallrye-graphql-client-keycloak/src/main/java/io/quarkus/io/smallrye/graphql/keycloak/SecuredResource.java",
            "diff": "@@ -0,0 +1,42 @@\n+package io.quarkus.io.smallrye.graphql.keycloak;\n+\n+import jakarta.annotation.security.RolesAllowed;\n+\n+import org.eclipse.microprofile.graphql.GraphQLApi;\n+import org.eclipse.microprofile.graphql.Query;\n+\n+import io.smallrye.common.annotation.NonBlocking;\n+import io.smallrye.graphql.api.Subscription;\n+import io.smallrye.mutiny.Multi;\n+\n+@GraphQLApi\n+public class SecuredResource {\n+\n+    // Seems to be a requirement to have a query or mutation in a GraphQLApi.\n+    // This is a workaround for the time being.\n+    @Query\n+    public TestResponse unusedQuery() {\n+        return null;\n+    }\n+\n+    @Subscription\n+    @RolesAllowed(\"user\")\n+    @NonBlocking\n+    public Multi<TestResponse> sub() {\n+        return Multi.createFrom().emitter(emitter -> emitter.emit(new TestResponse(\"Hello World\")));\n+    }\n+\n+    public static class TestResponse {\n+\n+        private final String value;\n+\n+        public TestResponse(String value) {\n+            this.value = value;\n+        }\n+\n+        public String getValue() {\n+            return value;\n+        }\n+    }\n+\n+}"
        },
        {
            "filename": "integration-tests/smallrye-graphql-client-keycloak/src/main/resources/application.properties",
            "diff": "@@ -0,0 +1,4 @@\n+quarkus.oidc.client-id=quarkus-app\n+quarkus.oidc.credentials.secret=secret\n+quarkus.smallrye-graphql.log-payload=queryAndVariables\n+quarkus.keycloak.devservices.enabled=false"
        },
        {
            "filename": "integration-tests/smallrye-graphql-client-keycloak/src/test/java/io/quarkus/it/smallrye/graphql/keycloak/GraphQLAuthExpiryIT.java",
            "diff": "@@ -0,0 +1,7 @@\n+package io.quarkus.it.smallrye.graphql.keycloak;\n+\n+import io.quarkus.test.junit.QuarkusIntegrationTest;\n+\n+@QuarkusIntegrationTest\n+public class GraphQLAuthExpiryIT extends GraphQLAuthExpiryTest {\n+}"
        },
        {
            "filename": "integration-tests/smallrye-graphql-client-keycloak/src/test/java/io/quarkus/it/smallrye/graphql/keycloak/GraphQLAuthExpiryTest.java",
            "diff": "@@ -0,0 +1,32 @@\n+package io.quarkus.it.smallrye.graphql.keycloak;\n+\n+import static io.restassured.RestAssured.when;\n+\n+import java.net.URL;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+/**\n+ * See `GraphQLClientTester` for the actual testing code that uses GraphQL clients.\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakRealmResourceManager.class)\n+public class GraphQLAuthExpiryTest {\n+\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testDynamicClientWebSocketAuthenticationExpiry() {\n+        when()\n+                .get(\"/dynamic-subscription-auth-expiry/\" + url.toString())\n+                .then()\n+                .log().everything()\n+                .statusCode(204);\n+    }\n+\n+}"
        },
        {
            "filename": "integration-tests/smallrye-graphql-client-keycloak/src/test/java/io/quarkus/it/smallrye/graphql/keycloak/KeycloakRealmResourceManager.java",
            "diff": "@@ -0,0 +1,133 @@\n+package io.quarkus.it.smallrye.graphql.keycloak;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.keycloak.representations.idm.*;\n+import org.keycloak.util.JsonSerialization;\n+import org.testcontainers.containers.GenericContainer;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import io.restassured.RestAssured;\n+import io.restassured.response.Response;\n+\n+public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n+\n+    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"keycloak.url\", \"http://localhost:8180/auth\");\n+    //private static String KEYCLOAK_SERVER_URL;\n+    private static final String KEYCLOAK_REALM = \"quarkus\";\n+    //private static final String KEYCLOAK_IMAGE = \"quay.io/keycloak/keycloak:22.0.5\";\n+\n+    private GenericContainer<?> keycloak;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        RealmRepresentation realm = createRealm(KEYCLOAK_REALM);\n+        realm.setRevokeRefreshToken(true);\n+        realm.setRefreshTokenMaxReuse(0);\n+        realm.setAccessTokenLifespan(3);\n+\n+        realm.getClients().add(createClient(\"quarkus-app\"));\n+        realm.getUsers().add(createUser(\"alice\", \"user\"));\n+\n+        try {\n+            Response response = RestAssured\n+                    .given()\n+                    .auth().oauth2(getAdminAccessToken())\n+                    .contentType(\"application/json\")\n+                    .body(JsonSerialization.writeValueAsBytes(realm))\n+                    .when()\n+                    .post(KEYCLOAK_SERVER_URL + \"/admin/realms\");\n+            response.then()\n+                    .statusCode(201);\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+\n+        properties.put(\"quarkus.oidc.auth-server-url\", KEYCLOAK_SERVER_URL + \"/realms/\" + KEYCLOAK_REALM);\n+        properties.put(\"keycloak.url\", KEYCLOAK_SERVER_URL);\n+\n+        return properties;\n+    }\n+\n+    private static String getAdminAccessToken() {\n+        return RestAssured\n+                .given()\n+                .param(\"grant_type\", \"password\")\n+                .param(\"username\", \"admin\")\n+                .param(\"password\", \"admin\")\n+                .param(\"client_id\", \"admin-cli\")\n+                .when()\n+                .post(KEYCLOAK_SERVER_URL + \"/realms/master/protocol/openid-connect/token\")\n+                .as(AccessTokenResponse.class).getToken();\n+    }\n+\n+    private static RealmRepresentation createRealm(String name) {\n+        RealmRepresentation realm = new RealmRepresentation();\n+\n+        realm.setRealm(name);\n+        realm.setEnabled(true);\n+        realm.setUsers(new ArrayList<>());\n+        realm.setClients(new ArrayList<>());\n+        realm.setAccessTokenLifespan(3);\n+        realm.setSsoSessionMaxLifespan(3);\n+        RolesRepresentation roles = new RolesRepresentation();\n+        List<RoleRepresentation> realmRoles = new ArrayList<>();\n+\n+        roles.setRealm(realmRoles);\n+        realm.setRoles(roles);\n+\n+        realm.getRoles().getRealm().add(new RoleRepresentation(\"user\", null, false));\n+        realm.getRoles().getRealm().add(new RoleRepresentation(\"admin\", null, false));\n+\n+        return realm;\n+    }\n+\n+    private static ClientRepresentation createClient(String clientId) {\n+        ClientRepresentation client = new ClientRepresentation();\n+\n+        client.setClientId(clientId);\n+        client.setPublicClient(false);\n+        client.setSecret(\"secret\");\n+        client.setDirectAccessGrantsEnabled(true);\n+        client.setServiceAccountsEnabled(true);\n+        client.setRedirectUris(Arrays.asList(\"*\"));\n+        client.setEnabled(true);\n+        client.setDefaultClientScopes(List.of(\"microprofile-jwt\"));\n+\n+        return client;\n+    }\n+\n+    private static UserRepresentation createUser(String username, String... realmRoles) {\n+        UserRepresentation user = new UserRepresentation();\n+\n+        user.setUsername(username);\n+        user.setEnabled(true);\n+        user.setCredentials(new ArrayList<>());\n+        user.setRealmRoles(Arrays.asList(realmRoles));\n+        user.setEmail(username + \"@gmail.com\");\n+\n+        CredentialRepresentation credential = new CredentialRepresentation();\n+\n+        credential.setType(CredentialRepresentation.PASSWORD);\n+        credential.setValue(username);\n+        credential.setTemporary(false);\n+\n+        user.getCredentials().add(credential);\n+\n+        return user;\n+    }\n+\n+    @Override\n+    public void stop() {\n+        RestAssured\n+                .given()\n+                .auth().oauth2(getAdminAccessToken())\n+                .when()\n+                .delete(KEYCLOAK_SERVER_URL + \"/admin/realms/\" + KEYCLOAK_REALM).then().statusCode(204);\n+    }\n+}"
        }
    ],
    "commitTime": "2023-11-16 20:15:53"
}