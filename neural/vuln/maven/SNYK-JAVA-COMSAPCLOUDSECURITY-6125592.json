{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "NONE"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "critical"
        }
    ],
    "cvssScore": 7.4,
    "disclosureTime": "2023-12-13 13:33:57",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.10627",
        "probability": "0.00044"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-JAVA-COMSAPCLOUDSECURITY-6125592",
    "identifiers": {
        "CVE": [
            "CVE-2023-50422"
        ],
        "CWE": [
            "CWE-269"
        ]
    },
    "language": "java",
    "malicious": false,
    "packageManager": "maven",
    "publicationTime": "2023-12-14 13:11:49",
    "remediation": "Upgrade com.sap.cloud.security:spring-security to version 2.17.0, 3.3.0 or higher. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Improper Privilege Management",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Improper Privilege Management due to improper validation of JSON Web Token (JWT) signatures. An attacker can escalate privileges and obtain arbitrary permissions within the application by exploiting this flaw. "
    },
    "source_code": [
        {
            "filename": "java-security-it/src/test/java/com/sap/cloud/security/test/integration/XsuaaIntegrationTest.java",
            "diff": "@@ -18,6 +18,7 @@\n import com.sap.cloud.security.xsuaa.client.OAuth2TokenKeyService;\n import org.apache.commons.io.IOUtils;\n import org.junit.ClassRule;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n@@ -27,7 +28,7 @@\n import static com.sap.cloud.security.config.Service.XSUAA;\n import static com.sap.cloud.security.config.cf.CFConstants.XSUAA.VERIFICATION_KEY;\n import static com.sap.cloud.security.test.SecurityTestRule.DEFAULT_CLIENT_ID;\n-import static com.sap.cloud.security.test.SecurityTestRule.DEFAULT_DOMAIN;\n+import static com.sap.cloud.security.test.SecurityTestRule.DEFAULT_UAA_DOMAIN;\n import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n@@ -39,7 +40,7 @@ public class XsuaaIntegrationTest {\n \tpublic static SecurityTestRule rule = SecurityTestRule.getInstance(Service.XSUAA)\n \t\t\t.setKeys(\"/publicKey.txt\", \"/privateKey.txt\");\n \n-\t@Test\n+\t@Test@Ignore(\"to be fixed\")\n \tpublic void xsuaaTokenValidationSucceeds_withXsuaaCombiningValidator() {\n \t\tOAuth2ServiceConfigurationBuilder configuration = rule.getOAuth2ServiceConfigurationBuilderFromFile(\n \t\t\t\t\"/xsuaa/vcap_services-single.json\");\n@@ -51,7 +52,7 @@ public void xsuaaTokenValidationSucceeds_withXsuaaCombiningValidator() {\n \t}\n \n \t@Test\n-\tpublic void xsaTokenValidationSucceeds_withXsuaaCombiningValidator() throws IOException {\n+\tpublic void xsaTokenValidationSucceeds_withXsuaaCombiningValidator() {\n \t\tOAuth2ServiceConfiguration configuration = rule.getOAuth2ServiceConfigurationBuilderFromFile(\n \t\t\t\t\"/xsa-simple/vcap_services-single.json\")\n \t\t\t\t.runInLegacyMode(true)\n@@ -86,7 +87,7 @@ public void xsuaaTokenValidationFails_withIasCombiningValidator() {\n \t\t\t\t\"Issuer is not trusted because issuer 'http://auth.com' doesn't match any of these domains '[myauth.com]' of the identity provider\");\n \t}\n \n-\t@Test\n+\t@Test@Ignore(\"to be fixed\")\n \tpublic void uaaTokenValidationSucceeds_withXsuaaCombiningValidator() {\n \t\tOAuth2ServiceConfigurationBuilder configuration = rule.getOAuth2ServiceConfigurationBuilderFromFile(\n \t\t\t\t\"/uaa/vcap_services.json\");\n@@ -105,7 +106,7 @@ public void createToken_withCorrectVerificationKey_tokenIsValid() throws IOExcep\n \t\tString publicKey = IOUtils.resourceToString(\"/publicKey.txt\", StandardCharsets.UTF_8);\n \t\tOAuth2ServiceConfiguration configuration = OAuth2ServiceConfigurationBuilder\n \t\t\t\t.forService(XSUAA)\n-\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, DEFAULT_DOMAIN)\n+\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, DEFAULT_UAA_DOMAIN)\n \t\t\t\t.withClientId(DEFAULT_CLIENT_ID)\n \t\t\t\t.withProperty(VERIFICATION_KEY, publicKey)\n \t\t\t\t.build();"
        },
        {
            "filename": "java-security-it/src/test/java/com/sap/cloud/security/test/integration/XsuaaMultipleBindingsIntegrationTest.java",
            "diff": "@@ -8,13 +8,15 @@\n import com.sap.cloud.security.config.Environments;\n import com.sap.cloud.security.config.OAuth2ServiceConfiguration;\n import com.sap.cloud.security.config.Service;\n+import com.sap.cloud.security.config.cf.CFConstants;\n import com.sap.cloud.security.test.SecurityTestRule;\n import com.sap.cloud.security.token.Token;\n import com.sap.cloud.security.token.validation.CombiningValidator;\n import com.sap.cloud.security.token.validation.ValidationResult;\n import com.sap.cloud.security.token.validation.validators.JwtValidatorBuilder;\n import org.junit.ClassRule;\n import org.junit.Test;\n+import org.mockito.Mockito;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -32,7 +34,16 @@ public class XsuaaMultipleBindingsIntegrationTest {\n \tpublic void createToken_integrationTest_tokenValidation() {\n \t\tToken token = rule.getPreconfiguredJwtGenerator().createToken();\n \t\tOAuth2ServiceConfiguration configuration = Environments.readFromInput(XsuaaMultipleBindingsIntegrationTest.class.getResourceAsStream(\"/vcap_services-multiple.json\")).getXsuaaConfiguration();\n-\t\tCombiningValidator<Token> tokenValidator = JwtValidatorBuilder.getInstance(configuration).build();\n+\t\tOAuth2ServiceConfiguration mockConfig = Mockito.mock(OAuth2ServiceConfiguration.class);\n+\t\tMockito.when(mockConfig.getClientId()).thenReturn(configuration.getClientId());\n+\t\tMockito.when(mockConfig.getDomains()).thenReturn(configuration.getDomains());\n+\t\tMockito.when(mockConfig.getUrl()).thenReturn(configuration.getUrl());\n+\t\tMockito.when(mockConfig.hasProperty(CFConstants.XSUAA.APP_ID)).thenReturn(configuration.hasProperty(CFConstants.XSUAA.APP_ID));\n+\t\tMockito.when(mockConfig.getProperty(CFConstants.XSUAA.APP_ID)).thenReturn(configuration.getProperty(CFConstants.XSUAA.APP_ID));\n+\t\tMockito.when(mockConfig.getProperty(CFConstants.XSUAA.UAA_DOMAIN)).thenReturn(rule.getWireMockServer().baseUrl());\n+\t\tMockito.when(mockConfig.getService()).thenReturn(configuration.getService());\n+\n+\t\tCombiningValidator<Token> tokenValidator = JwtValidatorBuilder.getInstance(mockConfig).build();\n \n \t\tValidationResult result = tokenValidator.validate(token);\n \t\tassertThat(result.isValid()).isTrue();"
        },
        {
            "filename": "java-security-it/src/test/java/com/sap/cloud/security/test/integration/ssrf/JavaSSRFAttackTest.java",
            "diff": "@@ -7,6 +7,8 @@\n \n import com.sap.cloud.security.config.OAuth2ServiceConfigurationBuilder;\n import com.sap.cloud.security.config.Service;\n+import com.sap.cloud.security.config.cf.CFConstants;\n+import com.sap.cloud.security.test.RSAKeys;\n import com.sap.cloud.security.test.extension.SecurityTestExtension;\n import com.sap.cloud.security.token.Token;\n import com.sap.cloud.security.token.TokenHeader;\n@@ -24,9 +26,10 @@\n import org.mockito.Mockito;\n \n import java.io.IOException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.ArgumentMatchers.isA;\n import static org.mockito.Mockito.times;\n \n /**\n@@ -35,9 +38,9 @@\n  * (Server Side Request Forgery)</a> attacks.\n  *\n  */\n-public class JavaSSRFAttackTest {\n+class JavaSSRFAttackTest {\n \n-\tprivate CloseableHttpClient httpClient = Mockito.spy(HttpClients.createDefault());\n+\tprivate final CloseableHttpClient httpClient = Mockito.spy(HttpClients.createDefault());\n \n \t@RegisterExtension\n \tstatic SecurityTestExtension extension = SecurityTestExtension.forService(Service.XSUAA).setPort(4242);\n@@ -55,16 +58,27 @@ public class JavaSSRFAttackTest {\n \t */\n \t@ParameterizedTest\n \t@CsvSource({\n+\t\t\t\"http://localhost:4242/token_keys,\t\t\t\t\t\t\t\t\t\t\ttrue\",\n \t\t\t\"http://localhost:4242/token_keys@malicious.ondemand.com/token_keys,\t\tfalse\",\n-\t\t\t\"http://malicious.ondemand.com@localhost:4242/token_keys,\t\t\t\t\ttrue\",\n \t\t\t\"http://localhost:4242/token_keys///malicious.ondemand.com/token_keys,\t\tfalse\",\n \t})\n-\tpublic void maliciousPartOfJwksIsNotUsedToObtainToken(String jwksUrl, boolean isValid) throws IOException {\n-\t\tOAuth2ServiceConfigurationBuilder configuration = extension.getContext()\n-\t\t\t\t.getOAuth2ServiceConfigurationBuilderFromFile(\"/xsuaa/vcap_services-single.json\");\n-\t\tToken token = extension.getContext().getJwtGeneratorFromFile(\"/xsuaa/token.json\")\n-\t\t\t\t.withHeaderParameter(TokenHeader.JWKS_URL, jwksUrl)\n-\t\t\t\t.createToken();\n+\tvoid maliciousPartOfJwksIsNotUsedToObtainToken(String jwksUrl, boolean isValid)\n+\t\t\tthrows IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n+\t\tOAuth2ServiceConfigurationBuilder configuration =\n+\t\t\t\textension.getContext()\n+\t\t\t\t.getOAuth2ServiceConfigurationBuilderFromFile(\"/xsuaa/vcap_services-single.json\")\n+\t\t\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, extension.getContext().getWireMockServer().baseUrl());\n+\t\tToken token;\n+\t\tif (isValid) {\n+\t\t\ttoken = extension.getContext().getJwtGeneratorFromFile(\"/xsuaa/token.json\")\n+\t\t\t\t\t.withHeaderParameter(TokenHeader.JWKS_URL, jwksUrl)\n+\t\t\t\t\t.createToken();\n+\t\t} else {\n+\t\t\ttoken = extension.getContext().getJwtGeneratorFromFile(\"/xsuaa/token.json\")\n+\t\t\t\t\t.withHeaderParameter(TokenHeader.JWKS_URL, jwksUrl)\n+\t\t\t\t\t.withPrivateKey(RSAKeys.loadPrivateKey(\"/random_private_key.txt\"))\n+\t\t\t\t\t.createToken();\n+\t\t}\n \t\tCombiningValidator<Token> tokenValidator = JwtValidatorBuilder\n \t\t\t\t.getInstance(configuration.build())\n \t\t\t\t.withHttpClient(httpClient)\n@@ -74,7 +88,9 @@ public void maliciousPartOfJwksIsNotUsedToObtainToken(String jwksUrl, boolean is\n \n \t\tassertThat(result.isValid()).isEqualTo(isValid);\n \t\tArgumentCaptor<HttpUriRequest> httpUriRequestCaptor = ArgumentCaptor.forClass(HttpUriRequest.class);\n-\t\tMockito.verify(httpClient, times(1)).execute(httpUriRequestCaptor.capture(), isA(ResponseHandler.class));\n+\t\tArgumentCaptor<ResponseHandler> responseHandlerCaptor = ArgumentCaptor.forClass(ResponseHandler.class);\n+\n+\t\tMockito.verify(httpClient, times(1)).execute(httpUriRequestCaptor.capture(), responseHandlerCaptor.capture());\n \t\tHttpUriRequest request = httpUriRequestCaptor.getValue();\n \t\tassertThat(request.getURI().getHost()).isEqualTo(\"localhost\"); // ensure request was sent to trusted host\n \t}"
        },
        {
            "filename": "java-security-it/src/test/java/com/sap/cloud/security/test/integration/ssrf/SpringSSRFAttackTest.java",
            "diff": "@@ -6,6 +6,7 @@\n package com.sap.cloud.security.test.integration.ssrf;\n \n import com.sap.cloud.security.config.Service;\n+import com.sap.cloud.security.test.RSAKeys;\n import com.sap.cloud.security.test.SecurityTest;\n import com.sap.cloud.security.test.extension.SecurityTestExtension;\n import com.sap.cloud.security.token.TokenHeader;\n@@ -24,6 +25,8 @@\n import org.springframework.web.client.RestTemplate;\n \n import java.io.IOException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -32,7 +35,7 @@\n  * \"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">SSRF\n  * (Server Side Request Forgery)</a> attacks.\n  */\n-public class SpringSSRFAttackTest {\n+class SpringSSRFAttackTest {\n \n \tprivate RestOperations restOperations = Mockito.spy(new RestTemplate());\n \n@@ -56,11 +59,21 @@ public class SpringSSRFAttackTest {\n \t\t\t\"http://malicious.ondemand.com@localhost:4242/token_keys,\t\t\t\t\ttrue\",\n \t\t\t\"http://localhost:4242/token_keys///malicious.ondemand.com/token_keys,\t\tfalse\",\n \t})\n-\tpublic void maliciousPartOfJwksIsNotUsedToObtainToken(String jwksUrl, boolean isValid) throws IOException {\n-\t\tString token = extension.getContext().getPreconfiguredJwtGenerator()\n-\t\t\t\t.withHeaderParameter(TokenHeader.JWKS_URL, jwksUrl)\n-\t\t\t\t.createToken()\n-\t\t\t\t.getTokenValue();\n+\tvoid maliciousPartOfJwksIsNotUsedToObtainToken(String jwksUrl, boolean isValid)\n+\t\t\tthrows IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n+\t\tString token;\n+\t\tif (isValid) {\n+\t\t\ttoken = extension.getContext().getPreconfiguredJwtGenerator()\n+\t\t\t\t\t.withHeaderParameter(TokenHeader.JWKS_URL, jwksUrl)\n+\t\t\t\t\t.createToken()\n+\t\t\t\t\t.getTokenValue();\n+\t\t} else {\n+\t\t\ttoken = extension.getContext().getPreconfiguredJwtGenerator()\n+\t\t\t\t\t.withHeaderParameter(TokenHeader.JWKS_URL, jwksUrl)\n+\t\t\t\t\t.withPrivateKey(RSAKeys.loadPrivateKey(\"/random_private_key.txt\"))\n+\t\t\t\t\t.createToken()\n+\t\t\t\t\t.getTokenValue();\n+\t\t}\n \t\tJwtDecoder jwtDecoder = new XsuaaJwtDecoderBuilder(\n \t\t\t\tnew XsuaaServiceConfigurationCustom(createXsuaaCredentials()))\n \t\t\t\t\t\t.withRestOperations(restOperations)\n@@ -80,7 +93,7 @@ public void maliciousPartOfJwksIsNotUsedToObtainToken(String jwksUrl, boolean is\n \n \tprivate XsuaaCredentials createXsuaaCredentials() {\n \t\tXsuaaCredentials xsuaaCredentials = new XsuaaCredentials();\n-\t\txsuaaCredentials.setUaaDomain(SecurityTest.DEFAULT_DOMAIN);\n+\t\txsuaaCredentials.setUaaDomain(extension.getContext().getWireMockServer().baseUrl());\n \t\txsuaaCredentials.setClientId(SecurityTest.DEFAULT_CLIENT_ID);\n \t\txsuaaCredentials.setXsAppName(SecurityTest.DEFAULT_APP_ID);\n \t\treturn xsuaaCredentials;"
        },
        {
            "filename": "java-security-it/src/test/java/com/sap/cloud/security/test/performance/JavaSecurityPerformanceIT.java",
            "diff": "@@ -58,7 +58,7 @@ void onlineValidation() {\n \t\tString tokenValue = token.getTokenValue();\n \n \t\tBenchmarkUtil.Result result = BenchmarkUtil.execute(() -> tokenValidator.validate(new XsuaaToken(tokenValue)));\n-\t\tLOGGER.info(\"Online validation result: {}\", result.toString());\n+\t\tLOGGER.info(\"Online validation result: {}\", result);\n \t}\n \n \t@Test\n@@ -70,7 +70,7 @@ void offlineValidation() throws Exception {\n \t\tString tokenValue = token.getTokenValue();\n \n \t\tBenchmarkUtil.Result result = BenchmarkUtil.execute(() -> tokenValidator.validate(new XsuaaToken(tokenValue)));\n-\t\tLOGGER.info(\"Offline validation result: {}\", result.toString());\n+\t\tLOGGER.info(\"Offline validation result: {}\", result);\n \t}\n \n \tprivate CombiningValidator<Token> createOfflineTokenValidator() throws IOException {\n@@ -90,7 +90,7 @@ private CombiningValidator<Token> createOnlineTokenValidator() {\n \n \tprivate OAuth2ServiceConfigurationBuilder createConfigurationBuilder() {\n \t\treturn OAuth2ServiceConfigurationBuilder.forService(XSUAA)\n-\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, SecurityTest.DEFAULT_DOMAIN)\n+\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, securityTest.getWireMockServer().baseUrl())\n \t\t\t\t.withProperty(CFConstants.XSUAA.APP_ID, SecurityTest.DEFAULT_APP_ID)\n \t\t\t\t.withClientId(SecurityTest.DEFAULT_CLIENT_ID);\n \t}"
        },
        {
            "filename": "java-security-it/src/test/java/com/sap/cloud/security/test/performance/SpringSecurityPerformanceIT.java",
            "diff": "@@ -5,23 +5,18 @@\n  */\n package com.sap.cloud.security.test.performance;\n \n-import com.sap.cloud.security.config.OAuth2ServiceConfiguration;\n import com.sap.cloud.security.config.OAuth2ServiceConfigurationBuilder;\n import com.sap.cloud.security.config.cf.CFConstants;\n import com.sap.cloud.security.spring.token.authentication.JwtDecoderBuilder;\n import com.sap.cloud.security.test.SecurityTest;\n import com.sap.cloud.security.test.performance.util.BenchmarkUtil;\n-import org.apache.commons.io.IOUtils;\n import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.security.oauth2.jwt.JwtDecoder;\n \n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-\n import static com.sap.cloud.security.config.Service.IAS;\n import static com.sap.cloud.security.config.Service.XSUAA;\n import static org.assertj.core.api.Assertions.assertThat;\n@@ -57,7 +52,7 @@ void onlineValidation() {\n \t\tassertThat(jwtDecoder.decode(token)).isNotNull();\n \n \t\tBenchmarkUtil.Result result = BenchmarkUtil.execute(() -> jwtDecoder.decode(token));\n-\t\tLOGGER.info(\"Online validation result (xsuaa): {}\", result.toString());\n+\t\tLOGGER.info(\"Online validation result (xsuaa): {}\", result);\n \t}\n \n \t@Test\n@@ -67,17 +62,7 @@ void onlineIasValidation() {\n \t\tassertThat(jwtDecoder.decode(token)).isNotNull();\n \n \t\tBenchmarkUtil.Result result = BenchmarkUtil.execute(() -> jwtDecoder.decode(token));\n-\t\tLOGGER.info(\"Online validation result (identity): {}\", result.toString());\n-\t}\n-\n-\t// @Test\n-\tvoid offlineValidation() throws Exception {\n-\t\tString token = securityTest.createToken().getTokenValue();\n-\t\tJwtDecoder jwtDecoder = createOfflineJwtDecoder();\n-\t\tassertThat(jwtDecoder.decode(token)).isNotNull();\n-\n-\t\tBenchmarkUtil.Result result = BenchmarkUtil.execute(() -> jwtDecoder.decode(token));\n-\t\tLOGGER.info(\"Offline validation result: {}\", result.toString());\n+\t\tLOGGER.info(\"Online validation result (identity): {}\", result);\n \t}\n \n \tprivate JwtDecoder createOnlineJwtDecoder() {\n@@ -86,20 +71,9 @@ private JwtDecoder createOnlineJwtDecoder() {\n \t\t\t\t.withXsuaaServiceConfiguration(createXsuaaConfigurationBuilder().build()).build();\n \t}\n \n-\tprivate JwtDecoder createOfflineJwtDecoder() throws IOException {\n-\t\tfinal String publicKey = IOUtils.resourceToString(\"/publicKey.txt\", StandardCharsets.UTF_8)\n-\t\t\t\t.replace(\"\\n\", \"\");\n-\t\tOAuth2ServiceConfiguration configuration = createXsuaaConfigurationBuilder()\n-\t\t\t\t.withProperty(\"verificationkey\", publicKey)\n-\t\t\t\t.build();\n-\t\treturn new JwtDecoderBuilder()\n-\t\t\t\t.withIasServiceConfiguration(createIasConfigurationBuilder().build())\n-\t\t\t\t.withXsuaaServiceConfiguration(configuration).build();\n-\t}\n-\n \tprivate OAuth2ServiceConfigurationBuilder createXsuaaConfigurationBuilder() {\n \t\treturn OAuth2ServiceConfigurationBuilder.forService(XSUAA)\n-\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, SecurityTest.DEFAULT_DOMAIN)\n+\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, securityTest.getWireMockServer().baseUrl())\n \t\t\t\t.withProperty(CFConstants.XSUAA.APP_ID, SecurityTest.DEFAULT_APP_ID)\n \t\t\t\t.withClientId(SecurityTest.DEFAULT_CLIENT_ID);\n \t}"
        },
        {
            "filename": "java-security-it/src/test/java/com/sap/cloud/security/test/performance/SpringXsuaaPerformanceIT.java",
            "diff": "@@ -77,7 +77,7 @@ private static XsuaaCredentials createXsuaaCredentials() throws IOException {\n \t\tfinal String publicKey = IOUtils.resourceToString(\"/publicKey.txt\", StandardCharsets.UTF_8);\n \n \t\tXsuaaCredentials xsuaaCredentials = new XsuaaCredentials();\n-\t\txsuaaCredentials.setUaaDomain(SecurityTest.DEFAULT_DOMAIN);\n+\t\txsuaaCredentials.setUaaDomain(SecurityTest.DEFAULT_UAA_DOMAIN);\n \t\txsuaaCredentials.setClientId(SecurityTest.DEFAULT_CLIENT_ID);\n \t\txsuaaCredentials.setXsAppName(SecurityTest.DEFAULT_APP_ID);\n \t\txsuaaCredentials.setVerificationKey(publicKey.replace(\"\\n\", \"\"));"
        },
        {
            "filename": "java-security-it/src/test/resources/random_private_key.txt",
            "diff": "@@ -0,0 +1,28 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCbVBpnMyO0R8d2\n+Kasc/f/Ziv7XPrzl6I5SXDJtFUb2LzCyA5SH49Qa5AvyGC6UtlZdTkxvAEtMQIAQ\n+xBtxFM1VOiWSriLrsQ/ol6wckgUANsrU2LQq4xw+6LI4u8MqIMQydgbVc/dfdYI1\n++wJVP1ihT6VYitmv9mwi9CuLyNzOvhGTKdtMGw9oA7KA9SWKmoOulp0w7WaiY0Jt\n+5r+joY+ffwvETDrT0i1+AMaEvp//JWJ3mkXNlBZv72XqYK4nDDSGeE7qC3pG/3w5\n+YO3L0bR+tYA/IR+4hb0H6ZH/a8aHJT0httam8VeLL1FVtuwznfxMKN3kkXZ0m/HL\n+bhp10LihAgMBAAECggEAZVtbI052lPRlztBf7To9kqolozU4NFotTMcGzLGerZSb\n+lP3LFWVwid+Xf/GRq87Tym0GaURq3iYUq1wcgAzP9DZOQEnLVbsjo2YdlEMgakRW\n+1M9XucibLN3RNj4nmzzoafkkenMCz9KxFiJmIlSEtDZxsbZhWHZXl/N22u9GTs0o\n+KQNzroxI+SKxWcfrmJkOx3vL9++47/LY+Rw6dL+hkUxdxMLuhYUcYziNvRfV9o0Y\n+Ag7Pl85xL3N8HkHr5ELL0RKHyk+vKbZ9xhAH50mxTZG8tAj9Ds0v3hQJrTmuyAS3\n+ZJkqkhIJtWHmhLYiKju9ObLXtVgm8wdg8+vq/u1utQKBgQDhEf6Sy0+DhEYTMLN+\n+ioVf/rBXl8QgXbDkEoHMp+FhuYK3CdlD+pgaJq+KUc6RnHb0GeDPBcZkhRlTLxU0\n+HtykDQFa4mcXIJaSKY8WHCF3hJLUnXYgQW+0oufXEDCORuzqgcUbEHnYpjuuzkCj\n+FqjCkH4lNdvW8IJ56rpjBaWyRwKBgQCwrJVWLPPZMuwXHlkM1ytAC+dsq/1cRo3D\n+by766k5u/J6xwlc3bM0LG6pHuXruBxkdKAeAkfmwCc4JSXR4JS3JNmYuQ7wbmDWp\n+20ABv9qFbTIt1rtEkjhV8bmamfe5qZL/0lza2KcQOZGr1wtzV/Vg384gm5oy1FSi\n+0isU+sCJ1wKBgQCFIAuf8Dm75MU+HJROyMhTG2ZaqR4Mtt4mSPwVfUdGcl/qvByS\n+pOrKrQ8vlWvFnPKPN69NRHEwi7mLBlJYXdjMABVJGJk5iMEG+yXzQfhZpUTkFa8F\n+LS9RfPn8r0rJHRKNMuzPMVOg3dJ3du+sh36SdrzmbZD29ZN3YWuVnoV/iQKBgDQM\n+5IJbBAx9gCjffATYb5mS6D+P/DjvYFyvqPurhCgWrPpZ8zAVEeOv5t7yulDeLnv0\n+iyFJ4HIIsXby+SlcarzZFgmTUxweH9FHEvhw+YRNw3bVyJ5PJeHMMY5mxiEg4HoW\n+E9017yJMk6o41NrKkzRTO3tH3IoVHEpL+P1ZUthJAoGALDuPKfHiuXuxxGF4oeyH\n+KFFDIr991nBxUC1tB8Lff5ZStfbzTnjbzCRogsQ/pu1tBaoMQjpHhTnI3hbe/Iwf\n+VffTGJTxapTiEwQuSY2OaSgHtUrz4qurHos+uVTWni8TuXfqkeoc1aIr4D7ulzPN\n+O71jgCLNQW5OZD7MSn21eeU=\n+-----END RSA PRIVATE KEY-----\n\\ No newline at end of file"
        },
        {
            "filename": "java-security-test/src/main/java/com/sap/cloud/security/test/ApplicationServerOptions.java",
            "diff": "@@ -21,7 +21,8 @@\n public class ApplicationServerOptions {\n \n \tprivate final TokenAuthenticator tokenAuthenticator;\n-\tprivate int port;\n+\tprivate final int port;\n+\tprivate static int tokenKeysPort;\n \n \tprivate ApplicationServerOptions(TokenAuthenticator tokenAuthenticator) {\n \t\tthis(tokenAuthenticator, 0);\n@@ -57,6 +58,27 @@ public static ApplicationServerOptions forXsuaaService(String appId, String clie\n \t *            the identity service\n \t * @return the application server options.\n \t */\n+\tpublic static ApplicationServerOptions forService(Service service, int jwksPort) {\n+\t\ttokenKeysPort = jwksPort;\n+\t\tApplicationServerOptions instance;\n+\t\tswitch (service) {\n+\t\tcase XSUAA:\n+\t\t\tinstance =  forXsuaaService(SecurityTestRule.DEFAULT_APP_ID, SecurityTestRule.DEFAULT_CLIENT_ID);\n+\t\t\tbreak;\n+\t\tcase IAS:\n+\t\t\tinstance = new ApplicationServerOptions(new IasTokenAuthenticator()\n+\t\t\t\t.withServiceConfiguration(OAuth2ServiceConfigurationBuilder.forService(Service.IAS)\n+\t\t\t\t\t\t.withClientId(SecurityTestRule.DEFAULT_CLIENT_ID)\n+\t\t\t\t\t\t.withUrl(\"http://localhost\")\n+\t\t\t\t\t\t.withDomains(\"localhost\")\n+\t\t\t\t\t\t.build()));\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tthrow new UnsupportedOperationException(\"Identity Service \" + service + \" is not yet supported.\");\n+\t\t}\n+\t\treturn instance;\n+\t}\n+\n \tpublic static ApplicationServerOptions forService(Service service) {\n \t\tApplicationServerOptions instance;\n \n@@ -113,10 +135,11 @@ public int getPort() {\n \t}\n \n \tprivate static OAuth2ServiceConfiguration createServiceConfiguration(String appId, String clientId) {\n+\t\tString portPath = tokenKeysPort != 0 ? \":\" + tokenKeysPort : \"\";\n \t\treturn OAuth2ServiceConfigurationBuilder.forService(Service.XSUAA)\n \t\t\t\t.withClientId(clientId)\n \t\t\t\t.withProperty(CFConstants.XSUAA.APP_ID, appId)\n-\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, SecurityTestRule.DEFAULT_DOMAIN)\n+\t\t\t\t.withProperty(CFConstants.XSUAA.UAA_DOMAIN, SecurityTestRule.DEFAULT_UAA_DOMAIN + portPath)\n \t\t\t\t.build();\n \t}\n "
        },
        {
            "filename": "java-security-test/src/main/java/com/sap/cloud/security/test/SecurityTest.java",
            "diff": "@@ -48,7 +48,8 @@\n \n import static com.github.tomakehurst.wiremock.client.WireMock.*;\n import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static com.sap.cloud.security.config.Service.*;\n+import static com.sap.cloud.security.config.Service.IAS;\n+import static com.sap.cloud.security.config.Service.XSUAA;\n import static com.sap.cloud.security.xsuaa.client.OidcConfigurationService.DISCOVERY_ENDPOINT_DEFAULT;\n \n public class SecurityTest\n@@ -60,6 +61,7 @@ public class SecurityTest\n \tpublic static final String DEFAULT_APP_ID = \"xsapp!t0815\";\n \tpublic static final String DEFAULT_CLIENT_ID = \"sb-clientId!t0815\";\n \tpublic static final String DEFAULT_DOMAIN = \"localhost\";\n+\tpublic static final String DEFAULT_UAA_DOMAIN = \"http://localhost\";\n \tpublic static final String DEFAULT_URL = \"http://localhost\";\n \n \tprotected static final String LOCALHOST_PATTERN = \"http://localhost:%d\";\n@@ -74,28 +76,28 @@ public class SecurityTest\n \t// mock server\n \tprotected WireMockServer wireMockServer;\n \tprotected RSAKeys keys;\n-\tprotected Service service;\n+\tprotected final Service service;\n \n-\tprotected String clientId = DEFAULT_CLIENT_ID;\n+\tprotected static final String clientId = DEFAULT_CLIENT_ID;\n \tprotected String jwksUrl;\n \tprivate String issuerUrl;\n \n \tpublic SecurityTest(Service service) {\n \t\tthis.service = service;\n \t\tthis.keys = RSAKeys.generate();\n \t\tthis.wireMockServer = new WireMockServer(options().dynamicPort());\n-\t\tthis.applicationServerOptions = ApplicationServerOptions.forService(service);\n \t}\n \n \t@Override\n \tpublic SecurityTest useApplicationServer() {\n-\t\treturn useApplicationServer(ApplicationServerOptions.forService(service));\n+\t\tthis.useApplicationServer = true;\n+\t\treturn this;\n \t}\n \n \t@Override\n \tpublic SecurityTest useApplicationServer(ApplicationServerOptions applicationServerOptions) {\n \t\tthis.applicationServerOptions = applicationServerOptions;\n-\t\tuseApplicationServer = true;\n+\t\tthis.useApplicationServer = true;\n \t\treturn this;\n \t}\n \n@@ -136,16 +138,18 @@ public SecurityTest setKeys(String publicKeyPath, String privateKeyPath) {\n \t@Override\n \tpublic JwtGenerator getPreconfiguredJwtGenerator() {\n \t\tJwtGenerator jwtGenerator = JwtGenerator.getInstance(service, clientId).withPrivateKey(keys.getPrivate());\n+\n \t\tif (jwksUrl == null || issuerUrl == null) {\n \t\t\tLOGGER.warn(\"Method getPreconfiguredJwtGenerator was called too soon. Cannot set mock jwks/issuer url!\");\n \t\t}\n-\t\tswitch (service) {\n-\t\tcase XSUAA:\n+\n+\t\tif (XSUAA.equals(service)) {\n \t\t\tjwtGenerator\n \t\t\t\t\t.withHeaderParameter(TokenHeader.JWKS_URL, jwksUrl)\n \t\t\t\t\t.withAppId(DEFAULT_APP_ID)\n-\t\t\t\t\t.withClaimValue(TokenClaims.XSUAA.GRANT_TYPE, OAuth2TokenServiceConstants.GRANT_TYPE_USER_TOKEN);\n+\t\t\t\t\t.withClaimValue(TokenClaims.XSUAA.GRANT_TYPE, OAuth2TokenServiceConstants.GRANT_TYPE_JWT_BEARER);\n \t\t}\n+\n \t\treturn jwtGenerator.withClaimValue(TokenClaims.ISSUER, issuerUrl);\n \t}\n \n@@ -260,18 +264,21 @@ String createDefaultOidcConfigurationResponse() throws IOException {\n \t *             if the stub cannot be initialized\n \t */\n \tpublic void setup() throws Exception {\n-\t\tif (useApplicationServer && (applicationServer == null || !applicationServer.isStarted())) {\n-\t\t\tstartApplicationServer();\n-\t\t}\n \t\tif (!wireMockServer.isRunning()) {\n \t\t\twireMockServer.start();\n \t\t} else {\n \t\t\twireMockServer.resetAll();\n \t\t}\n+\t\tif (useApplicationServer && (applicationServer == null || !applicationServer.isStarted())) {\n+\t\t\tif (applicationServerOptions == null){\n+\t\t\t\tthis.applicationServerOptions = ApplicationServerOptions.forService(service, wireMockServer.port());\n+\t\t\t}\n+\t\t\tstartApplicationServer();\n+\t\t}\n \t\t// TODO return JSON Media type\n \t\tOAuth2ServiceEndpointsProvider endpointsProvider = new XsuaaDefaultEndpoints(\n \t\t\t\tString.format(LOCALHOST_PATTERN, wireMockServer.port()), null);\n-\t\twireMockServer.stubFor(get(urlEqualTo(endpointsProvider.getJwksUri().getPath()))\n+\t\twireMockServer.stubFor(get(urlPathEqualTo(endpointsProvider.getJwksUri().getPath()))\n \t\t\t\t.willReturn(aResponse().withBody(createDefaultTokenKeyResponse())\n \t\t\t\t\t\t.withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON.value())));\n \t\twireMockServer.stubFor(get(urlEqualTo(DISCOVERY_ENDPOINT_DEFAULT))"
        },
        {
            "filename": "java-security-test/src/main/java/com/sap/cloud/security/test/SecurityTestRule.java",
            "diff": "@@ -26,6 +26,7 @@ public class SecurityTestRule extends ExternalResource\n \tpublic static final String DEFAULT_APP_ID = SecurityTest.DEFAULT_APP_ID;\n \tpublic static final String DEFAULT_CLIENT_ID = SecurityTest.DEFAULT_CLIENT_ID;\n \tpublic static final String DEFAULT_DOMAIN = SecurityTest.DEFAULT_DOMAIN;\n+\tpublic static final String DEFAULT_UAA_DOMAIN = SecurityTest.DEFAULT_UAA_DOMAIN;\n \n \tSecurityTest base;\n "
        },
        {
            "filename": "java-security/src/main/java/com/sap/cloud/security/token/validation/validators/JwtValidatorBuilder.java",
            "diff": "@@ -1,6 +1,6 @@\n /**\n  * SPDX-FileCopyrightText: 2018-2023 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n- *<p> \n+ *<p>\n  * SPDX-License-Identifier: Apache-2.0\n  */\n package com.sap.cloud.security.token.validation.validators;\n@@ -27,10 +27,9 @@\n \n import static com.sap.cloud.security.config.Service.IAS;\n import static com.sap.cloud.security.config.Service.XSUAA;\n-import static com.sap.cloud.security.config.cf.CFConstants.XSUAA.UAA_DOMAIN;\n \n /**\n- * Class used to build a token validator for a oauth service configuration\n+ * Class used to build a token validator for an OAuth service configuration\n  * {@link OAuth2ServiceConfiguration}. <br>\n  * Custom validators can be added via {@link #with(Validator)} method.\n  */\n@@ -39,7 +38,7 @@ public class JwtValidatorBuilder {\n \tprivate final Set<Validator<Token>> validators = new HashSet<>();\n \tprivate final Set<ValidationListener> validationListeners = Collections.synchronizedSet(new HashSet<>());\n \tprivate OAuth2ServiceConfiguration configuration;\n-\tprivate final Set<OAuth2ServiceConfiguration> otherConfigurations = Collections.synchronizedSet(new HashSet());\n+\tprivate final Set<OAuth2ServiceConfiguration> otherConfigurations = Collections.synchronizedSet(new HashSet<>());\n \tprivate OidcConfigurationService oidcConfigurationService = null;\n \tprivate OAuth2TokenKeyService tokenKeyService = null;\n \tprivate Validator<Token> customAudienceValidator;\n@@ -84,7 +83,7 @@ public JwtValidatorBuilder with(Validator<Token> validator) {\n \n \t/**\n \t * Use to configure the token key cache.\n-\t * \n+\t *\n \t * @param tokenKeyCacheConfiguration\n \t *            the cache configuration\n \t * @return this builder\n@@ -184,11 +183,11 @@ public JwtValidatorBuilder withValidatorListener(ValidationListener validationLi\n \n \t/**\n \t * Disables tenant id check for JwtSignatureValidator. In case Jwt issuer claim\n-\t * doesn't match with the url attribute from OAuth2ServiceConfiguration tenant id (zid)\n-\t * claim needs to be present in token to ensure that the tenant belongs to this\n-\t * issuer. This method disables the tenant id check. Use with caution as it relaxes\n-\t * the validation rules! It is not recommended to disable this check for\n-\t * standard Identity service setup.\n+\t * doesn't match with the url attribute from OAuth2ServiceConfiguration tenant\n+\t * id (zid) claim needs to be present in token to ensure that the tenant belongs\n+\t * to this issuer. This method disables the tenant id check. Use with caution as\n+\t * it relaxes the validation rules! It is not recommended to disable this check\n+\t * for standard Identity service setup.\n \t *\n \t * @return this builder\n \t */\n@@ -219,10 +218,6 @@ private List<Validator<Token>> createDefaultValidators() {\n \t\tOAuth2TokenKeyServiceWithCache tokenKeyServiceWithCache = getTokenKeyServiceWithCache();\n \t\tOptional.ofNullable(tokenKeyCacheConfiguration).ifPresent(tokenKeyServiceWithCache::withCacheConfiguration);\n \t\tif (configuration.getService() == XSUAA) {\n-\t\t\tif (!configuration.isLegacyMode()) {\n-\t\t\t\tdefaultValidators.add(new XsuaaJkuValidator(configuration.getProperty(UAA_DOMAIN)));\n-\t\t\t}\n-\n \t\t\tsignatureValidator = new XsuaaJwtSignatureValidator(configuration, tokenKeyServiceWithCache, getOidcConfigurationServiceWithCache());\n \t\t} else if (configuration.getService() == IAS) {\n \t\t\tif(configuration.getDomains() != null && !configuration.getDomains().isEmpty()) {"
        },
        {
            "filename": "java-security/src/main/java/com/sap/cloud/security/token/validation/validators/XsuaaJkuValidator.java",
            "diff": "@@ -1,94 +0,0 @@\n-/**\n- * SPDX-FileCopyrightText: 2018-2023 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n- *<p>\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package com.sap.cloud.security.token.validation.validators;\n-\n-import static com.sap.cloud.security.token.validation.ValidationResults.*;\n-import static com.sap.cloud.security.xsuaa.Assertions.assertHasText;\n-\n-import java.net.URI;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.sap.cloud.security.config.OAuth2ServiceConfiguration;\n-import com.sap.cloud.security.token.Token;\n-import com.sap.cloud.security.token.TokenHeader;\n-import com.sap.cloud.security.token.validation.ValidationResult;\n-import com.sap.cloud.security.token.validation.Validator;\n-\n-/**\n- * Validates that the jwt access token is issued by a trust worthy identity\n- * service. In case of XSUAA does the token key url (jku JWT header parameter)\n- * must match the identity service domain.\n- */\n-class XsuaaJkuValidator implements Validator<Token> {\n-\tprivate final String domain;\n-\tprotected final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-\t/**\n-\t *\n-\t * @param uaaDomain\n-\t *            the domain of the identity service\n-\t *            {@link OAuth2ServiceConfiguration#getProperty(String)}\n-\t */\n-\tXsuaaJkuValidator(String uaaDomain) {\n-\t\tassertHasText(uaaDomain, \"XsuaaJkuValidator requires uaaDomain.\");\n-\t\tthis.domain = uaaDomain;\n-\t}\n-\n-\t@Override\n-\tpublic ValidationResult validate(Token token) {\n-\t\tString tokenKeyUrl = token.getHeaderParameterAsString(TokenHeader.JWKS_URL);\n-\t\tURI jkuUri;\n-\n-\t\tif (tokenKeyUrl == null || tokenKeyUrl.trim().isEmpty()) {\n-\t\t\treturn createInvalid(\n-\t\t\t\t\t\"Issuer validation can not be performed because Jwt token does not contain 'jku' header parameter.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjkuUri = URI.create(tokenKeyUrl);\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t\treturn createInvalid(\n-\t\t\t\t\t\"Issuer validation can not be performed because Jwt token does not contain a valid uri as 'jku' header parameter.\");\n-\t\t}\n-\t\tif (!matchesTokenKeyUrlDomain(jkuUri)) {\n-\t\t\treturn createInvalid(\n-\t\t\t\t\t\"Issuer is not trusted because 'jku' '{}' does not match uaa domain '{}' of the identity service.\",\n-\t\t\t\t\tjkuUri, domain);\n-\t\t}\n-\t\tif (!matchesTokenKeyEndpoint(jkuUri)) {\n-\t\t\treturn createInvalid(\n-\t\t\t\t\t\"Jwt token does not contain a valid 'jku' header parameter.\",\n-\t\t\t\t\tjkuUri, domain);\n-\t\t}\n-\t\treturn createValid();\n-\t}\n-\n-\tprivate boolean matchesTokenKeyUrlDomain(URI jkuUri) {\n-\t\treturn jkuUri.getHost() != null && jkuUri.getHost().endsWith(domain);\n-\t}\n-\n-\tprivate boolean matchesTokenKeyEndpoint(URI jkuUri) {\n-\t\treturn jkuUri.getPath().endsWith(\"token_keys\") && jkuUri.getQuery() == null && jkuUri.getFragment() == null;\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object o) {\n-\t\tif (this == o)\n-\t\t\treturn true;\n-\t\tif (o == null || getClass() != o.getClass())\n-\t\t\treturn false;\n-\n-\t\tXsuaaJkuValidator that = (XsuaaJkuValidator) o;\n-\n-\t\treturn domain.equals(that.domain);\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\treturn domain.hashCode();\n-\t}\n-}"
        },
        {
            "filename": "java-security/src/main/java/com/sap/cloud/security/token/validation/validators/XsuaaJwtSignatureValidator.java",
            "diff": "@@ -13,7 +13,9 @@\n import java.util.Collections;\n import java.util.Map;\n \n-import static com.sap.cloud.security.token.validation.validators.JsonWebKeyConstants.*;\n+import static com.sap.cloud.security.config.cf.CFConstants.XSUAA.UAA_DOMAIN;\n+import static com.sap.cloud.security.token.validation.validators.JsonWebKeyConstants.KEY_ID_VALUE_LEGACY;\n+import static com.sap.cloud.security.token.validation.validators.JsonWebKeyConstants.KID_PARAMETER_NAME;\n \n /**\n  * Jwt Signature validator for Access tokens issued by Xsuaa service\n@@ -54,12 +56,19 @@ private PublicKey fetchPublicKey(Token token, JwtSignatureAlgorithm algorithm) t\n             throw new IllegalArgumentException(\"Token does not contain the mandatory \" + KID_PARAMETER_NAME + \" header.\");\n         }\n \n-        String jwksUri = configuration.isLegacyMode() ? configuration.getUrl() + \"/token_keys\" : token.getHeaderParameterAsString(JKU_PARAMETER_NAME);\n-        if (jwksUri == null) {\n-            throw new IllegalArgumentException(\"Token does not contain the mandatory \" + JKU_PARAMETER_NAME + \" header.\");\n-        }\n-\n+        String zidQueryParam = composeZidQueryParameter(token);\n+        String jwksUri = configuration.isLegacyMode() ? configuration.getUrl() + \"/token_keys\" : configuration.getProperty(UAA_DOMAIN) + \"/token_keys\" + zidQueryParam;\n+        URI uri = URI.create(jwksUri);\n+        uri =  uri.isAbsolute() ? uri : URI.create(\"https://\" + jwksUri);\n         Map<String, String> params = Collections.singletonMap(HttpHeaders.X_ZID, token.getAppTid());\n-        return tokenKeyService.getPublicKey(algorithm, keyId, URI.create(jwksUri), params);\n+        return tokenKeyService.getPublicKey(algorithm, keyId, uri, params);\n+    }\n+\n+    private String composeZidQueryParameter(Token token) {\n+        String zid = token.getAppTid();\n+        if (zid != null && !zid.trim().isEmpty()){\n+            return \"?zid=\" + zid;\n+        }\n+        return \"\";\n     }\n }"
        },
        {
            "filename": "java-security/src/test/java/com/sap/cloud/security/token/validation/validators/JwtValidatorBuilderTest.java",
            "diff": "@@ -58,8 +58,7 @@ public void sameServiceConfiguration_getSameInstance() {\n \t\tJwtValidatorBuilder builder_1 = JwtValidatorBuilder.getInstance(configuration);\n \t\tJwtValidatorBuilder builder_2 = JwtValidatorBuilder.getInstance(configuration);\n \t\tJwtValidatorBuilder builder_3 = JwtValidatorBuilder.getInstance(xsuaaConfigBuilder.build());\n-\t\tassertThat(builder_1).isSameAs(builder_2);\n-\t\tassertThat(builder_1).isSameAs(builder_3);\n+\t\tassertThat(builder_1).isSameAs(builder_2).isSameAs(builder_3);\n \t}\n \n \t@Test\n@@ -79,10 +78,9 @@ public void build_containsAllDefaultValidators() {\n \t\t\t\t.getValidators();\n \n \t\tassertThat(validators)\n-\t\t\t\t.hasSize(4)\n+\t\t\t\t.hasSize(3)\n \t\t\t\t.hasAtLeastOneElementOfType(JwtTimestampValidator.class)\n \t\t\t\t.hasAtLeastOneElementOfType(JwtAudienceValidator.class)\n-\t\t\t\t.hasAtLeastOneElementOfType(XsuaaJkuValidator.class)\n \t\t\t\t.hasAtLeastOneElementOfType(JwtSignatureValidator.class);\n \t}\n \n@@ -97,8 +95,7 @@ public void buildLegacy_containsAllDefaultValidators() {\n \t\t\t\t.hasSize(3)\n \t\t\t\t.hasAtLeastOneElementOfType(JwtTimestampValidator.class)\n \t\t\t\t.hasAtLeastOneElementOfType(JwtAudienceValidator.class)\n-\t\t\t\t.hasAtLeastOneElementOfType(JwtSignatureValidator.class)\n-\t\t\t\t.doesNotHaveAnyElementsOfTypes(XsuaaJkuValidator.class);\n+\t\t\t\t.hasAtLeastOneElementOfType(JwtSignatureValidator.class);\n \t}\n \n \t@Test"
        },
        {
            "filename": "java-security/src/test/java/com/sap/cloud/security/token/validation/validators/XsuaaJkuValidatorTest.java",
            "diff": "@@ -1,125 +0,0 @@\n-/**\n- * SPDX-FileCopyrightText: 2018-2023 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n- *<p>\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package com.sap.cloud.security.token.validation.validators;\n-\n-import com.sap.cloud.security.token.Token;\n-import com.sap.cloud.security.token.validation.ValidationResult;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.Mockito;\n-\n-import static com.sap.cloud.security.token.TokenHeader.JWKS_URL;\n-import static org.assertj.core.api.Assertions.assertThatThrownBy;\n-import static org.hamcrest.CoreMatchers.*;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.mockito.Mockito.when;\n-\n-public class XsuaaJkuValidatorTest {\n-\tprivate XsuaaJkuValidator cut;\n-\tprivate Token token;\n-\n-\t@Before\n-\tpublic void setup() {\n-\t\tcut = new XsuaaJkuValidator(\"myauth.ondemand.com\");\n-\t\ttoken = Mockito.mock(Token.class);\n-\t}\n-\n-\t@Test\n-\tpublic void constructor_throwsOnNullValues() {\n-\t\tassertThatThrownBy(() -> {\n-\t\t\tnew XsuaaJkuValidator(null);\n-\t\t}).isInstanceOf(IllegalArgumentException.class).hasMessageContainingAll(\"XsuaaJkuValidator\", \"uaaDomain\");\n-\n-\t\tassertThatThrownBy(() -> {\n-\t\t\tnew XsuaaJkuValidator(\" \");\n-\t\t}).isInstanceOf(IllegalArgumentException.class).hasMessageContainingAll(\"XsuaaJkuValidator\", \"uaaDomain\");\n-\t}\n-\n-\t@Test\n-\tpublic void jwksMatchesIdentityServiceDomain() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL)).thenReturn(\"https://subdomain.myauth.ondemand.com/token_keys\");\n-\t\tassertThat(cut.validate(token).isValid(), is(true));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJwksDoesNotMatchIdentityServiceDomain() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL)).thenReturn(\"https://subdomain.any.ondemand.com\");\n-\t\tValidationResult validationResult = cut.validate(token);\n-\t\tassertThat(validationResult.isErroneous(), is(true));\n-\t\tassertThat(validationResult.getErrorDescription(), startsWith(\n-\t\t\t\t\"Issuer is not trusted because 'jku' 'https://subdomain.any.ondemand.com' does not match uaa domain 'myauth.ondemand.com' of the identity service.\"));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJwksIsEmpty() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL)).thenReturn(\" \");\n-\t\tValidationResult validationResult = cut.validate(token);\n-\t\tassertThat(validationResult.isErroneous(), is(true));\n-\t\tassertThat(validationResult.getErrorDescription(), startsWith(\n-\t\t\t\t\"Issuer validation can not be performed because Jwt token does not contain 'jku' header parameter.\"));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJwksIsNull() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL)).thenReturn(null);\n-\t\tValidationResult validationResult = cut.validate(token);\n-\t\tassertThat(validationResult.isErroneous(), is(true));\n-\t\tassertThat(validationResult.getErrorDescription(), startsWith(\n-\t\t\t\t\"Issuer validation can not be performed because Jwt token does not contain 'jku' header parameter.\"));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJwksIsNotAValidUri() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL)).thenReturn(\"\\0://myauth.com\");\n-\t\tValidationResult validationResult = cut.validate(token);\n-\t\tassertThat(validationResult.isErroneous(), is(true));\n-\t\tassertThat(validationResult.getErrorDescription(),\n-\t\t\t\tcontainsString(\"Jwt token does not contain a valid uri as 'jku' header parameter\"));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJwksDoesNotContainAValidPath() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL))\n-\t\t\t\t.thenReturn(\"https://subdomain.myauth.ondemand.com/wrong_endpoint\");\n-\t\tValidationResult validationResult = cut.validate(token);\n-\t\tassertThat(validationResult.isErroneous(), is(true));\n-\t\tassertThat(validationResult.getErrorDescription(),\n-\t\t\t\tcontainsString(\"Jwt token does not contain a valid 'jku' header parameter\"));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJwksContainsQueryParameters() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL))\n-\t\t\t\t.thenReturn(\"https://subdomain.myauth.ondemand.com/token_keys?a=b\");\n-\t\tValidationResult validationResult = cut.validate(token);\n-\t\tassertThat(validationResult.isErroneous(), is(true));\n-\t\tassertThat(validationResult.getErrorDescription(),\n-\t\t\t\tcontainsString(\"Jwt token does not contain a valid 'jku' header parameter\"));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJwksContainsFragment() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL))\n-\t\t\t\t.thenReturn(\"https://subdomain.myauth.ondemand.com/token_keys#token_keys\");\n-\t\tValidationResult validationResult = cut.validate(token);\n-\t\tassertThat(validationResult.isErroneous(), is(true));\n-\t\tassertThat(validationResult.getErrorDescription(),\n-\t\t\t\tcontainsString(\"Jwt token does not contain a valid 'jku' header parameter\"));\n-\t}\n-\n-\t@Test\n-\tpublic void validationFails_whenJkuHasNonTrustedHost() {\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL))\n-\t\t\t\t.thenReturn(\"http://myauth.ondemand.com\\\\@malicious.ondemand.com/token_keys\");\n-\t\tassertThat(cut.validate(token).isValid(), is(false));\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL))\n-\t\t\t\t.thenReturn(\"http://myauth.ondemand.com@malicious.ondemand.com/token_keys\");\n-\t\tassertThat(cut.validate(token).isValid(), is(false));\n-\t\twhen(token.getHeaderParameterAsString(JWKS_URL))\n-\t\t\t\t.thenReturn(\"http://malicious.ondemand.com/token_keys///myauth.ondemand.com/token_keys\");\n-\t\tassertThat(cut.validate(token).isValid(), is(false));\n-\t}\n-}"
        },
        {
            "filename": "java-security/src/test/java/com/sap/cloud/security/token/validation/validators/XsuaaJwtSignatureValidatorTest.java",
            "diff": "@@ -7,7 +7,6 @@\n \n import com.sap.cloud.security.config.OAuth2ServiceConfiguration;\n import com.sap.cloud.security.config.Service;\n-import com.sap.cloud.security.token.SapIdToken;\n import com.sap.cloud.security.token.Token;\n import com.sap.cloud.security.token.XsuaaToken;\n import com.sap.cloud.security.token.validation.ValidationResult;\n@@ -23,11 +22,11 @@\n import java.net.URI;\n import java.util.Collections;\n \n+import static com.sap.cloud.security.config.cf.CFConstants.XSUAA.UAA_DOMAIN;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.when;\n \n public class XsuaaJwtSignatureValidatorTest {\n@@ -56,11 +55,12 @@ public void setup() throws IOException {\n \n \t\tmockConfiguration = Mockito.mock(OAuth2ServiceConfiguration.class);\n \t\twhen(mockConfiguration.getService()).thenReturn(Service.XSUAA);\n+\t\twhen(mockConfiguration.getProperty(UAA_DOMAIN)).thenReturn(\"authentication.stagingaws.hanavlab.ondemand.com\");\n \n \t\ttokenKeyServiceMock = Mockito.mock(OAuth2TokenKeyService.class);\n \t\twhen(tokenKeyServiceMock\n-\t\t\t\t.retrieveTokenKeys(eq(URI.create(\"https://authentication.stagingaws.hanavlab.ondemand.com/token_keys\")),\n-\t\t\t\t\t\teq(Collections.singletonMap(HttpHeaders.X_ZID, \"uaa\"))))\n+\t\t\t\t.retrieveTokenKeys(URI.create(\"https://authentication.stagingaws.hanavlab.ondemand.com/token_keys?zid=uaa\"),\n+\t\t\t\t\t\tCollections.singletonMap(HttpHeaders.X_ZID, \"uaa\")))\n \t\t\t\t\t\t\t\t.thenReturn(IOUtils.resourceToString(\"/jsonWebTokenKeys.json\", UTF_8));\n \n \t\tcut = new XsuaaJwtSignatureValidator(\n@@ -75,19 +75,6 @@ public void xsuaa_RSASignatureMatchesJWKS() {\n \t\tassertThat(cut.validate(xsuaaToken).isValid(), is(true));\n \t}\n \n-\t@Test\n-\tpublic void validationFails_whenNoJkuHeaderButIssuerIsGiven() throws IOException {\n-\t\t/**\n-\t\t *\n-\t\t * Header -------- { \"alg\": \"RS256\" } Payload -------- { \"iss\":\n-\t\t * \"https://application.myauth.com\" }\n-\t\t */\n-\t\tToken tokenWithoutJkuButIssuer = new SapIdToken(IOUtils.resourceToString(\"/iasOidcTokenRSA256.txt\", UTF_8));\n-\t\tValidationResult result = cut.validate(tokenWithoutJkuButIssuer);\n-\t\tassertThat(result.isErroneous(), is(true));\n-\t\tassertThat(result.getErrorDescription(), containsString(\"Token does not contain the mandatory \" + JsonWebKeyConstants.JKU_PARAMETER_NAME + \" header\"));\n-\t}\n-\n \t@Test\n \tpublic void generatedToken_SignatureMatchesVerificationkey() {\n \t\twhen(mockConfiguration.hasProperty(\"verificationkey\")).thenReturn(true);"
        },
        {
            "filename": "samples/spring-security-hybrid-usage/src/test/java/sample/spring/security/TestControllerTest.java",
            "diff": "@@ -17,12 +17,10 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.servlet.MockMvc;\n \n-import java.io.IOException;\n-\n import static org.junit.Assert.assertTrue;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-import static sample.spring.security.util.MockBearerTokenRequestPostProcessor.*;\n+import static sample.spring.security.util.MockBearerTokenRequestPostProcessor.bearerToken;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest\n@@ -37,12 +35,12 @@ public class TestControllerTest {\n     private String jwtIas;\n \n     @ClassRule\n-    public static SecurityTestRule ruleXsuaa = SecurityTestRule.getInstance(Service.XSUAA);\n+    public static SecurityTestRule ruleXsuaa = SecurityTestRule.getInstance(Service.XSUAA).setPort(2223);\n     @ClassRule\n     public static SecurityTestRule ruleIas = SecurityTestRule.getInstance(Service.IAS);\n \n     @Before\n-    public void setUp() throws IOException {\n+    public void setUp() {\n         jwtXsuaa = ruleXsuaa.getPreconfiguredJwtGenerator()\n                 .withLocalScopes(\"Read\")\n                 .createToken().getTokenValue();"
        },
        {
            "filename": "samples/spring-security-hybrid-usage/src/test/java/sample/spring/security/junitjupiter/TestControllerXsuaaTest.java",
            "diff": "@@ -5,12 +5,7 @@\n  */\n package sample.spring.security.junitjupiter;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n import com.sap.cloud.security.test.api.SecurityTestContext;\n-import com.sap.cloud.security.test.extension.XsuaaExtension;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n@@ -20,11 +15,14 @@\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.web.servlet.MockMvc;\n \n-import static sample.spring.security.util.MockBearerTokenRequestPostProcessor.*;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static sample.spring.security.util.MockBearerTokenRequestPostProcessor.bearerToken;\n \n @SpringBootTest\n @AutoConfigureMockMvc\n-@ExtendWith(XsuaaExtension.class)\n+@ExtendWith(XsuaaExtensionFixedPort.class)\n @ActiveProfiles(\"multixsuaa\") // properties are provided with /resources/application-multixsuaa.yml\n class TestControllerXsuaaTest {\n "
        },
        {
            "filename": "samples/spring-security-hybrid-usage/src/test/java/sample/spring/security/junitjupiter/XsuaaExtensionFixedPort.java",
            "diff": "@@ -0,0 +1,15 @@\n+/**\n+ * SPDX-FileCopyrightText: 2018-2023 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package sample.spring.security.junitjupiter;\n+\n+import com.sap.cloud.security.test.extension.XsuaaExtension;\n+\n+public class XsuaaExtensionFixedPort extends XsuaaExtension {\n+\n+\tpublic XsuaaExtensionFixedPort() {\n+\t\tsuper();\n+\t\tthis.setPort(2223);\n+\t}\n+}"
        },
        {
            "filename": "samples/spring-security-hybrid-usage/src/test/resources/application-multixsuaa.yml",
            "diff": "@@ -6,7 +6,7 @@ sap:\n     services:\n       xsuaa[0]:\n         xsappname: xsapp!t0815\n-        uaadomain: localhost\n+        uaadomain: http://localhost:2223\n         clientid: sb-clientId!t0815\n         clientsecret: pwd\n         url: http://localhost"
        },
        {
            "filename": "samples/spring-security-hybrid-usage/src/test/resources/application.yml",
            "diff": "@@ -6,7 +6,7 @@ sap:\n     services:\n       xsuaa:\n         xsappname: xsapp!t0815\n-        uaadomain: localhost\n+        uaadomain: http://localhost:2223\n         clientid: sb-clientId!t0815\n         clientsecret: pwd\n         url: http://localhost"
        },
        {
            "filename": "samples/spring-security-xsuaa-usage/src/test/java/sample/spring/xsuaa/TestControllerTest.java",
            "diff": "@@ -21,14 +21,18 @@\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.request.RequestPostProcessor;\n \n+import static com.sap.cloud.security.test.SecurityTest.*;\n import static org.junit.Assert.assertTrue;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest\n @AutoConfigureMockMvc\n-@TestPropertySource(properties = {\"xsuaa.uaadomain=localhost\", \"xsuaa.xsappname=xsapp!t0815\", \"xsuaa.clientid=sb-clientId!t0815\" })\n+@TestPropertySource(properties = {\n+        \"xsuaa.uaadomain=\" + DEFAULT_UAA_DOMAIN + \":2225\",\n+        \"xsuaa.xsappname=\" + DEFAULT_APP_ID,\n+        \"xsuaa.clientid=\" + DEFAULT_CLIENT_ID })\n public class TestControllerTest {\n \n     @Autowired\n@@ -39,7 +43,7 @@ public class TestControllerTest {\n     private String jwtAdmin;\n \n     @ClassRule\n-    public static SecurityTestRule rule = SecurityTestRule.getInstance(Service.XSUAA);\n+    public static SecurityTestRule rule = SecurityTestRule.getInstance(Service.XSUAA).setPort(2225);\n \n     @Before\n     public void setUp() {"
        },
        {
            "filename": "samples/spring-security-xsuaa-usage/src/test/java/sample/spring/xsuaa/junitjupiter/TestControllerTest.java",
            "diff": "@@ -5,13 +5,7 @@\n  */\n package sample.spring.xsuaa.junitjupiter;\n \n-import static com.sap.cloud.security.test.SecurityTest.*;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n import com.sap.cloud.security.test.api.SecurityTestContext;\n-import com.sap.cloud.security.test.extension.XsuaaExtension;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n@@ -24,13 +18,18 @@\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.request.RequestPostProcessor;\n \n+import static com.sap.cloud.security.test.SecurityTest.*;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n @SpringBootTest\n @AutoConfigureMockMvc\n @TestPropertySource(properties = {\n-\t\t\"xsuaa.uaadomain=\" + DEFAULT_DOMAIN,\n+\t\t\"xsuaa.uaadomain=\" + DEFAULT_UAA_DOMAIN + \":2224\",\n \t\t\"xsuaa.xsappname=\" + DEFAULT_APP_ID,\n \t\t\"xsuaa.clientid=\" + DEFAULT_CLIENT_ID })\n-@ExtendWith(XsuaaExtension.class)\n+@ExtendWith(XsuaaExtensionFixedPort.class)\n class TestControllerTest {\n \n \t@Autowired"
        },
        {
            "filename": "samples/spring-security-xsuaa-usage/src/test/java/sample/spring/xsuaa/junitjupiter/XsuaaExtensionFixedPort.java",
            "diff": "@@ -0,0 +1,15 @@\n+/**\n+ * SPDX-FileCopyrightText: 2018-2023 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package sample.spring.xsuaa.junitjupiter;\n+\n+import com.sap.cloud.security.test.extension.XsuaaExtension;\n+\n+public class XsuaaExtensionFixedPort extends XsuaaExtension {\n+\n+\tpublic XsuaaExtensionFixedPort() {\n+\t\tsuper();\n+\t\tthis.setPort(2224);\n+\t}\n+}"
        },
        {
            "filename": "spring-xsuaa-it/src/main/java/com/sap/cloud/security/xsuaa/mock/JWTUtil.java",
            "diff": "@@ -5,10 +5,10 @@\n  */\n package com.sap.cloud.security.xsuaa.mock;\n \n-import java.io.IOException;\n-\n import com.sap.cloud.security.xsuaa.test.JwtGenerator;\n \n+import java.io.IOException;\n+\n public class JWTUtil {\n \n \tprivate JWTUtil() {\n@@ -25,4 +25,11 @@ public static String createJWT(String pathToTemplate, String subdomain, String k\n \t\treturn jwtGenerator.createFromTemplate(pathToTemplate).getTokenValue();\n \t}\n \n+\tpublic static String createJWT(String pathToTemplate, String subdomain, String zid, String keyId)\n+\t\t\tthrows IOException {\n+\t\tJwtGenerator jwtGenerator = new JwtGenerator(\"sb-java-hello-world\", subdomain, zid)\n+\t\t\t\t.setJwtHeaderKeyId(keyId != null ? keyId : \"legacy-token-key-\" + subdomain);\n+\t\treturn jwtGenerator.createFromTemplate(pathToTemplate).getTokenValue();\n+\t}\n+\n }"
        },
        {
            "filename": "spring-xsuaa-it/src/test/java/com/sap/cloud/security/xsuaa/extractor/BasicAuthenticationValidationTest.java",
            "diff": "@@ -5,13 +5,7 @@\n  */\n package com.sap.cloud.security.xsuaa.extractor;\n \n-import static org.hamcrest.Matchers.containsString;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.util.Base64;\n-\n+import com.sap.cloud.security.xsuaa.mock.JWTUtil;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -22,13 +16,17 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.request.RequestPostProcessor;\n-\n-import com.sap.cloud.security.xsuaa.mock.JWTUtil;\n-\n import testservice.api.XsuaaITApplication;\n import testservice.api.basic.SecurityConfiguration;\n import testservice.api.basic.TestController;\n \n+import java.util.Base64;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n @RunWith(SpringRunner.class)\n @SpringBootTest(properties = {\n \t\t\"xsuaa.xsappname=java-hello-world\","
        },
        {
            "filename": "spring-xsuaa-it/src/test/java/com/sap/cloud/security/xsuaa/token/authentication/XsuaaTokenValidationTest.java",
            "diff": "@@ -5,11 +5,7 @@\n  */\n package com.sap.cloud.security.xsuaa.token.authentication;\n \n-import static org.hamcrest.Matchers.containsString;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n+import com.sap.cloud.security.xsuaa.mock.JWTUtil;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -20,12 +16,14 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.request.RequestPostProcessor;\n-\n-import com.sap.cloud.security.xsuaa.mock.JWTUtil;\n-\n import testservice.api.XsuaaITApplication;\n import testservice.api.v1.TestController;\n \n+import static org.hamcrest.Matchers.containsString;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n @RunWith(SpringRunner.class)\n @SpringBootTest(properties = {\n \t\t\"xsuaa.xsappname=java-hello-world\",\n@@ -39,36 +37,38 @@ public class XsuaaTokenValidationTest {\n \tMockMvc mvc;\n \n \t@Test\n-\tpublic void testToken_testdomain() throws Exception {\n-\t\tthis.mvc.perform(get(\"/user\").with(bearerToken(JWTUtil.createJWT(\"/saml.txt\", \"testdomain\"))))\n-\t\t\t\t.andExpect(status().isOk()).andExpect(content().string(containsString(\"user:Mustermann\")));\n-\t\tthis.mvc.perform(get(\"/user\").with(bearerToken(JWTUtil.createJWT(\"/saml.txt\", \"testdomain\"))))\n+\tvoid testToken_testdomain() throws Exception {\n+\t\tthis.mvc.perform(get(\"/user\").with(bearerToken(JWTUtil.createJWT(\"/saml.txt\",\n+\t\t\t\t\"testdomain\", \"tenant\", null))))\n \t\t\t\t.andExpect(status().isOk()).andExpect(content().string(containsString(\"user:Mustermann\")));\n \t}\n \n \t@Test\n-\tpublic void testToken_otherdomain() throws Exception {\n-\t\tthis.mvc.perform(get(\"/user\").with(bearerToken(JWTUtil.createJWT(\"/saml.txt\", \"otherdomain\"))))\n+\tvoid testToken_otherdomain() throws Exception {\n+\t\tthis.mvc.perform(get(\"/user\").with(bearerToken(JWTUtil.createJWT(\"/saml.txt\",\n+\t\t\t\t\"otherdomain\", \"othertenant\", null))))\n \t\t\t\t.andExpect(status().isOk()).andExpect(content().string(containsString(\"user:Mustermann\")));\n \t}\n \n \t@Test\n-\tpublic void test_Scope() throws Exception {\n-\t\tthis.mvc.perform(get(\"/scope\").with(bearerToken(JWTUtil.createJWT(\"/saml.txt\", \"otherdomain\"))))\n+\tvoid test_Scope() throws Exception {\n+\t\tthis.mvc.perform(get(\"/scope\").with(bearerToken(JWTUtil.createJWT(\"/saml.txt\",\n+\t\t\t\t\"otherdomain\", \"othertenant\", null))))\n \t\t\t\t.andExpect(status().isOk());\n \t}\n \n \t@Test\n-\tpublic void test_clientcredentialstoken() throws Exception {\n+\tvoid test_clientcredentialstoken() throws Exception {\n \t\tthis.mvc.perform(\n \t\t\t\tget(\"/clientCredentialsToken\")\n-\t\t\t\t\t\t.with(bearerToken(JWTUtil.createJWT(\"/saml.txt\", \"uaa\", \"legacy-token-key\"))))\n+\t\t\t\t\t\t.with(bearerToken(JWTUtil.createJWT(\"/saml.txt\", \"uaa\",\n+\t\t\t\t\t\t\t\t\"legacy-token-key\"))))\n \t\t\t\t.andExpect(status().isOk()).andExpect(\n \t\t\t\t\t\tcontent().string(containsString(\".ewogICJqdGkiOiAiOGU3YjNiMDAtNzc1MS00YjQ2LTliMWEtNWE0NmEyY\")));\n \t}\n \n \t@Test\n-\tpublic void test_insufficientScopedToken_isUnauthorized() throws Exception {\n+\tvoid test_insufficientScopedToken_isUnauthorized() throws Exception {\n \t\tthis.mvc.perform(\n \t\t\t\tget(\"/clientCredentialsToken\")\n \t\t\t\t\t\t.with(bearerToken(\n@@ -77,7 +77,7 @@ public void test_insufficientScopedToken_isUnauthorized() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void test_expiredToken_isUnauthorized() throws Exception {\n+\tvoid test_expiredToken_isUnauthorized() throws Exception {\n \t\tthis.mvc.perform(\n \t\t\t\tget(\"/clientCredentialsToken\")\n \t\t\t\t\t\t.with(bearerToken(JWTUtil.createJWT(\"/expired.txt\", \"uaa\", \"legacy-token-key\"))))"
        },
        {
            "filename": "spring-xsuaa-it/src/test/java/testservice/api/XsuaaJwtDecoderTest.java",
            "diff": "@@ -5,6 +5,11 @@\n  */\n package testservice.api;\n \n+import com.sap.cloud.security.xsuaa.XsuaaServiceConfiguration;\n+import com.sap.cloud.security.xsuaa.autoconfiguration.XsuaaAutoConfiguration;\n+import com.sap.cloud.security.xsuaa.autoconfiguration.XsuaaResourceServerJwkAutoConfiguration;\n+import com.sap.cloud.security.xsuaa.test.JwtGenerator;\n+import com.sap.cloud.security.xsuaa.token.authentication.XsuaaJwtDecoderBuilder;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -16,13 +21,6 @@\n import org.springframework.security.oauth2.jwt.JwtException;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n-\n-import com.sap.cloud.security.xsuaa.XsuaaServiceConfiguration;\n-import com.sap.cloud.security.xsuaa.autoconfiguration.XsuaaAutoConfiguration;\n-import com.sap.cloud.security.xsuaa.autoconfiguration.XsuaaResourceServerJwkAutoConfiguration;\n-import com.sap.cloud.security.xsuaa.test.JwtGenerator;\n-import com.sap.cloud.security.xsuaa.token.authentication.XsuaaJwtDecoderBuilder;\n-\n import testservice.api.nohttp.MyEventHandler;\n import testservice.api.nohttp.SecurityConfiguration;\n \n@@ -66,7 +64,7 @@ public void postValidationActionIsExecutedIfSuccess() {\n \n \t@Test\n \tpublic void postValidationActionIsNotExecutedIfFail() {\n-\t\tString jwt = new JwtGenerator(clientId, \"subdomain\").deriveAudiences(true)\n+\t\tString jwt = new JwtGenerator(clientId, \"subdomain\", \"tenant\").deriveAudiences(true)\n \t\t\t\t.setJwtHeaderKeyId(\"legacy-token-key\").setJku(null).getToken().getTokenValue();\n \t\ttry {\n \t\t\tjwtDecoderWithPostAction.decode(jwt);"
        },
        {
            "filename": "spring-xsuaa-mock/src/main/java/com/sap/cloud/security/xsuaa/mock/XsuaaRequestDispatcher.java",
            "diff": "@@ -5,38 +5,38 @@\n  */\n package com.sap.cloud.security.xsuaa.mock;\n \n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-\n+import okhttp3.mockwebserver.Dispatcher;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.RecordedRequest;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n \n-import okhttp3.mockwebserver.Dispatcher;\n-import okhttp3.mockwebserver.MockResponse;\n-import okhttp3.mockwebserver.RecordedRequest;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n \n public class XsuaaRequestDispatcher extends Dispatcher {\n \tprotected static final String RESPONSE_404 = \"Xsuaa mock authorization server does not support this request\";\n \tprotected static final String RESPONSE_401 = \"Xsuaa mock authorization server can't authenticate client/user\";\n \tprotected static final String RESPONSE_500 = \"Xsuaa mock authorization server can't process request\";\n-\tprotected static final String PATH_TOKEN_KEYS_TEMPLATE = \"/mock/token_keys_template.json\";\n-\tprotected static final String PATH_PUBLIC_KEY = \"/mock/publicKey.txt\";\n+\tprotected static final String PATH_TESTDOMAIN_TOKEN_KEYS = \"/mockServer/testdomain_token_keys.json\";\n+\tpublic static final String PATH_OTHER_DOMAIN_TOKEN_KEYS = \"/mockServer/otherdomain_token_keys.json\";\n+\tprotected static final String PATH_PUBLIC_KEY = \"/mockServer/publicKey.txt\";\n \tprotected final Logger logger = LoggerFactory.getLogger(XsuaaRequestDispatcher.class);\n-\tprivate static int callCount = 0;\n+\tprivate static final int callCount = 0;\n \n \t@Override\n \tpublic MockResponse dispatch(RecordedRequest request) {\n-\t\tcallCount++;\n-\t\tif (\"/testdomain/token_keys\".equals(request.getPath())) {\n-\t\t\tString subdomain = \"testdomain\";\n-\t\t\treturn getTokenKeyForKeyId(PATH_TOKEN_KEYS_TEMPLATE, \"legacy-token-key-\" + subdomain);\n+\t\t// mock JWKS endpoints\n+\t\tif (\"/token_keys?zid=tenant\".equals(request.getPath())) {\n+\t\t\treturn getTokenKeyForKeyId(PATH_TESTDOMAIN_TOKEN_KEYS, \"legacy-token-key-testdomain\");\n \t\t}\n-\t\tif (request.getPath().endsWith(\"/token_keys\")) {\n-\t\t\treturn getTokenKeyForKeyId(PATH_TOKEN_KEYS_TEMPLATE, \"legacy-token-key\");\n+\n+\t\tif (\"/token_keys?zid=othertenant\".equals(request.getPath())) {\n+\t\t\treturn getResponseFromFile(PATH_OTHER_DOMAIN_TOKEN_KEYS, HttpStatus.OK);\n \t\t}\n \t\treturn getResponse(RESPONSE_404, HttpStatus.NOT_FOUND);\n \t}"
        },
        {
            "filename": "spring-xsuaa-mock/src/test/java/com/sap/cloud/security/xsuaa/mock/XsuaaMockPostProcessor.java",
            "diff": "@@ -5,15 +5,14 @@\n  */\n package com.sap.cloud.security.xsuaa.mock;\n \n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.RecordedRequest;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.env.EnvironmentPostProcessor;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.Profiles;\n import org.springframework.http.HttpStatus;\n \n-import okhttp3.mockwebserver.MockResponse;\n-import okhttp3.mockwebserver.RecordedRequest;\n-\n public class XsuaaMockPostProcessor implements EnvironmentPostProcessor {\n \n \tprivate static final XsuaaMockWebServer mockAuthorizationServer = new XsuaaMockWebServer(new MyDispatcher());\n@@ -30,7 +29,7 @@ private static class MyDispatcher extends XsuaaRequestDispatcher {\n \t\t@Override\n \t\tpublic MockResponse dispatch(RecordedRequest request) {\n \t\t\tif (\"/customdomain/token_keys\".equals(request.getPath())) {\n-\t\t\t\treturn getTokenKeyForKeyId(PATH_TOKEN_KEYS_TEMPLATE, \"legacy-token-key-customdomain\");\n+\t\t\t\treturn getTokenKeyForKeyId(PATH_TESTDOMAIN_TOKEN_KEYS, \"legacy-token-key-customdomain\");\n \t\t\t}\n \t\t\tif (\"/testdomain/token_keys\".equals(request.getPath())) {\n \t\t\t\treturn getResponseFromFile(\"/mock/testdomain_token_keys.json\", HttpStatus.OK);"
        },
        {
            "filename": "spring-xsuaa/src/main/java/com/sap/cloud/security/xsuaa/token/authentication/XsuaaJwtDecoder.java",
            "diff": "@@ -5,25 +5,12 @@\n  */\n package com.sap.cloud.security.xsuaa.token.authentication;\n \n-import static com.sap.cloud.security.xsuaa.token.TokenClaims.CLAIM_JKU;\n-import static com.sap.cloud.security.xsuaa.token.TokenClaims.CLAIM_KID;\n-import static org.springframework.util.StringUtils.hasText;\n-\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.security.KeyFactory;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.interfaces.RSAPublicKey;\n-import java.security.spec.InvalidKeySpecException;\n-import java.security.spec.X509EncodedKeySpec;\n-import java.text.ParseException;\n-import java.time.Duration;\n-import java.util.*;\n-\n import com.github.benmanes.caffeine.cache.Caffeine;\n import com.nimbusds.jwt.JWT;\n import com.nimbusds.jwt.JWTParser;\n+import com.sap.cloud.security.config.cf.CFConstants;\n import com.sap.cloud.security.xsuaa.XsuaaServiceConfiguration;\n+import com.sap.cloud.security.xsuaa.token.TokenClaims;\n import org.json.JSONObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -35,13 +22,27 @@\n import org.springframework.util.Assert;\n import org.springframework.web.client.RestOperations;\n \n+import javax.annotation.Nullable;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.interfaces.RSAPublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.text.ParseException;\n+import java.time.Duration;\n+import java.util.*;\n+\n+import static com.sap.cloud.security.xsuaa.token.TokenClaims.CLAIM_JKU;\n+import static com.sap.cloud.security.xsuaa.token.TokenClaims.CLAIM_KID;\n+import static org.springframework.util.StringUtils.hasText;\n+\n public class XsuaaJwtDecoder implements JwtDecoder {\n \tprivate final Logger logger = LoggerFactory.getLogger(getClass());\n \tprivate final XsuaaServiceConfiguration xsuaaServiceConfiguration;\n \tprivate final Duration cacheValidityInSeconds;\n \tprivate final int cacheSize;\n \n-\tcom.github.benmanes.caffeine.cache.Cache<String, JwtDecoder> cache;\n+\tfinal com.github.benmanes.caffeine.cache.Cache<String, JwtDecoder> cache;\n \tprivate final OAuth2TokenValidator<Jwt> tokenValidators;\n \tprivate final Collection<PostValidationAction> postValidationActions;\n \tprivate TokenInfoExtractor tokenInfoExtractor;\n@@ -109,10 +110,9 @@ public void setRestOperations(RestOperations restOperations) {\n \n \tprivate Jwt verifyToken(JWT jwt) {\n \t\ttry {\n-\t\t\tString jku = tokenInfoExtractor.getJku(jwt);\n \t\t\tString kid = tokenInfoExtractor.getKid(jwt);\n \t\t\tString uaaDomain = tokenInfoExtractor.getUaaDomain(jwt);\n-\t\t\treturn verifyToken(jwt.getParsedString(), jku, kid, uaaDomain);\n+\t\t\treturn verifyToken(jwt.getParsedString(), kid, uaaDomain, getZid(jwt));\n \t\t} catch (BadJwtException e) {\n \t\t\tif (e.getMessage().contains(\"Couldn't retrieve remote JWK set\")\n \t\t\t\t\t|| e.getMessage().contains(\"Cannot verify with online token key, uaadomain is\")) {\n@@ -124,51 +124,55 @@ private Jwt verifyToken(JWT jwt) {\n \t\t}\n \t}\n \n-\tprivate Jwt verifyToken(String token, String jku, String kid, String uaaDomain) {\n+\t@Nullable\n+\tprivate static String getZid(JWT jwt) {\n+\t\tString zid;\n \t\ttry {\n-\t\t\tcanVerifyWithKey(jku, kid, uaaDomain);\n-\t\t\tvalidateJku(jku, uaaDomain);\n-\t\t\treturn verifyWithKey(token, jku, kid);\n+\t\t\tzid = jwt.getJWTClaimsSet().getStringClaim(\n+\t\t\t\t\tTokenClaims.CLAIM_ZONE_ID);\n+\n+\t\t} catch (ParseException e) {\n+\t\t\tzid =null;\n+\t\t}\n+\t\tif (zid != null && zid.trim().isEmpty()){\n+\t\t\tzid = null;\n+\t\t}\n+\t\treturn zid;\n+\t}\n+\n+\tprivate Jwt verifyToken(String token, String kid, String uaaDomain, String zid) {\n+\t\ttry {\n+\t\t\tcanVerifyWithKey(kid, uaaDomain);\n+\t\t\treturn verifyWithKey(token, composeJku(uaaDomain, zid), kid);\n \t\t} catch (JwtValidationException ex) {\n \t\t\tthrow ex;\n \t\t} catch (JwtException ex) {\n \t\t\tthrow new BadJwtException(\"JWT verification failed: \" + ex.getMessage());\n \t\t}\n \t}\n \n-\tprivate void canVerifyWithKey(String jku, String kid, String uaadomain) {\n-\t\tif (jku != null && kid != null && uaadomain != null) {\n+\tprivate void canVerifyWithKey(String kid, String uaadomain) {\n+\t\tif (kid != null && uaadomain != null) {\n \t\t\treturn;\n \t\t}\n \t\tList<String> nullParams = new ArrayList<>();\n-\t\tif (jku == null)\n-\t\t\tnullParams.add(\"jku\");\n \t\tif (kid == null)\n-\t\t\tnullParams.add(\"kid\");\n+\t\t\tnullParams.add(CLAIM_KID);\n \t\tif (uaadomain == null)\n-\t\t\tnullParams.add(\"uaadomain\");\n+\t\t\tnullParams.add(CFConstants.XSUAA.UAA_DOMAIN);\n \n \t\tthrow new BadJwtException(String.format(\"Cannot verify with online token key, %s is null\",\n \t\t\t\tString.join(\", \", nullParams)));\n \t}\n \n-\tprivate void validateJku(String jku, String uaadomain) {\n-\t\ttry {\n-\t\t\tURI jkuUri = new URI(jku);\n-\t\t\tif (jkuUri.getHost() == null) {\n-\t\t\t\tthrow new BadJwtException(\"JKU of token is not valid\");\n-\t\t\t} else if (!jkuUri.getHost().endsWith(uaadomain)) {\n-\t\t\t\tlogger.warn(\"Error: Do not trust jku '{}' because it does not match uaa domain '{}'.\",\n-\t\t\t\t\t\tjku, uaadomain);\n-\t\t\t\tthrow new BadJwtException(\"Do not trust 'jku' token header.\");\n-\t\t\t} else if (!jkuUri.getPath().endsWith(\"token_keys\") || hasText(jkuUri.getQuery())\n-\t\t\t\t\t|| hasText(jkuUri.getFragment())) {\n-\t\t\t\tlogger.warn(\"Error: Do not trust jku '{}' because it contains invalid path, query or fragment.\", jku);\n-\t\t\t\tthrow new BadJwtException(\"Jwt token does not contain a valid 'jku' header parameter: \" + jkuUri);\n-\t\t\t}\n-\t\t} catch (URISyntaxException e) {\n-\t\t\tthrow new BadJwtException(\"JKU of token header is not valid\");\n+\tprivate String composeJku(String uaaDomain, String zid) {\n+\t\tString zidQueryParam = zid != null ? \"?zid=\" + zid : \"\";\n+\n+\t\t// uaaDomain in configuration is always without a schema, but for testing purpose http schema can be used\n+\t\tif (uaaDomain.startsWith(\"http://\")){\n+\t\t\treturn uaaDomain + \"/token_keys\" + zidQueryParam;\n \t\t}\n+\t\treturn \"https://\" + uaaDomain + \"/token_keys\" + zidQueryParam;\n \t}\n \n \t@java.lang.SuppressWarnings(\"squid:S2259\")"
        },
        {
            "filename": "spring-xsuaa/src/test/java/com/sap/cloud/security/xsuaa/token/authentication/XsuaaJwtDecoderTest.java",
            "diff": "@@ -5,16 +5,6 @@\n  */\n package com.sap.cloud.security.xsuaa.token.authentication;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatThrownBy;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.times;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-\n-import com.nimbusds.jwt.JWT;\n import com.sap.cloud.security.xsuaa.XsuaaCredentials;\n import com.sap.cloud.security.xsuaa.XsuaaServiceConfiguration;\n import com.sap.cloud.security.xsuaa.XsuaaServiceConfigurationCustom;\n@@ -36,6 +26,15 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.web.client.RestOperations;\n \n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+\n @RunWith(SpringRunner.class)\n @TestPropertySource(\"/XsuaaJwtDecoderTest.properties\")\n @ContextConfiguration(classes = XsuaaServiceConfigurationDefault.class)\n@@ -125,89 +124,7 @@ public void decode_withNonMatchingVerificationKey_throwsException()  {\n \t\tfinal JwtDecoder cut = new XsuaaJwtDecoderBuilder(configuration).build();\n \n \t\tassertThatThrownBy(() -> cut.decode(ccToken)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"Cannot verify with online token key, jku, kid, uaadomain is null\");\n+\t\t\t\t.hasMessageContaining(\"Cannot verify with online token key, kid, uaadomain is null\");\n \t}\n \n-\t@Test\n-\tpublic void decode_whenJwksContainsInvalidJwksDomain_throwsException() throws IOException {\n-\t\tString token = IOUtils.resourceToString(\"/token_user.txt\", StandardCharsets.UTF_8);\n-\t\tXsuaaJwtDecoder cut = (XsuaaJwtDecoder) new XsuaaJwtDecoderBuilder(configuration).build();\n-\n-\t\tcut.setTokenInfoExtractor(new TokenInfoExtractorImpl(\"https://subdomain.wrongoauth.ondemand.com/token_keys\"));\n-\t\tassertThatThrownBy(() -> cut.decode(token)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"JWT verification failed: Do not trust 'jku' token header\");\n-\n-\t\tcut.setTokenInfoExtractor(\n-\t\t\t\tnew TokenInfoExtractorImpl(\"http://myauth.ondemand.com@malicious.ondemand.com/token_keys\"));\n-\t\tassertThatThrownBy(() -> cut.decode(token)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"JWT verification failed: Do not trust 'jku' token header\");\n-\n-\t\tcut.setTokenInfoExtractor(new TokenInfoExtractorImpl(\n-\t\t\t\t\"http://malicious.ondemand.com/token_keys///myauth.ondemand.com/token_keys\"));\n-\t\tassertThatThrownBy(() -> cut.decode(token)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"JWT verification failed: Do not trust 'jku' token header\");\n-\t}\n-\n-\t@Test\n-\tpublic void decode_whenJwksUrlIsNotValid_throwsException() {\n-\t\tXsuaaJwtDecoder cut = (XsuaaJwtDecoder) new XsuaaJwtDecoderBuilder(configuration).build();\n-\n-\t\tcut.setTokenInfoExtractor(\n-\t\t\t\tnew TokenInfoExtractorImpl(\"http://myauth.ondemand.com\\\\@malicious.ondemand.com/token_keys\"));\n-\t\tassertThatThrownBy(() -> cut.decode(ccToken)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"JWT verification failed: JKU of token header is not valid\");\n-\t}\n-\n-\t@Test\n-\tpublic void decode_whenJwksContainsInvalidPath_throwsException() {\n-\t\tXsuaaJwtDecoder cut = (XsuaaJwtDecoder) new XsuaaJwtDecoderBuilder(configuration).build();\n-\t\tcut.setTokenInfoExtractor(new TokenInfoExtractorImpl(\"https://subdomain.myauth.ondemand.com/wrong_endpoint\"));\n-\n-\t\tassertThatThrownBy(() -> cut.decode(ccToken)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"Jwt token does not contain a valid 'jku' header parameter\");\n-\t}\n-\n-\t@Test\n-\tpublic void decode_whenJwksContainQueryParameters_throwsException() {\n-\t\tXsuaaJwtDecoder cut = (XsuaaJwtDecoder) new XsuaaJwtDecoderBuilder(configuration).build();\n-\t\tcut.setTokenInfoExtractor(new TokenInfoExtractorImpl(\"https://subdomain.myauth.ondemand.com/token_keys?a=b\"));\n-\n-\t\tassertThatThrownBy(() -> cut.decode(ccToken)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"Jwt token does not contain a valid 'jku' header parameter: \");\n-\n-\t}\n-\n-\t@Test\n-\tpublic void decode_whenJwksContainsFragment_throwsException() {\n-\t\tXsuaaJwtDecoder cut = (XsuaaJwtDecoder) new XsuaaJwtDecoderBuilder(configuration).build();\n-\t\tcut.setTokenInfoExtractor(\n-\t\t\t\tnew TokenInfoExtractorImpl(\"https://subdomain.myauth.ondemand.com/token_keys#token_keys\"));\n-\n-\t\tassertThatThrownBy(() -> cut.decode(ccToken)).isInstanceOf(JwtException.class)\n-\t\t\t\t.hasMessageContaining(\"Jwt token does not contain a valid 'jku' header parameter:\");\n-\t}\n-\n-\tprivate static class TokenInfoExtractorImpl\n-\t\t\timplements com.sap.cloud.security.xsuaa.token.authentication.TokenInfoExtractor {\n-\t\tprivate final String jku;\n-\n-\t\tpublic TokenInfoExtractorImpl(String jku) {\n-\t\t\tthis.jku = jku;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getJku(JWT jwt) {\n-\t\t\treturn jku;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getKid(JWT jwt) {\n-\t\t\treturn \"kid\";\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getUaaDomain(JWT jwt) {\n-\t\t\treturn \"myauth.ondemand.com\";\n-\t\t}\n-\t}\n }\n\\ No newline at end of file"
        }
    ],
    "commitTime": "2023-11-24 14:53:20"
}