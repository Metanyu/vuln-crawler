{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "NONE",
        "integrity": "NONE",
        "availability": "HIGH"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [],
    "cvssScore": 7.5,
    "disclosureTime": "2023-10-24 02:00:50",
    "epssDetails": null,
    "exploitMaturity": "Not Defined",
    "id": "SNYK-RUBY-ENCODEDID-6028343",
    "identifiers": {
        "CVE": [
            "CVE-2024-0241"
        ],
        "CWE": [
            "CWE-400"
        ]
    },
    "language": "ruby",
    "malicious": false,
    "packageManager": "rubygems",
    "publicationTime": "2024-01-05 15:01:31",
    "remediation": "Upgrade encoded_id to version 1.0.0.rc3 or higher. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Uncontrolled Resource Consumption ('Resource Exhaustion')",
    "vulnDescription": {
        "Details": "Denial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users. Unlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime. One popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines. When it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries. Two common types of DoS vulnerabilities: High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, commons-fileupload:commons-fileupload . Crash - An attacker sending crafted requests that could cause the system to crash. For Example, npm ws package ",
        "Overview": "Affected versions of this package are vulnerable to Uncontrolled Resource Consumption ('Resource Exhaustion') due to improper hashid limitation. This results in the application spending a significant amount of time decoding the ID and allocating a large amount of memory. "
    },
    "source_code": [
        {
            "filename": "README.md",
            "diff": "@@ -117,6 +117,15 @@ The encoded ID is configurable. The following can be changed:\n \n The actual length of the encoded string can be longer if the inputs cannot be represented in the minimum length.\n \n+### `max_length`\n+\n+`max_length`: the maximum length of the encoded string. The default is 128 characters.\n+\n+The maximum length represents both the longest encoded string that will be generated and also a limit on\n+the maximum input length that will be decoded. If the encoded string exceeds `max_length` then a\n+`EncodedIdLengthError` will be raised. If the input exceeds `max_length` then a `InvalidInputError` will\n+be raised. If `max_length` is set to `nil`, then no validation, even using the default will be performed.\n+\n ### `alphabet`\n \n `alphabet`: the alphabet used in the encoded string. By default it uses a variation of the Crockford reduced character set (https://www.crockford.com/base32.html)."
        },
        {
            "filename": "lib/encoded_id.rb",
            "diff": "@@ -12,5 +12,7 @@ class InvalidAlphabetError < ArgumentError; end\n \n   class EncodedIdFormatError < ArgumentError; end\n \n+  class EncodedIdLengthError < ArgumentError; end\n+\n   class InvalidInputError < ArgumentError; end\n end"
        },
        {
            "filename": "lib/encoded_id/reversible_id.rb",
            "diff": "@@ -8,20 +8,24 @@\n # Note hashIds already has a built in profanity limitation algorithm\n module EncodedId\n   class ReversibleId\n-    def initialize(salt:, length: 8, split_at: 4, split_with: \"-\", alphabet: Alphabet.modified_crockford, hex_digit_encoding_group_size: 4)\n+    def initialize(salt:, length: 8, split_at: 4, split_with: \"-\", alphabet: Alphabet.modified_crockford, hex_digit_encoding_group_size: 4, max_length: 128)\n       @alphabet = validate_alphabet(alphabet)\n       @salt = validate_salt(salt)\n       @length = validate_length(length)\n       @split_at = validate_split_at(split_at)\n       @split_with = validate_split_with(split_with, alphabet)\n       @hex_represention_encoder = HexRepresentation.new(hex_digit_encoding_group_size)\n+      @max_length = validate_max_length(max_length)\n     end\n \n     # Encode the input values into a hash\n     def encode(values)\n       inputs = prepare_input(values)\n       encoded_id = encoded_id_generator.encode(inputs)\n       encoded_id = humanize_length(encoded_id) unless split_at.nil?\n+\n+      raise EncodedIdLengthError if !max_length.nil? && encoded_id.length > max_length\n+\n       encoded_id\n     end\n \n@@ -32,6 +36,8 @@ def encode_hex(hexs)\n \n     # Decode the hash to original array\n     def decode(str)\n+      raise InvalidInputError if !max_length.nil? && str.length > max_length\n+\n       encoded_id_generator.decode(convert_to_hash(str))\n     rescue ::Hashids::InputError => e\n       raise EncodedIdFormatError, e.message\n@@ -50,7 +56,8 @@ def decode_hex(str)\n       :alphabet,\n       :split_at,\n       :split_with,\n-      :hex_represention_encoder\n+      :hex_represention_encoder,\n+      :max_length\n \n     def validate_alphabet(alphabet)\n       raise InvalidAlphabetError, \"alphabet must be an instance of Alphabet\" unless alphabet.is_a?(Alphabet)\n@@ -68,6 +75,13 @@ def validate_length(length)\n       length\n     end\n \n+    def validate_max_length(max_length)\n+      unless (max_length.is_a?(Integer) && max_length > 0) || max_length.nil?\n+        raise InvalidConfigurationError, \"Max length must be an integer greater than 0\"\n+      end\n+      max_length\n+    end\n+\n     # Split the encoded string into groups of this size\n     def validate_split_at(split_at)\n       unless (split_at.is_a?(Integer) && split_at > 0) || split_at.nil?"
        },
        {
            "filename": "sig/encoded_id.rbs",
            "diff": "@@ -3,6 +3,7 @@ module EncodedId\n \n   InvalidConfigurationError: ::StandardError\n   EncodedIdFormatError: ::ArgumentError\n+  EncodedIdLengthError: ::ArgumentError\n   InvalidAlphabetError: ::ArgumentError\n   InvalidInputError: ::ArgumentError\n \n@@ -56,7 +57,7 @@ module EncodedId\n   end\n \n   class ReversibleId\n-    def initialize: (salt: ::String, ?length: ::Integer, ?split_at: ::Integer, ?split_with: ::String, ?alphabet: Alphabet, ?hex_digit_encoding_group_size: ::Integer) -> void\n+    def initialize: (salt: ::String, ?length: ::Integer, ?split_at: ::Integer, ?split_with: ::String, ?alphabet: Alphabet, ?hex_digit_encoding_group_size: ::Integer, ?max_length: ::Integer) -> void\n \n     # Encode the input values into a hash\n     def encode: (encodeableValue values) -> ::String\n@@ -79,6 +80,7 @@ module EncodedId\n     attr_reader salt: ::String\n \n     attr_reader length: ::Integer\n+    attr_reader max_length: ::Integer | nil\n \n     attr_reader alphabet: Alphabet\n \n@@ -90,6 +92,7 @@ module EncodedId\n     def validate_alphabet: (Alphabet) -> Alphabet\n     def validate_salt: (::String) -> ::String\n     def validate_length: (::Integer) -> ::Integer\n+    def validate_max_length: (::Integer | nil) -> (::Integer | nil)\n     def validate_split_at: (::Integer | nil) -> (::Integer | nil)\n     def validate_split_with: (::String, Alphabet) -> ::String\n     def validate_hex_digit_encoding_group_size: (::Integer) -> ::Integer"
        },
        {
            "filename": "test/encoded_id/test_reversible_id.rb",
            "diff": "@@ -75,6 +75,18 @@ def test_it_raises_with_invalid_length\n     end\n   end\n \n+  def test_it_raises_with_invalid_max_length\n+    assert_raises ::EncodedId::InvalidConfigurationError do\n+      ::EncodedId::ReversibleId.new(salt: salt, max_length: -1)\n+    end\n+  end\n+\n+  def test_it_raises_with_invalid_max_length_type\n+    assert_raises ::EncodedId::InvalidConfigurationError do\n+      ::EncodedId::ReversibleId.new(salt: salt, max_length: \"foo\")\n+    end\n+  end\n+\n   def test_it_raises_with_invalid_alphabet\n     assert_raises ::EncodedId::InvalidAlphabetError do\n       ::EncodedId::ReversibleId.new(salt: salt, alphabet: 1234)\n@@ -212,6 +224,19 @@ def test_it_encodes_multiple_ids_with_different_alphabet\n     assert_equal \"d48e-636e-8069-32ab\", coded\n   end\n \n+  def test_it_encodes_multiple_ids_with_custom_max_length\n+    id = [78, 45, 57]\n+    coded = ::EncodedId::ReversibleId.new(salt: salt, max_length: 16).encode(id)\n+    assert_equal \"nmd0-xdf4-8\", coded\n+  end\n+\n+  def test_it_raises_when_encoding_size_exceeds_max_length\n+    id = [78, 45, 57, 78, 45, 57, 78, 45, 57]\n+    assert_raises ::EncodedId::EncodedIdLengthError do\n+      ::EncodedId::ReversibleId.new(salt: salt, max_length: 8).encode(id)\n+    end\n+  end\n+\n   def test_it_decodes_back_to_multiple_ids\n     coded = \"7aq6-0zqw\"\n     id = ::EncodedId::ReversibleId.new(salt: salt).decode(coded)\n@@ -249,6 +274,13 @@ def test_it_raises_when_hash_format_is_broken\n     end\n   end\n \n+  def test_it_raises_when_input_exceeds_max_length_for_decode\n+    coded = \"ogf-w$5^5\"\n+    assert_raises EncodedId::InvalidInputError do\n+      ::EncodedId::ReversibleId.new(salt: salt, max_length: 6).decode(coded)\n+    end\n+  end\n+\n   def test_it_encodes_hexadecimal\n     id = \"f1\"\n     coded = ::EncodedId::ReversibleId.new(salt: salt).encode_hex(id)\n@@ -287,7 +319,7 @@ def test_it_decodes_multiple_hexadecimal_with_different_length\n \n   def test_it_encodes_multiple_hexadecimal_as_uuids\n     id = [\"9a566b8b-8618-42ab-8db7-a5a0276401fd\", \"59f3905a-e704-4714-b42e-960c82b699fe\", \"9c0498f3-639d-41ed-87c3-715c61e14798\"]\n-    coded = ::EncodedId::ReversibleId.new(salt: salt, split_at: 16).encode_hex(id)\n+    coded = ::EncodedId::ReversibleId.new(salt: salt, split_at: 16, max_length: nil).encode_hex(id)\n     assert_equal \"qrrgfpbqcjnm2t6p-zqc83gncbqjgfbne-qcea2msrx6b026d3-s444ruvz35c6m8rs-3ernu4pbburzemur-5g4hjkn9uvn8ktqv-xef89x8tdkeeur3a-gfgqkahjb64h69na\", coded\n   end\n \n@@ -297,6 +329,13 @@ def test_it_decodes_multiple_hexadecimal_as_uuids\n     assert_equal [\"9a566b8b861842ab8db7a5a0276401fd\", \"59f3905ae7044714b42e960c82b699fe\", \"9c0498f3639d41ed87c3715c61e14798\"], id\n   end\n \n+  def test_it_raises_when_input_exceeds_max_length_for_decode_hex\n+    coded = \"qrrgfpbqcjnm2t6p-zqc83gncbqjgfbne-qcea2msrx6b026d3-s444ruvz35c6m8rs-3ernu4pbburzemur-5g4hjkn9uvn8ktqv-xef89x8tdkeeur3a-gfgqkahjb64h69na\"\n+    assert_raises EncodedId::InvalidInputError do\n+      ::EncodedId::ReversibleId.new(salt: salt, max_length: 72).decode(coded)\n+    end\n+  end\n+\n   def test_it_raises_with_invalid_hex_digit_encoding_group_size\n     assert_raises ::EncodedId::InvalidConfigurationError do\n       ::EncodedId::ReversibleId.new(salt: salt, hex_digit_encoding_group_size: 123)\n@@ -320,13 +359,26 @@ def test_it_encodes_hex_with_different_hex_digit_encoding_group_size\n \n   def test_it_encodes_hex_with_different_hex_digit_encoding_group_size_when_long_inputs\n     id = [\"9a566b8b-8618-42ab-8db7-a5a0276401fd\", \"59f3905a-e704-4714-b42e-960c82b699fe\", \"9c0498f3-639d-41ed-87c3-715c61e14798\"]\n-    coded = ::EncodedId::ReversibleId.new(salt: salt).encode_hex(id)\n+    coded = ::EncodedId::ReversibleId.new(salt: salt, max_length: nil).encode_hex(id)\n     assert_equal \"qrrg-fpbq-cjnm-2t6p-zqc8-3gnc-bqjg-fbne-qcea-2msr-x6b0-26d3-s444-ruvz-35c6-m8rs-3ern-u4pb-burz-emur-5g4h-jkn9-uvn8-ktqv-xef8-9x8t-dkee-ur3a-gfgq-kahj-b64h-69na\", coded\n \n-    coded = ::EncodedId::ReversibleId.new(salt: salt, hex_digit_encoding_group_size: 10).encode_hex(id)\n+    coded = ::EncodedId::ReversibleId.new(salt: salt, hex_digit_encoding_group_size: 10, max_length: nil).encode_hex(id)\n     assert_equal \"zezp-vxep-mzc3-4gbj-p63b-hx5d-kqeg-rpug-6tav-2ma3-n5mu-rdjv-4bpx-fbae-p5g5-280n-mqd3-6bqv-sx2h-rknv-rb5z-vhvd-jnbv-ng4t-m5vb-22kk-5hrk-36qg-rrh4-2\", coded\n   end\n \n+  def test_it_encodes_hex_with_custom_max_length\n+    id = [\"1\", \"c0\"]\n+    coded = ::EncodedId::ReversibleId.new(salt: salt, max_length: 32).encode_hex(id)\n+    assert_equal \"d4h2-xerh-rk\", coded\n+  end\n+\n+  def test_it_raises_when_hex_encoding_size_exceeds_max_length\n+    id = [\"9a566b8b-8618-42ab-8db7-a5a0276401fd\", \"59f3905a-e704-4714-b42e-960c82b699fe\", \"9c0498f3-639d-41ed-87c3-715c61e14798\"]\n+    assert_raises ::EncodedId::EncodedIdLengthError do\n+      ::EncodedId::ReversibleId.new(salt: salt, max_length: 8).encode_hex(id)\n+    end\n+  end\n+\n   private\n \n   def salt"
        }
    ],
    "commitTime": "2023-10-12 23:47:14"
}