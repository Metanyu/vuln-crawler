{
    "CVSSv3": {
        "CVSS": "3.1",
        "E": "P",
        "attackVector": "ADJACENT_NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "LOW",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "LOW",
        "integrity": "LOW",
        "availability": "LOW"
    },
    "credit": [
        "junwha0511"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "critical"
        },
        {
            "assigner": "Red Hat",
            "cvssV3BaseScore": 7.3,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "LOW",
                "integrity": "LOW",
                "availability": "LOW"
            },
            "severity": "high"
        }
    ],
    "cvssScore": 5.5,
    "disclosureTime": "2023-12-25 21:52:12",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.24144",
        "probability": "0.00061"
    },
    "exploitMaturity": "Proof of Concept",
    "id": "SNYK-GOLANG-GITHUBCOMMATTNGOSQLITE3-6139875",
    "identifiers": {
        "CVE": [
            "CVE-2023-7104"
        ],
        "CWE": [
            "CWE-122"
        ]
    },
    "language": "golang",
    "malicious": false,
    "packageManager": "golang",
    "publicationTime": "2023-12-26 20:10:25",
    "remediation": "Upgrade github.com/mattn/go-sqlite3 to version 1.14.18 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Heap-based Buffer Overflow",
    "vulnDescription": {
        "Overview": "Affected versions of this package are vulnerable to Heap-based Buffer Overflow via the sessionReadRecord function in the ext/session/sqlite3session.c file. An attacker can cause a program crash or execute arbitrary code by manipulating the input to trigger a heap-based buffer overflow. "
    },
    "source_code": [
        {
            "filename": "sqlite3-binding.h",
            "diff": "@@ -147,9 +147,9 @@ extern \"C\" {\n ** [sqlite3_libversion_number()], [sqlite3_sourceid()],\n ** [sqlite_version()] and [sqlite_source_id()].\n */\n-#define SQLITE_VERSION        \"3.42.0\"\n-#define SQLITE_VERSION_NUMBER 3042000\n-#define SQLITE_SOURCE_ID      \"2023-05-16 12:36:15 831d0fb2836b71c9bc51067c49fee4b8f18047814f2ff22d817d25195cf350b0\"\n+#define SQLITE_VERSION        \"3.44.0\"\n+#define SQLITE_VERSION_NUMBER 3044000\n+#define SQLITE_SOURCE_ID      \"2023-11-01 11:23:50 17129ba1ff7f0daf37100ee82d507aef7827cf38de1866e2633096ae6ad81301\"\n \n /*\n ** CAPI3REF: Run-Time Library Version Numbers\n@@ -529,6 +529,7 @@ SQLITE_API int sqlite3_exec(\n #define SQLITE_IOERR_ROLLBACK_ATOMIC   (SQLITE_IOERR | (31<<8))\n #define SQLITE_IOERR_DATA              (SQLITE_IOERR | (32<<8))\n #define SQLITE_IOERR_CORRUPTFS         (SQLITE_IOERR | (33<<8))\n+#define SQLITE_IOERR_IN_PAGE           (SQLITE_IOERR | (34<<8))\n #define SQLITE_LOCKED_SHAREDCACHE      (SQLITE_LOCKED |  (1<<8))\n #define SQLITE_LOCKED_VTAB             (SQLITE_LOCKED |  (2<<8))\n #define SQLITE_BUSY_RECOVERY           (SQLITE_BUSY   |  (1<<8))\n@@ -1191,7 +1192,7 @@ struct sqlite3_io_methods {\n ** by clients within the current process, only within other processes.\n **\n ** <li>[[SQLITE_FCNTL_CKSM_FILE]]\n-** The [SQLITE_FCNTL_CKSM_FILE] opcode is for use interally by the\n+** The [SQLITE_FCNTL_CKSM_FILE] opcode is for use internally by the\n ** [checksum VFS shim] only.\n **\n ** <li>[[SQLITE_FCNTL_RESET_CACHE]]\n@@ -2127,7 +2128,7 @@ struct sqlite3_mem_methods {\n ** is stored in each sorted record and the required column values loaded\n ** from the database as records are returned in sorted order. The default\n ** value for this option is to never use this optimization. Specifying a\n-** negative value for this option restores the default behaviour.\n+** negative value for this option restores the default behavior.\n ** This option is only available if SQLite is compiled with the\n ** [SQLITE_ENABLE_SORTER_REFERENCES] compile-time option.\n **\n@@ -2302,7 +2303,7 @@ struct sqlite3_mem_methods {\n ** database handle, SQLite checks if this will mean that there are now no\n ** connections at all to the database. If so, it performs a checkpoint\n ** operation before closing the connection. This option may be used to\n-** override this behaviour. The first parameter passed to this operation\n+** override this behavior. The first parameter passed to this operation\n ** is an integer - positive to disable checkpoints-on-close, or zero (the\n ** default) to enable them, and negative to leave the setting unchanged.\n ** The second parameter is a pointer to an integer\n@@ -2455,7 +2456,7 @@ struct sqlite3_mem_methods {\n ** the [VACUUM] command will fail with an obscure error when attempting to\n ** process a table with generated columns and a descending index.  This is\n ** not considered a bug since SQLite versions 3.3.0 and earlier do not support\n-** either generated columns or decending indexes.\n+** either generated columns or descending indexes.\n ** </dd>\n **\n ** [[SQLITE_DBCONFIG_STMT_SCANSTATUS]]\n@@ -2736,6 +2737,7 @@ SQLITE_API sqlite3_int64 sqlite3_total_changes64(sqlite3*);\n **\n ** ^The [sqlite3_is_interrupted(D)] interface can be used to determine whether\n ** or not an interrupt is currently in effect for [database connection] D.\n+** It returns 1 if an interrupt is currently in effect, or 0 otherwise.\n */\n SQLITE_API void sqlite3_interrupt(sqlite3*);\n SQLITE_API int sqlite3_is_interrupted(sqlite3*);\n@@ -3389,8 +3391,10 @@ SQLITE_API SQLITE_DEPRECATED void *sqlite3_profile(sqlite3*,\n ** M argument should be the bitwise OR-ed combination of\n ** zero or more [SQLITE_TRACE] constants.\n **\n-** ^Each call to either sqlite3_trace() or sqlite3_trace_v2() overrides\n-** (cancels) any prior calls to sqlite3_trace() or sqlite3_trace_v2().\n+** ^Each call to either sqlite3_trace(D,X,P) or sqlite3_trace_v2(D,M,X,P)\n+** overrides (cancels) all prior calls to sqlite3_trace(D,X,P) or\n+** sqlite3_trace_v2(D,M,X,P) for the [database connection] D.  Each\n+** database connection may have at most one trace callback.\n **\n ** ^The X callback is invoked whenever any of the events identified by\n ** mask M occur.  ^The integer return value from the callback is currently\n@@ -3759,7 +3763,7 @@ SQLITE_API int sqlite3_open_v2(\n ** as F) must be one of:\n ** <ul>\n ** <li> A database filename pointer created by the SQLite core and\n-** passed into the xOpen() method of a VFS implemention, or\n+** passed into the xOpen() method of a VFS implementation, or\n ** <li> A filename obtained from [sqlite3_db_filename()], or\n ** <li> A new filename constructed using [sqlite3_create_filename()].\n ** </ul>\n@@ -3872,7 +3876,7 @@ SQLITE_API sqlite3_file *sqlite3_database_file_object(const char*);\n /*\n ** CAPI3REF: Create and Destroy VFS Filenames\n **\n-** These interfces are provided for use by [VFS shim] implementations and\n+** These interfaces are provided for use by [VFS shim] implementations and\n ** are not useful outside of that context.\n **\n ** The sqlite3_create_filename(D,J,W,N,P) allocates memory to hold a version of\n@@ -3952,6 +3956,7 @@ SQLITE_API void sqlite3_free_filename(sqlite3_filename);\n **\n ** ^The sqlite3_errmsg() and sqlite3_errmsg16() return English-language\n ** text that describes the error, as either UTF-8 or UTF-16 respectively.\n+** (See how SQLite handles [invalid UTF] for exceptions to this rule.)\n ** ^(Memory to hold the error message string is managed internally.\n ** The application does not need to worry about freeing the result.\n ** However, the error string might be overwritten or deallocated by\n@@ -4419,6 +4424,41 @@ SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);\n */\n SQLITE_API int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt);\n \n+/*\n+** CAPI3REF: Change The EXPLAIN Setting For A Prepared Statement\n+** METHOD: sqlite3_stmt\n+**\n+** The sqlite3_stmt_explain(S,E) interface changes the EXPLAIN\n+** setting for [prepared statement] S.  If E is zero, then S becomes\n+** a normal prepared statement.  If E is 1, then S behaves as if\n+** its SQL text began with \"[EXPLAIN]\".  If E is 2, then S behaves as if\n+** its SQL text began with \"[EXPLAIN QUERY PLAN]\".\n+**\n+** Calling sqlite3_stmt_explain(S,E) might cause S to be reprepared.\n+** SQLite tries to avoid a reprepare, but a reprepare might be necessary\n+** on the first transition into EXPLAIN or EXPLAIN QUERY PLAN mode.\n+**\n+** Because of the potential need to reprepare, a call to\n+** sqlite3_stmt_explain(S,E) will fail with SQLITE_ERROR if S cannot be\n+** reprepared because it was created using [sqlite3_prepare()] instead of\n+** the newer [sqlite3_prepare_v2()] or [sqlite3_prepare_v3()] interfaces and\n+** hence has no saved SQL text with which to reprepare.\n+**\n+** Changing the explain setting for a prepared statement does not change\n+** the original SQL text for the statement.  Hence, if the SQL text originally\n+** began with EXPLAIN or EXPLAIN QUERY PLAN, but sqlite3_stmt_explain(S,0)\n+** is called to convert the statement into an ordinary statement, the EXPLAIN\n+** or EXPLAIN QUERY PLAN keywords will still appear in the sqlite3_sql(S)\n+** output, even though the statement now acts like a normal SQL statement.\n+**\n+** This routine returns SQLITE_OK if the explain mode is successfully\n+** changed, or an error code if the explain mode could not be changed.\n+** The explain mode cannot be changed while a statement is active.\n+** Hence, it is good practice to call [sqlite3_reset(S)]\n+** immediately prior to calling sqlite3_stmt_explain(S,E).\n+*/\n+SQLITE_API int sqlite3_stmt_explain(sqlite3_stmt *pStmt, int eMode);\n+\n /*\n ** CAPI3REF: Determine If A Prepared Statement Has Been Reset\n ** METHOD: sqlite3_stmt\n@@ -4582,7 +4622,7 @@ typedef struct sqlite3_context sqlite3_context;\n ** with it may be passed. ^It is called to dispose of the BLOB or string even\n ** if the call to the bind API fails, except the destructor is not called if\n ** the third parameter is a NULL pointer or the fourth parameter is negative.\n-** ^ (2) The special constant, [SQLITE_STATIC], may be passsed to indicate that\n+** ^ (2) The special constant, [SQLITE_STATIC], may be passed to indicate that\n ** the application remains responsible for disposing of the object. ^In this\n ** case, the object and the provided pointer to it must remain valid until\n ** either the prepared statement is finalized or the same SQL parameter is\n@@ -5261,20 +5301,33 @@ SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);\n ** ^The [sqlite3_reset(S)] interface resets the [prepared statement] S\n ** back to the beginning of its program.\n **\n-** ^If the most recent call to [sqlite3_step(S)] for the\n-** [prepared statement] S returned [SQLITE_ROW] or [SQLITE_DONE],\n-** or if [sqlite3_step(S)] has never before been called on S,\n-** then [sqlite3_reset(S)] returns [SQLITE_OK].\n+** ^The return code from [sqlite3_reset(S)] indicates whether or not\n+** the previous evaluation of prepared statement S completed successfully.\n+** ^If [sqlite3_step(S)] has never before been called on S or if\n+** [sqlite3_step(S)] has not been called since the previous call\n+** to [sqlite3_reset(S)], then [sqlite3_reset(S)] will return\n+** [SQLITE_OK].\n **\n ** ^If the most recent call to [sqlite3_step(S)] for the\n ** [prepared statement] S indicated an error, then\n ** [sqlite3_reset(S)] returns an appropriate [error code].\n+** ^The [sqlite3_reset(S)] interface might also return an [error code]\n+** if there were no prior errors but the process of resetting\n+** the prepared statement caused a new error. ^For example, if an\n+** [INSERT] statement with a [RETURNING] clause is only stepped one time,\n+** that one call to [sqlite3_step(S)] might return SQLITE_ROW but\n+** the overall statement might still fail and the [sqlite3_reset(S)] call\n+** might return SQLITE_BUSY if locking constraints prevent the\n+** database change from committing.  Therefore, it is important that\n+** applications check the return code from [sqlite3_reset(S)] even if\n+** no prior call to [sqlite3_step(S)] indicated a problem.\n **\n ** ^The [sqlite3_reset(S)] interface does not change the values\n ** of any [sqlite3_bind_blob|bindings] on the [prepared statement] S.\n */\n SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt);\n \n+\n /*\n ** CAPI3REF: Create Or Redefine SQL Functions\n ** KEYWORDS: {function creation routines}\n@@ -5485,7 +5538,7 @@ SQLITE_API int sqlite3_create_window_function(\n ** [application-defined SQL function]\n ** that has side-effects or that could potentially leak sensitive information.\n ** This will prevent attacks in which an application is tricked\n-** into using a database file that has had its schema surreptiously\n+** into using a database file that has had its schema surreptitiously\n ** modified to invoke the application-defined function in ways that are\n ** harmful.\n ** <p>\n@@ -5829,32 +5882,32 @@ SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);\n ** METHOD: sqlite3_context\n **\n ** These functions may be used by (non-aggregate) SQL functions to\n-** associate metadata with argument values. If the same value is passed to\n-** multiple invocations of the same SQL function during query execution, under\n-** some circumstances the associated metadata may be preserved.  An example\n-** of where this might be useful is in a regular-expression matching\n-** function. The compiled version of the regular expression can be stored as\n-** metadata associated with the pattern string.\n+** associate auxiliary data with argument values. If the same argument\n+** value is passed to multiple invocations of the same SQL function during\n+** query execution, under some circumstances the associated auxiliary data\n+** might be preserved.  An example of where this might be useful is in a\n+** regular-expression matching function. The compiled version of the regular\n+** expression can be stored as auxiliary data associated with the pattern string.\n ** Then as long as the pattern string remains the same,\n ** the compiled regular expression can be reused on multiple\n ** invocations of the same function.\n **\n-** ^The sqlite3_get_auxdata(C,N) interface returns a pointer to the metadata\n+** ^The sqlite3_get_auxdata(C,N) interface returns a pointer to the auxiliary data\n ** associated by the sqlite3_set_auxdata(C,N,P,X) function with the Nth argument\n ** value to the application-defined function.  ^N is zero for the left-most\n-** function argument.  ^If there is no metadata\n+** function argument.  ^If there is no auxiliary data\n ** associated with the function argument, the sqlite3_get_auxdata(C,N) interface\n ** returns a NULL pointer.\n **\n-** ^The sqlite3_set_auxdata(C,N,P,X) interface saves P as metadata for the N-th\n-** argument of the application-defined function.  ^Subsequent\n+** ^The sqlite3_set_auxdata(C,N,P,X) interface saves P as auxiliary data for the\n+** N-th argument of the application-defined function.  ^Subsequent\n ** calls to sqlite3_get_auxdata(C,N) return P from the most recent\n-** sqlite3_set_auxdata(C,N,P,X) call if the metadata is still valid or\n-** NULL if the metadata has been discarded.\n+** sqlite3_set_auxdata(C,N,P,X) call if the auxiliary data is still valid or\n+** NULL if the auxiliary data has been discarded.\n ** ^After each call to sqlite3_set_auxdata(C,N,P,X) where X is not NULL,\n ** SQLite will invoke the destructor function X with parameter P exactly\n-** once, when the metadata is discarded.\n-** SQLite is free to discard the metadata at any time, including: <ul>\n+** once, when the auxiliary data is discarded.\n+** SQLite is free to discard the auxiliary data at any time, including: <ul>\n ** <li> ^(when the corresponding function parameter changes)^, or\n ** <li> ^(when [sqlite3_reset()] or [sqlite3_finalize()] is called for the\n **      SQL statement)^, or\n@@ -5870,7 +5923,7 @@ SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);\n ** function implementation should not make any use of P after\n ** sqlite3_set_auxdata() has been called.\n **\n-** ^(In practice, metadata is preserved between function calls for\n+** ^(In practice, auxiliary data is preserved between function calls for\n ** function parameters that are compile-time constants, including literal\n ** values and [parameters] and expressions composed from the same.)^\n **\n@@ -5880,10 +5933,67 @@ SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);\n **\n ** These routines must be called from the same thread in which\n ** the SQL function is running.\n+**\n+** See also: [sqlite3_get_clientdata()] and [sqlite3_set_clientdata()].\n */\n SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);\n SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));\n \n+/*\n+** CAPI3REF: Database Connection Client Data\n+** METHOD: sqlite3\n+**\n+** These functions are used to associate one or more named pointers\n+** with a [database connection].\n+** A call to sqlite3_set_clientdata(D,N,P,X) causes the pointer P\n+** to be attached to [database connection] D using name N.  Subsequent\n+** calls to sqlite3_get_clientdata(D,N) will return a copy of pointer P\n+** or a NULL pointer if there were no prior calls to\n+** sqlite3_set_clientdata() with the same values of D and N.\n+** Names are compared using strcmp() and are thus case sensitive.\n+**\n+** If P and X are both non-NULL, then the destructor X is invoked with\n+** argument P on the first of the following occurrences:\n+** <ul>\n+** <li> An out-of-memory error occurs during the call to\n+**      sqlite3_set_clientdata() which attempts to register pointer P.\n+** <li> A subsequent call to sqlite3_set_clientdata(D,N,P,X) is made\n+**      with the same D and N parameters.\n+** <li> The database connection closes.  SQLite does not make any guarantees\n+**      about the order in which destructors are called, only that all\n+**      destructors will be called exactly once at some point during the\n+**      database connection closing process.\n+** </ul>\n+**\n+** SQLite does not do anything with client data other than invoke\n+** destructors on the client data at the appropriate time.  The intended\n+** use for client data is to provide a mechanism for wrapper libraries\n+** to store additional information about an SQLite database connection.\n+**\n+** There is no limit (other than available memory) on the number of different\n+** client data pointers (with different names) that can be attached to a\n+** single database connection.  However, the implementation is optimized\n+** for the case of having only one or two different client data names.\n+** Applications and wrapper libraries are discouraged from using more than\n+** one client data name each.\n+**\n+** There is no way to enumerate the client data pointers\n+** associated with a database connection.  The N parameter can be thought\n+** of as a secret key such that only code that knows the secret key is able\n+** to access the associated data.\n+**\n+** Security Warning:  These interfaces should not be exposed in scripting\n+** languages or in other circumstances where it might be possible for an\n+** an attacker to invoke them.  Any agent that can invoke these interfaces\n+** can probably also take control of the process.\n+**\n+** Database connection client data is only available for SQLite\n+** version 3.44.0 ([dateof:3.44.0]) and later.\n+**\n+** See also: [sqlite3_set_auxdata()] and [sqlite3_get_auxdata()].\n+*/\n+SQLITE_API void *sqlite3_get_clientdata(sqlite3*,const char*);\n+SQLITE_API int sqlite3_set_clientdata(sqlite3*, const char*, void*, void(*)(void*));\n \n /*\n ** CAPI3REF: Constants Defining Special Destructor Behavior\n@@ -6516,7 +6626,7 @@ SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);\n SQLITE_API int sqlite3_txn_state(sqlite3*,const char *zSchema);\n \n /*\n-** CAPI3REF: Allowed return values from [sqlite3_txn_state()]\n+** CAPI3REF: Allowed return values from sqlite3_txn_state()\n ** KEYWORDS: {transaction state}\n **\n ** These constants define the current transaction state of a database file.\n@@ -6648,7 +6758,7 @@ SQLITE_API void *sqlite3_rollback_hook(sqlite3*, void(*)(void *), void*);\n ** ^Each call to the sqlite3_autovacuum_pages() interface overrides all\n ** previous invocations for that database connection.  ^If the callback\n ** argument (C) to sqlite3_autovacuum_pages(D,C,P,X) is a NULL pointer,\n-** then the autovacuum steps callback is cancelled.  The return value\n+** then the autovacuum steps callback is canceled.  The return value\n ** from sqlite3_autovacuum_pages() is normally SQLITE_OK, but might\n ** be some other error code if something goes wrong.  The current\n ** implementation will only return SQLITE_OK or SQLITE_MISUSE, but other\n@@ -7167,6 +7277,10 @@ struct sqlite3_module {\n   /* The methods above are in versions 1 and 2 of the sqlite_module object.\n   ** Those below are for version 3 and greater. */\n   int (*xShadowName)(const char*);\n+  /* The methods above are in versions 1 through 3 of the sqlite_module object.\n+  ** Those below are for version 4 and greater. */\n+  int (*xIntegrity)(sqlite3_vtab *pVTab, const char *zSchema,\n+                    const char *zTabName, int mFlags, char **pzErr);\n };\n \n /*\n@@ -7654,7 +7768,7 @@ SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);\n ** code is returned and the transaction rolled back.\n **\n ** Calling this function with an argument that is not a NULL pointer or an\n-** open blob handle results in undefined behaviour. ^Calling this routine\n+** open blob handle results in undefined behavior. ^Calling this routine\n ** with a null pointer (such as would be returned by a failed call to\n ** [sqlite3_blob_open()]) is a harmless no-op. ^Otherwise, if this function\n ** is passed a valid open blob handle, the values returned by the\n@@ -8134,6 +8248,7 @@ SQLITE_API int sqlite3_test_control(int op, ...);\n #define SQLITE_TESTCTRL_PRNG_SAVE                5\n #define SQLITE_TESTCTRL_PRNG_RESTORE             6\n #define SQLITE_TESTCTRL_PRNG_RESET               7  /* NOT USED */\n+#define SQLITE_TESTCTRL_FK_NO_ACTION             7\n #define SQLITE_TESTCTRL_BITVEC_TEST              8\n #define SQLITE_TESTCTRL_FAULT_INSTALL            9\n #define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10\n@@ -8162,7 +8277,8 @@ SQLITE_API int sqlite3_test_control(int op, ...);\n #define SQLITE_TESTCTRL_TRACEFLAGS              31\n #define SQLITE_TESTCTRL_TUNE                    32\n #define SQLITE_TESTCTRL_LOGEST                  33\n-#define SQLITE_TESTCTRL_LAST                    33  /* Largest TESTCTRL */\n+#define SQLITE_TESTCTRL_USELONGDOUBLE           34\n+#define SQLITE_TESTCTRL_LAST                    34  /* Largest TESTCTRL */\n \n /*\n ** CAPI3REF: SQL Keyword Checking\n@@ -9618,7 +9734,7 @@ SQLITE_API int sqlite3_vtab_config(sqlite3*, int op, ...);\n ** [[SQLITE_VTAB_DIRECTONLY]]<dt>SQLITE_VTAB_DIRECTONLY</dt>\n ** <dd>Calls of the form\n ** [sqlite3_vtab_config](db,SQLITE_VTAB_DIRECTONLY) from within the\n-** the [xConnect] or [xCreate] methods of a [virtual table] implmentation\n+** the [xConnect] or [xCreate] methods of a [virtual table] implementation\n ** prohibits that virtual table from being used from within triggers and\n ** views.\n ** </dd>\n@@ -9808,7 +9924,7 @@ SQLITE_API int sqlite3_vtab_distinct(sqlite3_index_info*);\n ** communicated to the xBestIndex method as a\n ** [SQLITE_INDEX_CONSTRAINT_EQ] constraint.)^  If xBestIndex wants to use\n ** this constraint, it must set the corresponding\n-** aConstraintUsage[].argvIndex to a postive integer.  ^(Then, under\n+** aConstraintUsage[].argvIndex to a positive integer.  ^(Then, under\n ** the usual mode of handling IN operators, SQLite generates [bytecode]\n ** that invokes the [xFilter|xFilter() method] once for each value\n ** on the right-hand side of the IN operator.)^  Thus the virtual table\n@@ -10237,7 +10353,7 @@ SQLITE_API int sqlite3_db_cacheflush(sqlite3*);\n ** When the [sqlite3_blob_write()] API is used to update a blob column,\n ** the pre-update hook is invoked with SQLITE_DELETE. This is because the\n ** in this case the new values are not available. In this case, when a\n-** callback made with op==SQLITE_DELETE is actuall a write using the\n+** callback made with op==SQLITE_DELETE is actually a write using the\n ** sqlite3_blob_write() API, the [sqlite3_preupdate_blobwrite()] returns\n ** the index of the column being written. In other cases, where the\n ** pre-update hook is being invoked for some other reason, including a\n@@ -10498,6 +10614,13 @@ SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_recover(sqlite3 *db, const c\n ** SQLITE_SERIALIZE_NOCOPY bit is set but no contiguous copy\n ** of the database exists.\n **\n+** After the call, if the SQLITE_SERIALIZE_NOCOPY bit had been set,\n+** the returned buffer content will remain accessible and unchanged\n+** until either the next write operation on the connection or when\n+** the connection is closed, and applications must not modify the\n+** buffer. If the bit had been clear, the returned buffer will not\n+** be accessed by SQLite after the call.\n+**\n ** A call to sqlite3_serialize(D,S,P,F) might return NULL even if the\n ** SQLITE_SERIALIZE_NOCOPY bit is omitted from argument F if a memory\n ** allocation error occurs.\n@@ -10546,6 +10669,9 @@ SQLITE_API unsigned char *sqlite3_serialize(\n ** SQLite will try to increase the buffer size using sqlite3_realloc64()\n ** if writes on the database cause it to grow larger than M bytes.\n **\n+** Applications must not modify the buffer P or invalidate it before\n+** the database connection D is closed.\n+**\n ** The sqlite3_deserialize() interface will fail with SQLITE_BUSY if the\n ** database is currently in a read transaction or is involved in a backup\n ** operation.\n@@ -10554,6 +10680,13 @@ SQLITE_API unsigned char *sqlite3_serialize(\n ** S argument to sqlite3_deserialize(D,S,P,N,M,F) is \"temp\" then the\n ** function returns SQLITE_ERROR.\n **\n+** The deserialized database should not be in [WAL mode].  If the database\n+** is in WAL mode, then any attempt to use the database file will result\n+** in an [SQLITE_CANTOPEN] error.  The application can set the\n+** [file format version numbers] (bytes 18 and 19) of the input database P\n+** to 0x01 prior to invoking sqlite3_deserialize(D,S,P,N,M,F) to force the\n+** database file into rollback mode and work around this limitation.\n+**\n ** If sqlite3_deserialize(D,S,P,N,M,F) fails for any reason and if the\n ** SQLITE_DESERIALIZE_FREEONCLOSE bit is set in argument F, then\n ** [sqlite3_free()] is invoked on argument P prior to returning.\n@@ -11626,6 +11759,18 @@ SQLITE_API int sqlite3changeset_concat(\n );\n \n \n+/*\n+** CAPI3REF: Upgrade the Schema of a Changeset/Patchset\n+*/\n+SQLITE_API int sqlite3changeset_upgrade(\n+  sqlite3 *db,\n+  const char *zDb,\n+  int nIn, const void *pIn,       /* Input changeset */\n+  int *pnOut, void **ppOut        /* OUT: Inverse of input */\n+);\n+\n+\n+\n /*\n ** CAPI3REF: Changegroup Handle\n **\n@@ -11672,6 +11817,38 @@ typedef struct sqlite3_changegroup sqlite3_changegroup;\n */\n SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp);\n \n+/*\n+** CAPI3REF: Add a Schema to a Changegroup\n+** METHOD: sqlite3_changegroup_schema\n+**\n+** This method may be used to optionally enforce the rule that the changesets\n+** added to the changegroup handle must match the schema of database zDb\n+** (\"main\", \"temp\", or the name of an attached database). If\n+** sqlite3changegroup_add() is called to add a changeset that is not compatible\n+** with the configured schema, SQLITE_SCHEMA is returned and the changegroup\n+** object is left in an undefined state.\n+**\n+** A changeset schema is considered compatible with the database schema in\n+** the same way as for sqlite3changeset_apply(). Specifically, for each\n+** table in the changeset, there exists a database table with:\n+**\n+** <ul>\n+**   <li> The name identified by the changeset, and\n+**   <li> at least as many columns as recorded in the changeset, and\n+**   <li> the primary key columns in the same position as recorded in\n+**        the changeset.\n+** </ul>\n+**\n+** The output of the changegroup object always has the same schema as the\n+** database nominated using this function. In cases where changesets passed\n+** to sqlite3changegroup_add() have fewer columns than the corresponding table\n+** in the database schema, these are filled in using the default column\n+** values from the database schema. This makes it possible to combined\n+** changesets that have different numbers of columns for a single table\n+** within a changegroup, provided that they are otherwise compatible.\n+*/\n+SQLITE_API int sqlite3changegroup_schema(sqlite3_changegroup*, sqlite3*, const char *zDb);\n+\n /*\n ** CAPI3REF: Add A Changeset To A Changegroup\n ** METHOD: sqlite3_changegroup\n@@ -11740,13 +11917,18 @@ SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp);\n ** If the new changeset contains changes to a table that is already present\n ** in the changegroup, then the number of columns and the position of the\n ** primary key columns for the table must be consistent. If this is not the\n-** case, this function fails with SQLITE_SCHEMA. If the input changeset\n-** appears to be corrupt and the corruption is detected, SQLITE_CORRUPT is\n-** returned. Or, if an out-of-memory condition occurs during processing, this\n-** function returns SQLITE_NOMEM. In all cases, if an error occurs the state\n-** of the final contents of the changegroup is undefined.\n+** case, this function fails with SQLITE_SCHEMA. Except, if the changegroup\n+** object has been configured with a database schema using the\n+** sqlite3changegroup_schema() API, then it is possible to combine changesets\n+** with different numbers of columns for a single table, provided that\n+** they are otherwise compatible.\n **\n-** If no error occurs, SQLITE_OK is returned.\n+** If the input changeset appears to be corrupt and the corruption is\n+** detected, SQLITE_CORRUPT is returned. Or, if an out-of-memory condition\n+** occurs during processing, this function returns SQLITE_NOMEM.\n+**\n+** In all cases, if an error occurs the state of the final contents of the\n+** changegroup is undefined. If no error occurs, SQLITE_OK is returned.\n */\n SQLITE_API int sqlite3changegroup_add(sqlite3_changegroup*, int nData, void *pData);\n \n@@ -12011,10 +12193,17 @@ SQLITE_API int sqlite3changeset_apply_v2(\n **    <li>an insert change if all fields of the conflicting row match\n **        the row being inserted.\n **    </ul>\n+**\n+** <dt>SQLITE_CHANGESETAPPLY_FKNOACTION <dd>\n+**   If this flag it set, then all foreign key constraints in the target\n+**   database behave as if they were declared with \"ON UPDATE NO ACTION ON\n+**   DELETE NO ACTION\", even if they are actually CASCADE, RESTRICT, SET NULL\n+**   or SET DEFAULT.\n */\n #define SQLITE_CHANGESETAPPLY_NOSAVEPOINT   0x0001\n #define SQLITE_CHANGESETAPPLY_INVERT        0x0002\n #define SQLITE_CHANGESETAPPLY_IGNORENOOP    0x0004\n+#define SQLITE_CHANGESETAPPLY_FKNOACTION    0x0008\n \n /*\n ** CAPI3REF: Constants Passed To The Conflict Handler\n@@ -12755,7 +12944,7 @@ struct Fts5PhraseIter {\n **   See xPhraseFirstColumn above.\n */\n struct Fts5ExtensionApi {\n-  int iVersion;                   /* Currently always set to 3 */\n+  int iVersion;                   /* Currently always set to 2 */\n \n   void *(*xUserData)(Fts5Context*);\n \n@@ -12984,8 +13173,8 @@ struct Fts5ExtensionApi {\n **   as separate queries of the FTS index are required for each synonym.\n **\n **   When using methods (2) or (3), it is important that the tokenizer only\n-**   provide synonyms when tokenizing document text (method (2)) or query\n-**   text (method (3)), not both. Doing so will not cause any errors, but is\n+**   provide synonyms when tokenizing document text (method (3)) or query\n+**   text (method (2)), not both. Doing so will not cause any errors, but is\n **   inefficient.\n */\n typedef struct Fts5Tokenizer Fts5Tokenizer;\n@@ -13033,7 +13222,7 @@ struct fts5_api {\n   int (*xCreateTokenizer)(\n     fts5_api *pApi,\n     const char *zName,\n-    void *pContext,\n+    void *pUserData,\n     fts5_tokenizer *pTokenizer,\n     void (*xDestroy)(void*)\n   );\n@@ -13042,15 +13231,15 @@ struct fts5_api {\n   int (*xFindTokenizer)(\n     fts5_api *pApi,\n     const char *zName,\n-    void **ppContext,\n+    void **ppUserData,\n     fts5_tokenizer *pTokenizer\n   );\n \n   /* Create a new auxiliary function */\n   int (*xCreateFunction)(\n     fts5_api *pApi,\n     const char *zName,\n-    void *pContext,\n+    void *pUserData,\n     fts5_extension_function xFunction,\n     void (*xDestroy)(void*)\n   );"
        },
        {
            "filename": "sqlite3ext.h",
            "diff": "@@ -366,6 +366,11 @@ struct sqlite3_api_routines {\n   int (*value_encoding)(sqlite3_value*);\n   /* Version 3.41.0 and later */\n   int (*is_interrupted)(sqlite3*);\n+  /* Version 3.43.0 and later */\n+  int (*stmt_explain)(sqlite3_stmt*,int);\n+  /* Version 3.44.0 and later */\n+  void *(*get_clientdata)(sqlite3*,const char*);\n+  int (*set_clientdata)(sqlite3*, const char*, void*, void(*)(void*));\n };\n \n /*\n@@ -694,6 +699,11 @@ typedef int (*sqlite3_loadext_entry)(\n #define sqlite3_value_encoding         sqlite3_api->value_encoding\n /* Version 3.41.0 and later */\n #define sqlite3_is_interrupted         sqlite3_api->is_interrupted\n+/* Version 3.43.0 and later */\n+#define sqlite3_stmt_explain           sqlite3_api->stmt_explain\n+/* Version 3.44.0 and later */\n+#define sqlite3_get_clientdata         sqlite3_api->get_clientdata\n+#define sqlite3_set_clientdata         sqlite3_api->set_clientdata\n #endif /* !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION) */\n \n #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)"
        }
    ],
    "commitTime": "2023-11-04 14:05:11"
}