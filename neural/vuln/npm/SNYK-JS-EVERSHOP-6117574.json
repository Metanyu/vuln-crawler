{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "HIGH",
        "integrity": "HIGH",
        "availability": "HIGH"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "critical"
        }
    ],
    "cvssScore": 9.8,
    "disclosureTime": "2023-12-08 20:45:56",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.58436",
        "probability": "0.00206"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-JS-EVERSHOP-6117574",
    "identifiers": {
        "CVE": [
            "CVE-2023-46498"
        ],
        "CWE": [
            "CWE-94"
        ]
    },
    "language": "js",
    "malicious": false,
    "packageManager": "npm",
    "publicationTime": "2023-12-12 10:41:22",
    "remediation": "A fix was pushed into the master branch but not yet published. ",
    "severity": "critical",
    "socialTrendAlert": false,
    "title": "Code Injection",
    "vulnDescription": {
        "Overview": "evershop is an A shopping cart platform with Express, React and MySQL Affected versions of this package are vulnerable to Code Injection via the /deleteCustomer/route.json file. Attackers can chain this with another vulnerability found in the GraphQL schema, first by querying the schema to identify the Customer object and get the relevant uuid of a user. Then the attackers are able to send a DELETE request to the unprotected endpoint, resulting in the successful deletion of the user account. "
    },
    "source_code": [
        {
            "filename": "packages/evershop/bin/lib/bootstrap/migrate.js",
            "diff": "@@ -8,26 +8,27 @@ const {\n   rollback\n } = require('@evershop/postgres-query-builder');\n const {\n-  getConnection\n+  getConnection,\n+  pool\n } = require('@evershop/evershop/src/lib/postgres/connection');\n const { existsSync, readdirSync } = require('fs');\n const { error } = require('@evershop/evershop/src/lib/log/debuger');\n const { createMigrationTable } = require('../../install/createMigrationTable');\n \n-async function getCurrentInstalledVersion(module, connection) {\n+async function getCurrentInstalledVersion(module) {\n   /** Check for current installed version */\n   const check = await select()\n     .from('migration')\n     .where('module', '=', module)\n-    .load(connection);\n+    .load(pool);\n   if (!check) {\n     return '0.0.1';\n   } else {\n     return check.version;\n   }\n }\n \n-async function migrateModule(module, connection) {\n+async function migrateModule(module) {\n   /** Check if the module has migration folder, if not ignore it */\n   if (!existsSync(path.resolve(module.path, 'migration'))) {\n     return;\n@@ -42,17 +43,16 @@ async function migrateModule(module, connection) {\n     )\n     .map((dirent) => dirent.name.replace('Version-', '').replace('.js', ''))\n     .sort((first, second) => semver.lt(first, second));\n-  const currentInstalledVersion = await getCurrentInstalledVersion(\n-    module.name,\n-    connection\n-  );\n+\n+  const currentInstalledVersion = await getCurrentInstalledVersion(module.name);\n   // eslint-disable-next-line no-restricted-syntax\n   for (const version of migrations) {\n     /** If the version is lower or equal the installed version, ignore it */\n     if (semver.lte(version, currentInstalledVersion)) {\n       continue;\n     }\n-\n+    const connection = await getConnection();\n+    await startTransaction(connection);\n     // eslint-disable-next-line no-await-in-loop\n     // eslint-disable-next-line global-require\n     /** We expect the migration script to provide a function as a default export */\n@@ -69,7 +69,9 @@ async function migrateModule(module, connection) {\n           version\n         })\n         .execute(connection, false);\n+      await commit(connection);\n     } catch (e) {\n+      await rollback(connection);\n       throw new Error(\n         `Migration failed for module ${module.name}, version ${version}\\n${e}`\n       );\n@@ -78,18 +80,15 @@ async function migrateModule(module, connection) {\n }\n \n module.exports.migrate = async function migrate(modules) {\n-  const connection = await getConnection();\n-  await startTransaction(connection);\n   try {\n+    const connection = await getConnection();\n     // Create a migration table if not exists. This is for the first time installation\n     await createMigrationTable(connection);\n     // eslint-disable-next-line no-restricted-syntax\n     for (const module of modules) {\n-      await migrateModule(module, connection);\n+      await migrateModule(module);\n     }\n-    await commit(connection);\n   } catch (e) {\n-    await rollback(connection);\n     error(e);\n     process.exit(0);\n   }"
        },
        {
            "filename": "packages/evershop/src/components/admin/oms/orderEdit/Shipment.jsx",
            "diff": "@@ -224,7 +224,7 @@ Shipment.propTypes = {\n \n export const layout = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       orderId\n       shippingNote\n       shippingMethod"
        },
        {
            "filename": "packages/evershop/src/lib/webpack/createBaseConfig.js",
            "diff": "@@ -155,18 +155,16 @@ module.exports.createBaseConfig = function createBaseConfig(isServer) {\n   };\n \n   config.optimization = {};\n+\n+  // Check if the flag --skip-minify is set\n+  const skipMinify = process.argv.includes('--skip-minify');\n   if (isProductionMode()) {\n     config.optimization = Object.assign(config.optimization, {\n-      minimize: true,\n+      minimize: !skipMinify,\n       minimizer: [\n         new TerserPlugin({\n           terserOptions: {\n             parse: {\n-              // We want uglify-js to parse ecma 8 code. However, we don't want it\n-              // to apply any minification steps that turns valid ecma 5 code\n-              // into invalid ecma 5 code. This is why the 'compress' and 'output'\n-              // sections only apply transformations that are ecma 5 safe\n-              // https://github.com/facebook/create-react-app/pull/4234\n               ecma: 2020\n             },\n             compress: false,\n@@ -176,8 +174,6 @@ module.exports.createBaseConfig = function createBaseConfig(isServer) {\n             output: {\n               ecma: 5,\n               comments: false,\n-              // Turned on because emoji and regex is not minified properly using\n-              // default. See https://github.com/facebook/create-react-app/issues/2488\n               ascii_only: true\n             }\n           }"
        },
        {
            "filename": "packages/evershop/src/modules/auth/graphql/types/AdminUser/AdminUser.admin.resolvers.js",
            "diff": "@@ -3,22 +3,15 @@ const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n \n module.exports = {\n   Query: {\n-    adminUser: async (root, { id }, { pool, user }) => {\n-      if (!user) {\n-        return null;\n-      }\n+    adminUser: async (root, { id }, { pool }) => {\n       const query = select().from('admin_user');\n       query.where('admin_user_id', '=', id);\n \n       const adminUser = await query.load(pool);\n       return adminUser ? camelCase(adminUser) : null;\n     },\n     currentAdminUser: (root, args, { user }) => (user ? camelCase(user) : null),\n-    adminUsers: async (_, { filters = [] }, { pool, user }) => {\n-      // This field is for admin only\n-      if (!user) {\n-        return [];\n-      }\n+    adminUsers: async (_, { filters = [] }, { pool }) => {\n       const query = select().from('admin_user');\n       const currentFilters = [];\n "
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Attribute/Attribute.admin.graphql",
            "diff": "@@ -0,0 +1,42 @@\n+\"\"\"\n+Represents a single attribute group\n+\"\"\"\n+type AttributeGroup {\n+  attributeGroupId: ID!\n+  uuid: String!\n+  groupName: String!\n+  updateApi: String!\n+  attributes: [Attribute]\n+}\n+\n+extend type Attribute {\n+  groups: [AttributeGroup]\n+  editUrl: String!\n+  updateApi: String!\n+  deleteApi: String!\n+}\n+\n+\"\"\"\n+Represents a collection of attributes\n+\"\"\"\n+type AttributeCollection {\n+  items: [Attribute]\n+  currentPage: Int!\n+  total: Int!\n+  currentFilters: [Filter]\n+}\n+\n+\"\"\"\n+Represents a collection of attribute groups\n+\"\"\"\n+type AttributeGroupCollection {\n+  items: [AttributeGroup]\n+  currentPage: Int!\n+  total: Int!\n+  currentFilters: [Filter]\n+}\n+\n+extend type Query {\n+  attributes(filters: [FilterInput]): AttributeCollection\n+  attributeGroups(filters: [FilterInput]): AttributeGroupCollection\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Attribute/Attribute.admin.resolvers.js",
            "diff": "@@ -0,0 +1,296 @@\n+/* eslint-disable no-param-reassign */\n+const { select } = require('@evershop/postgres-query-builder');\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n+\n+module.exports = {\n+  Query: {\n+    attributes: async (_, { filters: requestedFilters = [] }, { pool }) => {\n+      const query = select().from('attribute');\n+\n+      const currentFilters = [];\n+\n+      const filters = requestedFilters.map((filter) => {\n+        if (filter.operation.toUpperCase() === 'LIKE') {\n+          filter.valueRaw = filter.value.replace(/^%/, '').replace(/%$/, '');\n+        } else {\n+          filter.valueRaw = filter.value;\n+        }\n+        if (filter.operation.toUpperCase() === 'IN') {\n+          filter.value = filter.value.split(',');\n+        }\n+        return filter;\n+      });\n+\n+      // Name filter\n+      const nameFilter = filters.find((f) => f.key === 'name');\n+      if (nameFilter) {\n+        query.andWhere(\n+          'attribute.attribute_name',\n+          'LIKE',\n+          `%${nameFilter.value}%`\n+        );\n+        currentFilters.push({\n+          key: 'name',\n+          operation: '=',\n+          value: nameFilter.value\n+        });\n+      }\n+\n+      // Code filter\n+      const codeFilter = filters.find((f) => f.key === 'code');\n+      if (codeFilter) {\n+        query.andWhere(\n+          'attribute.attribute_code',\n+          codeFilter.operation,\n+          codeFilter.value\n+        );\n+        currentFilters.push({\n+          key: 'code',\n+          operation: codeFilter.operation,\n+          value: codeFilter.valueRaw\n+        });\n+      }\n+\n+      // Attribute group filter\n+      const groupFilter = filters.find((f) => f.key === 'group');\n+      if (groupFilter) {\n+        const attributes = await select()\n+          .from('attribute_group_link')\n+          .where('group_id', groupFilter.operation, groupFilter.value)\n+          .execute(pool);\n+\n+        query.andWhere(\n+          'attribute.attribute_id',\n+          'IN',\n+          attributes.map((a) => a.attribute_id)\n+        );\n+        currentFilters.push({\n+          key: 'group',\n+          operation: groupFilter.operation,\n+          value: groupFilter.valueRaw\n+        });\n+      }\n+\n+      // Type filter\n+      const typeFilter = filters.find((f) => f.key === 'type');\n+      if (typeFilter) {\n+        query.andWhere(\n+          'attribute.type',\n+          typeFilter.operation,\n+          typeFilter.value\n+        );\n+        currentFilters.push({\n+          key: 'type',\n+          operation: typeFilter.operation,\n+          value: typeFilter.valueRaw\n+        });\n+      }\n+\n+      // isRequired filter\n+      const isRequiredFilter = filters.find((f) => f.key === 'isRequired');\n+      if (isRequiredFilter) {\n+        query.andWhere(\n+          'attribute.is_required',\n+          isRequiredFilter.operation,\n+          isRequiredFilter.value\n+        );\n+        currentFilters.push({\n+          key: 'isRequired',\n+          operation: isRequiredFilter.operation,\n+          value: isRequiredFilter.valueRaw\n+        });\n+      }\n+\n+      // isFilterable filter\n+      const isFilterableFilter = filters.find((f) => f.key === 'isFilterable');\n+      if (isFilterableFilter) {\n+        query.andWhere(\n+          'attribute.is_filterable',\n+          isFilterableFilter.operation,\n+          isFilterableFilter.value\n+        );\n+        currentFilters.push({\n+          key: 'isFilterable',\n+          operation: isFilterableFilter.operation,\n+          value: isFilterableFilter.valueRaw\n+        });\n+      }\n+\n+      const sortBy = filters.find((f) => f.key === 'sortBy');\n+      const sortOrder = filters.find(\n+        (f) => f.key === 'sortOrder' && ['ASC', 'DESC'].includes(f.value)\n+      ) || { value: 'ASC' };\n+      if (sortBy && sortBy.value === 'name') {\n+        query.orderBy('attribute.attribute_name', sortOrder.value);\n+        currentFilters.push({\n+          key: 'sortBy',\n+          operation: '=',\n+          value: sortBy.value\n+        });\n+      } else {\n+        query.orderBy('attribute.attribute_id', 'DESC');\n+      }\n+      if (sortOrder.key) {\n+        currentFilters.push({\n+          key: 'sortOrder',\n+          operation: '=',\n+          value: sortOrder.value\n+        });\n+      }\n+      // Clone the main query for getting total right before doing the paging\n+      const cloneQuery = query.clone();\n+      cloneQuery.select('COUNT(*)', 'total');\n+      cloneQuery.removeOrderBy();\n+      // Paging\n+      const page = filters.find((f) => f.key === 'page') || { value: 1 };\n+      const limit = filters.find((f) => f.key === 'limit') || { value: 20 }; // TODO: Get from config\n+      currentFilters.push({\n+        key: 'page',\n+        operation: '=',\n+        value: page.value\n+      });\n+      currentFilters.push({\n+        key: 'limit',\n+        operation: '=',\n+        value: limit.value\n+      });\n+      query.limit(\n+        (page.value - 1) * parseInt(limit.value, 10),\n+        parseInt(limit.value, 10)\n+      );\n+      return {\n+        items: (await query.execute(pool)).map((row) => camelCase(row)),\n+        total: (await cloneQuery.load(pool)).total,\n+        currentFilters\n+      };\n+    },\n+    attributeGroups: async (\n+      _,\n+      { filters: requestedFilters = [] },\n+      { pool }\n+    ) => {\n+      const query = select().from('attribute_group');\n+\n+      const currentFilters = [];\n+\n+      const filters = requestedFilters.map((filter) => {\n+        if (filter.operation.toUpperCase() === 'LIKE') {\n+          filter.valueRaw = filter.value.replace(/^%/, '').replace(/%$/, '');\n+        } else {\n+          filter.valueRaw = filter.value;\n+        }\n+        if (filter.operation.toUpperCase() === 'IN') {\n+          filter.value = filter.value.split(',');\n+        }\n+        return filter;\n+      });\n+\n+      // Name filter\n+      const nameFilter = filters.find((f) => f.key === 'name');\n+      if (nameFilter) {\n+        query.andWhere(\n+          'attribute_group.group_name',\n+          'LIKE',\n+          `%${nameFilter.value}%`\n+        );\n+        currentFilters.push({\n+          key: 'name',\n+          operation: '=',\n+          value: nameFilter.value\n+        });\n+      }\n+\n+      const sortBy = filters.find((f) => f.key === 'sortBy');\n+      const sortOrder = filters.find(\n+        (f) => f.key === 'sortOrder' && ['ASC', 'DESC'].includes(f.value)\n+      ) || { value: 'ASC' };\n+      if (sortBy && sortBy.value === 'name') {\n+        query.orderBy('attribute_group.group_name', sortOrder.value);\n+        currentFilters.push({\n+          key: 'sortBy',\n+          operation: '=',\n+          value: sortBy.value\n+        });\n+      } else {\n+        query.orderBy('attribute_group.attribute_group_id', 'DESC');\n+      }\n+      if (sortOrder.key) {\n+        currentFilters.push({\n+          key: 'sortOrder',\n+          operation: '=',\n+          value: sortOrder.value\n+        });\n+      }\n+      // Clone the main query for getting total right before doing the paging\n+      const cloneQuery = query.clone();\n+      cloneQuery.select('COUNT(*)', 'total');\n+      cloneQuery.removeOrderBy();\n+      // Paging\n+      const page = filters.find((f) => f.key === 'page') || { value: 1 };\n+      const limit = filters.find((f) => f.key === 'limit') || { value: 20 }; // TODO: Get from config\n+      currentFilters.push({\n+        key: 'page',\n+        operation: '=',\n+        value: page.value\n+      });\n+      currentFilters.push({\n+        key: 'limit',\n+        operation: '=',\n+        value: limit.value\n+      });\n+      query.limit(\n+        (page.value - 1) * parseInt(limit.value, 10),\n+        parseInt(limit.value, 10)\n+      );\n+      return {\n+        items: (await query.execute(pool)).map((row) => camelCase(row)),\n+        total: (await cloneQuery.load(pool)).total,\n+        currentFilters\n+      };\n+    }\n+  },\n+  AttributeGroup: {\n+    attributes: async (group, _, { pool }) => {\n+      const rows = await select()\n+        .from('attribute')\n+        .where(\n+          'attribute_id',\n+          'IN',\n+          (\n+            await select('attribute_id')\n+              .from('attribute_group_link')\n+              .where('group_id', '=', group.attributeGroupId)\n+              .execute(pool)\n+          ).map((a) => a.attribute_id)\n+        )\n+        .execute(pool);\n+      return rows.map((row) => camelCase(row));\n+    },\n+    updateApi: (group) => buildUrl('updateAttributeGroup', { id: group.uuid })\n+  },\n+\n+  Attribute: {\n+    groups: async (attribute, _, { pool }) => {\n+      const results = await select()\n+        .from('attribute_group')\n+        .where(\n+          'attribute_group_id',\n+          'IN',\n+          (\n+            await select('group_id')\n+              .from('attribute_group_link')\n+              .where('attribute_id', '=', attribute.attributeId)\n+              .execute(pool)\n+          ).map((g) => g.group_id)\n+        )\n+        .execute(pool);\n+      return results.map((result) => camelCase(result));\n+    },\n+    editUrl: ({ uuid }) => buildUrl('attributeEdit', { id: uuid }),\n+    updateApi: (attribute) =>\n+      buildUrl('updateAttribute', { id: attribute.uuid }),\n+    deleteApi: (attribute) =>\n+      buildUrl('deleteAttribute', { id: attribute.uuid })\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Attribute/Attribute.graphql",
            "diff": "@@ -1,14 +1,3 @@\n-\"\"\"\n-Represents a single attribute group\n-\"\"\"\n-type AttributeGroup {\n-  attributeGroupId: ID!\n-  uuid: String!\n-  groupName: String!\n-  updateApi: String!\n-  attributes: [Attribute]\n-}\n-\n \"\"\"\n Represents a single attribute option\n \"\"\"\n@@ -32,34 +21,8 @@ type Attribute {\n   sortOrder: Int!\n   isFilterable: Int!\n   options: [AttributeOption]\n-  groups: [AttributeGroup]\n-  editUrl: String!\n-  updateApi: String!\n-  deleteApi: String!\n-}\n-\n-\"\"\"\n-Represents a collection of attributes\n-\"\"\"\n-type AttributeCollection {\n-  items: [Attribute]\n-  currentPage: Int!\n-  total: Int!\n-  currentFilters: [Filter]\n-}\n-\n-\"\"\"\n-Represents a collection of attribute groups\n-\"\"\"\n-type AttributeGroupCollection {\n-  items: [AttributeGroup]\n-  currentPage: Int!\n-  total: Int!\n-  currentFilters: [Filter]\n }\n \n extend type Query {\n   attribute(id: Int): Attribute\n-  attributes(filters: [FilterInput]): AttributeCollection\n-  attributeGroups(filters: [FilterInput]): AttributeGroupCollection\n }"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Attribute/Attribute.resolvers.js",
            "diff": "@@ -1,6 +1,5 @@\n /* eslint-disable no-param-reassign */\n const { select } = require('@evershop/postgres-query-builder');\n-const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n \n module.exports = {\n@@ -15,300 +14,15 @@ module.exports = {\n       } else {\n         return camelCase(attribute);\n       }\n-    },\n-    attributes: async (_, { filters: requestedFilters = [] }, { pool }) => {\n-      const query = select().from('attribute');\n-\n-      const currentFilters = [];\n-\n-      const filters = requestedFilters.map((filter) => {\n-        if (filter.operation.toUpperCase() === 'LIKE') {\n-          filter.valueRaw = filter.value.replace(/^%/, '').replace(/%$/, '');\n-        } else {\n-          filter.valueRaw = filter.value;\n-        }\n-        if (filter.operation.toUpperCase() === 'IN') {\n-          filter.value = filter.value.split(',');\n-        }\n-        return filter;\n-      });\n-\n-      // Name filter\n-      const nameFilter = filters.find((f) => f.key === 'name');\n-      if (nameFilter) {\n-        query.andWhere(\n-          'attribute.attribute_name',\n-          'LIKE',\n-          `%${nameFilter.value}%`\n-        );\n-        currentFilters.push({\n-          key: 'name',\n-          operation: '=',\n-          value: nameFilter.value\n-        });\n-      }\n-\n-      // Code filter\n-      const codeFilter = filters.find((f) => f.key === 'code');\n-      if (codeFilter) {\n-        query.andWhere(\n-          'attribute.attribute_code',\n-          codeFilter.operation,\n-          codeFilter.value\n-        );\n-        currentFilters.push({\n-          key: 'code',\n-          operation: codeFilter.operation,\n-          value: codeFilter.valueRaw\n-        });\n-      }\n-\n-      // Attribute group filter\n-      const groupFilter = filters.find((f) => f.key === 'group');\n-      if (groupFilter) {\n-        const attributes = await select()\n-          .from('attribute_group_link')\n-          .where('group_id', groupFilter.operation, groupFilter.value)\n-          .execute(pool);\n-\n-        query.andWhere(\n-          'attribute.attribute_id',\n-          'IN',\n-          attributes.map((a) => a.attribute_id)\n-        );\n-        currentFilters.push({\n-          key: 'group',\n-          operation: groupFilter.operation,\n-          value: groupFilter.valueRaw\n-        });\n-      }\n-\n-      // Type filter\n-      const typeFilter = filters.find((f) => f.key === 'type');\n-      if (typeFilter) {\n-        query.andWhere(\n-          'attribute.type',\n-          typeFilter.operation,\n-          typeFilter.value\n-        );\n-        currentFilters.push({\n-          key: 'type',\n-          operation: typeFilter.operation,\n-          value: typeFilter.valueRaw\n-        });\n-      }\n-\n-      // isRequired filter\n-      const isRequiredFilter = filters.find((f) => f.key === 'isRequired');\n-      if (isRequiredFilter) {\n-        query.andWhere(\n-          'attribute.is_required',\n-          isRequiredFilter.operation,\n-          isRequiredFilter.value\n-        );\n-        currentFilters.push({\n-          key: 'isRequired',\n-          operation: isRequiredFilter.operation,\n-          value: isRequiredFilter.valueRaw\n-        });\n-      }\n-\n-      // isFilterable filter\n-      const isFilterableFilter = filters.find((f) => f.key === 'isFilterable');\n-      if (isFilterableFilter) {\n-        query.andWhere(\n-          'attribute.is_filterable',\n-          isFilterableFilter.operation,\n-          isFilterableFilter.value\n-        );\n-        currentFilters.push({\n-          key: 'isFilterable',\n-          operation: isFilterableFilter.operation,\n-          value: isFilterableFilter.valueRaw\n-        });\n-      }\n-\n-      const sortBy = filters.find((f) => f.key === 'sortBy');\n-      const sortOrder = filters.find(\n-        (f) => f.key === 'sortOrder' && ['ASC', 'DESC'].includes(f.value)\n-      ) || { value: 'ASC' };\n-      if (sortBy && sortBy.value === 'name') {\n-        query.orderBy('attribute.attribute_name', sortOrder.value);\n-        currentFilters.push({\n-          key: 'sortBy',\n-          operation: '=',\n-          value: sortBy.value\n-        });\n-      } else {\n-        query.orderBy('attribute.attribute_id', 'DESC');\n-      }\n-      if (sortOrder.key) {\n-        currentFilters.push({\n-          key: 'sortOrder',\n-          operation: '=',\n-          value: sortOrder.value\n-        });\n-      }\n-      // Clone the main query for getting total right before doing the paging\n-      const cloneQuery = query.clone();\n-      cloneQuery.select('COUNT(*)', 'total');\n-      cloneQuery.removeOrderBy();\n-      // Paging\n-      const page = filters.find((f) => f.key === 'page') || { value: 1 };\n-      const limit = filters.find((f) => f.key === 'limit') || { value: 20 }; // TODO: Get from config\n-      currentFilters.push({\n-        key: 'page',\n-        operation: '=',\n-        value: page.value\n-      });\n-      currentFilters.push({\n-        key: 'limit',\n-        operation: '=',\n-        value: limit.value\n-      });\n-      query.limit(\n-        (page.value - 1) * parseInt(limit.value, 10),\n-        parseInt(limit.value, 10)\n-      );\n-      return {\n-        items: (await query.execute(pool)).map((row) => camelCase(row)),\n-        total: (await cloneQuery.load(pool)).total,\n-        currentFilters\n-      };\n-    },\n-    attributeGroups: async (\n-      _,\n-      { filters: requestedFilters = [] },\n-      { pool }\n-    ) => {\n-      const query = select().from('attribute_group');\n-\n-      const currentFilters = [];\n-\n-      const filters = requestedFilters.map((filter) => {\n-        if (filter.operation.toUpperCase() === 'LIKE') {\n-          filter.valueRaw = filter.value.replace(/^%/, '').replace(/%$/, '');\n-        } else {\n-          filter.valueRaw = filter.value;\n-        }\n-        if (filter.operation.toUpperCase() === 'IN') {\n-          filter.value = filter.value.split(',');\n-        }\n-        return filter;\n-      });\n-\n-      // Name filter\n-      const nameFilter = filters.find((f) => f.key === 'name');\n-      if (nameFilter) {\n-        query.andWhere(\n-          'attribute_group.group_name',\n-          'LIKE',\n-          `%${nameFilter.value}%`\n-        );\n-        currentFilters.push({\n-          key: 'name',\n-          operation: '=',\n-          value: nameFilter.value\n-        });\n-      }\n-\n-      const sortBy = filters.find((f) => f.key === 'sortBy');\n-      const sortOrder = filters.find(\n-        (f) => f.key === 'sortOrder' && ['ASC', 'DESC'].includes(f.value)\n-      ) || { value: 'ASC' };\n-      if (sortBy && sortBy.value === 'name') {\n-        query.orderBy('attribute_group.group_name', sortOrder.value);\n-        currentFilters.push({\n-          key: 'sortBy',\n-          operation: '=',\n-          value: sortBy.value\n-        });\n-      } else {\n-        query.orderBy('attribute_group.attribute_group_id', 'DESC');\n-      }\n-      if (sortOrder.key) {\n-        currentFilters.push({\n-          key: 'sortOrder',\n-          operation: '=',\n-          value: sortOrder.value\n-        });\n-      }\n-      // Clone the main query for getting total right before doing the paging\n-      const cloneQuery = query.clone();\n-      cloneQuery.select('COUNT(*)', 'total');\n-      cloneQuery.removeOrderBy();\n-      // Paging\n-      const page = filters.find((f) => f.key === 'page') || { value: 1 };\n-      const limit = filters.find((f) => f.key === 'limit') || { value: 20 }; // TODO: Get from config\n-      currentFilters.push({\n-        key: 'page',\n-        operation: '=',\n-        value: page.value\n-      });\n-      currentFilters.push({\n-        key: 'limit',\n-        operation: '=',\n-        value: limit.value\n-      });\n-      query.limit(\n-        (page.value - 1) * parseInt(limit.value, 10),\n-        parseInt(limit.value, 10)\n-      );\n-      return {\n-        items: (await query.execute(pool)).map((row) => camelCase(row)),\n-        total: (await cloneQuery.load(pool)).total,\n-        currentFilters\n-      };\n     }\n   },\n-  AttributeGroup: {\n-    attributes: async (group, _, { pool }) => {\n-      const rows = await select()\n-        .from('attribute')\n-        .where(\n-          'attribute_id',\n-          'IN',\n-          (\n-            await select('attribute_id')\n-              .from('attribute_group_link')\n-              .where('group_id', '=', group.attributeGroupId)\n-              .execute(pool)\n-          ).map((a) => a.attribute_id)\n-        )\n-        .execute(pool);\n-      return rows.map((row) => camelCase(row));\n-    },\n-    updateApi: (group) => buildUrl('updateAttributeGroup', { id: group.uuid })\n-  },\n-\n   Attribute: {\n-    groups: async (attribute, _, { pool }) => {\n-      const results = await select()\n-        .from('attribute_group')\n-        .where(\n-          'attribute_group_id',\n-          'IN',\n-          (\n-            await select('group_id')\n-              .from('attribute_group_link')\n-              .where('attribute_id', '=', attribute.attributeId)\n-              .execute(pool)\n-          ).map((g) => g.group_id)\n-        )\n-        .execute(pool);\n-      return results.map((result) => camelCase(result));\n-    },\n     options: async (attribute, _, { pool }) => {\n       const results = await select()\n         .from('attribute_option')\n         .where('attribute_id', '=', attribute.attributeId)\n         .execute(pool);\n       return results.map((result) => camelCase(result));\n-    },\n-    editUrl: ({ uuid }) => buildUrl('attributeEdit', { id: uuid }),\n-    updateApi: (attribute) =>\n-      buildUrl('updateAttribute', { id: attribute.uuid }),\n-    deleteApi: (attribute) =>\n-      buildUrl('deleteAttribute', { id: attribute.uuid })\n+    }\n   }\n };"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Category/Category.admin.graphql",
            "diff": "@@ -0,0 +1,10 @@\n+extend type Category {\n+  editUrl: String\n+  updateApi: String!\n+  deleteApi: String!\n+  addProductUrl: String\n+}\n+\n+extend type Product {\n+  removeFromCategoryUrl: String\n+}\n\\ No newline at end of file"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Category/Category.admin.resolvers.js",
            "diff": "@@ -0,0 +1,28 @@\n+const { select } = require('@evershop/postgres-query-builder');\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+\n+module.exports = {\n+  Category: {\n+    editUrl: (category) => buildUrl('categoryEdit', { id: category.uuid }),\n+    updateApi: (category) => buildUrl('updateCategory', { id: category.uuid }),\n+    deleteApi: (category) => buildUrl('deleteCategory', { id: category.uuid }),\n+    addProductUrl: (category) =>\n+      buildUrl('addProductToCategory', { category_id: category.uuid })\n+  },\n+  Product: {\n+    removeFromCategoryUrl: async (product, _, { pool }) => {\n+      if (!product.categoryId) {\n+        return null;\n+      } else {\n+        const category = await select()\n+          .from('category')\n+          .where('category_id', '=', product.categoryId)\n+          .load(pool);\n+        return buildUrl('removeProductFromCategory', {\n+          category_id: category.uuid,\n+          product_id: product.uuid\n+        });\n+      }\n+    }\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Category/Category.graphql",
            "diff": "@@ -18,12 +18,8 @@ type Category {\n   parent: Category\n   path: [Category]\n   url: String\n-  editUrl: String\n-  updateApi: String!\n-  deleteApi: String!\n   availableAttributes: [FilterAttribute]\n   priceRange: PriceRange\n-  addProductUrl: String\n }\n \n \"\"\"\n@@ -86,8 +82,7 @@ type PriceRange {\n }\n \n extend type Product {\n-  collections: [Collection],\n-  removeFromCategoryUrl: String\n+  category: Category,\n }\n \n extend type Query {"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Category/Category.resolvers.js",
            "diff": "@@ -76,11 +76,6 @@ module.exports = {\n         return urlRewrite.request_path;\n       }\n     },\n-    editUrl: (category) => buildUrl('categoryEdit', { id: category.uuid }),\n-    updateApi: (category) => buildUrl('updateCategory', { id: category.uuid }),\n-    deleteApi: (category) => buildUrl('deleteCategory', { id: category.uuid }),\n-    addProductUrl: (category) =>\n-      buildUrl('addProductToCategory', { category_id: category.uuid }),\n     image: (category) => {\n       const { image } = category;\n       if (!image) {\n@@ -153,18 +148,14 @@ module.exports = {\n     }\n   },\n   Product: {\n-    removeFromCategoryUrl: async (product, _, { pool }) => {\n+    category: async (product, _, { pool }) => {\n       if (!product.categoryId) {\n         return null;\n       } else {\n-        const category = await select()\n-          .from('category')\n-          .where('category_id', '=', product.categoryId)\n-          .load(pool);\n-        return buildUrl('removeProductFromCategory', {\n-          category_id: category.uuid,\n-          product_id: product.uuid\n-        });\n+        const categoryQuery = getCategoriesBaseQuery();\n+        categoryQuery.where('category_id', '=', product.categoryId);\n+        const category = await categoryQuery.load(pool);\n+        return camelCase(category);\n       }\n     }\n   }"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Collection/Collection.admin.graphql",
            "diff": "@@ -0,0 +1,10 @@\n+extend type Collection {\n+  editUrl: String\n+  addProductUrl: String\n+  updateApi: String!\n+  deleteApi: String!\n+}\n+\n+extend type Product {\n+  removeFromCollectionUrl: String\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Collection/Collection.admin.resolvers.js",
            "diff": "@@ -0,0 +1,31 @@\n+const { select } = require('@evershop/postgres-query-builder');\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+\n+module.exports = {\n+  Collection: {\n+    editUrl: (collection) =>\n+      buildUrl('collectionEdit', { id: collection.uuid }),\n+    addProductUrl: (collection) =>\n+      buildUrl('addProductToCollection', { collection_id: collection.uuid }),\n+    updateApi: (collection) =>\n+      buildUrl('updateCollection', { id: collection.uuid }),\n+    deleteApi: (collection) =>\n+      buildUrl('deleteCollection', { id: collection.uuid })\n+  },\n+  Product: {\n+    removeFromCollectionUrl: async (product, _, { pool }) => {\n+      if (!product.collectionId) {\n+        return null;\n+      } else {\n+        const collection = await select()\n+          .from('collection')\n+          .where('collection_id', '=', product.collectionId)\n+          .load(pool);\n+        return buildUrl('removeProductFromCollection', {\n+          collection_id: collection.uuid,\n+          product_id: product.uuid\n+        });\n+      }\n+    }\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Collection/Collection.graphql",
            "diff": "@@ -1,5 +1,5 @@\n \"\"\"\n-The `Collection` type represents a category object.\n+The `Collection` type represents a product collection.\n \"\"\"\n type Collection {\n   collectionId: ID!\n@@ -8,14 +8,10 @@ type Collection {\n   description: String\n   code: String!\n   products(filters: [FilterInput]): ProductCollection\n-  editUrl: String\n-  addProductUrl: String\n-  updateApi: String!\n-  deleteApi: String!\n }\n \n \"\"\"\n-Returns a collection of categories.\n+Returns a collection of product collection.\n \"\"\"\n type CollectionCollection {\n   items: [Collection]\n@@ -26,7 +22,6 @@ type CollectionCollection {\n \n extend type Product {\n   collections: [Collection],\n-  removeFromCollectionUrl: String\n }\n \n extend type Query {"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Collection/Collection.resolvers.js",
            "diff": "@@ -1,5 +1,4 @@\n const { select } = require('@evershop/postgres-query-builder');\n-const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n const { ProductCollection } = require('../../../services/ProductCollection');\n const {\n@@ -33,15 +32,7 @@ module.exports = {\n       const root = new ProductCollection(query);\n       await root.init(collection, { filters }, { user });\n       return root;\n-    },\n-    editUrl: (collection) =>\n-      buildUrl('collectionEdit', { id: collection.uuid }),\n-    addProductUrl: (collection) =>\n-      buildUrl('addProductToCollection', { collection_id: collection.uuid }),\n-    updateApi: (collection) =>\n-      buildUrl('updateCollection', { id: collection.uuid }),\n-    deleteApi: (collection) =>\n-      buildUrl('deleteCollection', { id: collection.uuid })\n+    }\n   },\n   Product: {\n     collections: async (product, _, { pool }) => {\n@@ -55,20 +46,6 @@ module.exports = {\n         );\n       query.where('product_id', '=', product.productId);\n       return (await query.execute(pool)).map((row) => camelCase(row));\n-    },\n-    removeFromCollectionUrl: async (product, _, { pool }) => {\n-      if (!product.collectionId) {\n-        return null;\n-      } else {\n-        const collection = await select()\n-          .from('collection')\n-          .where('collection_id', '=', product.collectionId)\n-          .load(pool);\n-        return buildUrl('removeProductFromCollection', {\n-          collection_id: collection.uuid,\n-          product_id: product.uuid\n-        });\n-      }\n     }\n   }\n };"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Product/Inventory/Inventory.admin.graphql",
            "diff": "@@ -0,0 +1,3 @@\n+extend type Inventory {\n+  qty: Int!\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Product/Inventory/Inventory.admin.resolvers.js",
            "diff": "@@ -0,0 +1,5 @@\n+module.exports = {\n+  Inventory: {\n+    qty: (inventory) => inventory.qty || 0\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Product/Inventory/Inventory.graphql",
            "diff": "@@ -2,7 +2,6 @@\n The `Inventory` type represents a product's inventory information.\n \"\"\"\n type Inventory {\n-  qty: Int!\n   isInStock: Boolean!\n   stockAvailability: Int!\n   manageStock: Int!"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Product/Product.admin.graphql",
            "diff": "@@ -0,0 +1,5 @@\n+extend type Product {\n+  editUrl: String\n+  updateApi: String!\n+  deleteApi: String!\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Product/Product.admin.resolvers.js",
            "diff": "@@ -0,0 +1,9 @@\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+\n+module.exports = {\n+  Product: {\n+    editUrl: (product) => buildUrl('productEdit', { id: product.uuid }),\n+    updateApi: (product) => buildUrl('updateProduct', { id: product.uuid }),\n+    deleteApi: (product) => buildUrl('deleteProduct', { id: product.uuid })\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Product/Product.graphql",
            "diff": "@@ -1,5 +1,5 @@\n \"\"\"\n-Look up for a Product\n+Represents a product.\n \"\"\"\n type Product {\n   productId: Int!\n@@ -17,11 +17,7 @@ type Product {\n   variantGroupId: ID\n   visibility: Int\n   groupId: ID\n-  category: Category\n   url: String\n-  editUrl: String\n-  updateApi: String!\n-  deleteApi: String!\n }\n \n \"\"\""
        },
        {
            "filename": "packages/evershop/src/modules/catalog/graphql/types/Product/Product.resolvers.js",
            "diff": "@@ -5,22 +5,9 @@ const {\n   getProductsBaseQuery\n } = require('../../../services/getProductsBaseQuery');\n const { ProductCollection } = require('../../../services/ProductCollection');\n-const {\n-  getCategoriesBaseQuery\n-} = require('../../../services/getCategoriesBaseQuery');\n \n module.exports = {\n   Product: {\n-    category: async (product, _, { pool }) => {\n-      const query = getCategoriesBaseQuery();\n-      query.where('category_id', '=', product.categoryId);\n-      const result = await query.load(pool);\n-      if (!result) {\n-        return null;\n-      } else {\n-        return camelCase(result);\n-      }\n-    },\n     url: async (product, _, { pool }) => {\n       // Get the url rewrite for this product\n       const urlRewrite = await select()\n@@ -33,10 +20,7 @@ module.exports = {\n       } else {\n         return urlRewrite.request_path;\n       }\n-    },\n-    editUrl: (product) => buildUrl('productEdit', { id: product.uuid }),\n-    updateApi: (product) => buildUrl('updateProduct', { id: product.uuid }),\n-    deleteApi: (product) => buildUrl('deleteProduct', { id: product.uuid })\n+    }\n   },\n   Query: {\n     product: async (_, { id }, { pool }) => {"
        },
        {
            "filename": "packages/evershop/src/modules/catalog/pages/admin/productEdit+productNew/General.jsx",
            "diff": "@@ -163,7 +163,7 @@ export default function General({\n   uploadApi,\n   folderCreateApi,\n   setting,\n-  taxClasses\n+  productTaxClasses: { items: taxClasses }\n }) {\n   return (\n     <Card title=\"General\">\n@@ -278,16 +278,21 @@ General.propTypes = {\n     storeCurrency: PropTypes.string,\n     weightUnit: PropTypes.string\n   }).isRequired,\n-  taxClasses: PropTypes.arrayOf(\n-    PropTypes.shape({\n-      value: PropTypes.number,\n-      text: PropTypes.string\n-    })\n-  ).isRequired\n+  productTaxClasses: PropTypes.shape({\n+    items: PropTypes.arrayOf(\n+      PropTypes.shape({\n+        value: PropTypes.number,\n+        text: PropTypes.string\n+      })\n+    )\n+  })\n };\n \n General.defaultProps = {\n-  product: undefined\n+  product: undefined,\n+  productTaxClasses: {\n+    items: []\n+  }\n };\n \n export const layout = {\n@@ -328,9 +333,11 @@ export const query = `\n     deleteApi: url(routeId: \"fileDelete\", params: [{key: \"0\", value: \"\"}])\n     uploadApi: url(routeId: \"imageUpload\", params: [{key: \"0\", value: \"\"}])\n     folderCreateApi: url(routeId: \"folderCreate\")\n-    taxClasses {\n-      value: taxClassId\n-      text: name\n+    productTaxClasses: taxClasses {\n+      items {\n+        value: taxClassId\n+        text: name\n+      }\n     }\n   }\n `;"
        },
        {
            "filename": "packages/evershop/src/modules/checkout/pages/frontStore/checkoutSuccess/CustomerInfo.jsx",
            "diff": "@@ -130,7 +130,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order (id: getContextValue('orderId')) {\n+    order (uuid: getContextValue('orderId')) {\n       orderNumber\n       customerFullName\n       customerEmail"
        },
        {
            "filename": "packages/evershop/src/modules/checkout/pages/frontStore/checkoutSuccess/Summary.jsx",
            "diff": "@@ -67,7 +67,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order (id: getContextValue('orderId')) {\n+    order (uuid: getContextValue('orderId')) {\n       orderNumber\n       discountAmount {\n         value"
        },
        {
            "filename": "packages/evershop/src/modules/cod/pages/admin/orderEdit/CaptureButton.jsx",
            "diff": "@@ -60,7 +60,7 @@ export const layout = {\n export const query = `\n   query Query {\n     captureAPI: url(routeId: \"codCapturePayment\")\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       uuid\n       paymentStatus {\n         code"
        },
        {
            "filename": "packages/evershop/src/modules/customer/api/deleteCustomer/route.json",
            "diff": "@@ -1,5 +1,5 @@\n {\n   \"methods\": [\"DELETE\"],\n   \"path\": \"/customers/:id\",\n-  \"access\": \"public\"\n+  \"access\": \"private\"\n }"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/Customer/Customer.admin.graphql",
            "diff": "@@ -0,0 +1,20 @@\n+extend type Customer {\n+  editUrl: String!\n+  updateApi: String!\n+  deleteApi: String!\n+}\n+\n+\"\"\"\n+Return a collection of customers\n+\"\"\"\n+type CustomerCollection {\n+  items: [Customer]\n+  currentPage: Int!\n+  total: Int!\n+  currentFilters: [Filter]\n+}\n+\n+extend type Query {\n+  customer(id: String): Customer\n+  customers(filters: [FilterInput]): CustomerCollection\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/Customer/Customer.admin.resolvers.js",
            "diff": "@@ -0,0 +1,30 @@\n+const { select } = require('@evershop/postgres-query-builder');\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n+const {\n+  getCustomersBaseQuery\n+} = require('../../../services/getCustomersBaseQuery');\n+const { CustomerCollection } = require('../../../services/CustomerCollection');\n+\n+module.exports = {\n+  Query: {\n+    customer: async (root, { id }, { pool }) => {\n+      const query = select().from('customer');\n+      query.where('uuid', '=', id);\n+\n+      const customer = await query.load(pool);\n+      return customer ? camelCase(customer) : null;\n+    },\n+    customers: async (_, { filters = [] }) => {\n+      const query = getCustomersBaseQuery();\n+      const root = new CustomerCollection(query);\n+      await root.init({}, { filters });\n+      return root;\n+    }\n+  },\n+  Customer: {\n+    editUrl: ({ uuid }) => buildUrl('customerEdit', { id: uuid }),\n+    updateApi: (customer) => buildUrl('updateCustomer', { id: customer.uuid }),\n+    deleteApi: (customer) => buildUrl('deleteCustomer', { id: customer.uuid })\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/Customer/Customer.graphql",
            "diff": "@@ -1,5 +1,5 @@\n \"\"\"\n-Look up a customer by ID\n+Represents a customer\n \"\"\"\n type Customer {\n   customerId: Int!\n@@ -8,27 +8,8 @@ type Customer {\n   email: String!\n   fullName: String!\n   createdAt: Date!\n-  url: String!\n-  editUrl: String!\n-  logoutApi: String!\n-  updateApi: String!\n-  deleteApi: String!\n-  group: CustomerGroup\n-  orders: [Order]\n-}\n-\n-\"\"\"\n-Return a collection of customers\n-\"\"\"\n-type CustomerCollection {\n-  items: [Customer]\n-  currentPage: Int!\n-  total: Int!\n-  currentFilters: [Filter]\n }\n \n extend type Query {\n-  customer(id: String): Customer\n   currentCustomer: Customer\n-  customers(filters: [FilterInput]): CustomerCollection\n }"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/Customer/Customer.resolvers.js",
            "diff": "@@ -1,51 +1,8 @@\n-const { select } = require('@evershop/postgres-query-builder');\n-const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n-const {\n-  getCustomersBaseQuery\n-} = require('../../../services/getCustomersBaseQuery');\n-const { CustomerCollection } = require('../../../services/CustomerCollection');\n \n module.exports = {\n   Query: {\n-    customer: async (root, { id }, { pool }) => {\n-      const query = select().from('customer');\n-      query.where('uuid', '=', id);\n-\n-      const customer = await query.load(pool);\n-      return customer ? camelCase(customer) : null;\n-    },\n-    currentCustomer: async (root, args, { customer }) => customer ? camelCase(customer) : null,\n-    customers: async (_, { filters = [] }, { user }) => {\n-      // This field is for admin only\n-      if (!user) {\n-        return [];\n-      }\n-      const query = getCustomersBaseQuery();\n-      const root = new CustomerCollection(query);\n-      await root.init({}, { filters });\n-      return root;\n-    }\n-  },\n-  Customer: {\n-    url: ({ urlKey }) => buildUrl('customerView', { url_key: urlKey }),\n-    editUrl: ({ uuid }) => buildUrl('customerEdit', { id: uuid }),\n-    logoutApi: ({ uuid }) => buildUrl('deleteCustomerSession', { id: uuid }),\n-    updateApi: (customer) => buildUrl('updateCustomer', { id: customer.uuid }),\n-    deleteApi: (customer) => buildUrl('deleteCustomer', { id: customer.uuid }),\n-    group: async ({ groupId }, _, { pool }) => {\n-      const group = await select()\n-        .from('customer_group')\n-        .where('customer_group.customer_group_id', '=', groupId)\n-        .load(pool);\n-      return group ? camelCase(group) : null;\n-    },\n-    orders: async ({ customerId }, _, { pool }) => {\n-      const orders = await select()\n-        .from('order')\n-        .where('order.customer_id', '=', customerId)\n-        .execute(pool);\n-      return orders.map((row) => camelCase(row));\n-    }\n+    currentCustomer: async (root, args, { customer }) =>\n+      customer ? camelCase(customer) : null\n   }\n };"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/CustomerGroup/CustomerGroup.admin.graphql",
            "diff": "@@ -0,0 +1,20 @@\n+extend type CustomerGroup {\n+  editUrl: String!\n+  customers: [Customer]\n+}\n+\n+\"\"\"\n+Represents a collection of customer groups\n+\"\"\"\n+type CustomerGroupCollection {\n+  items: [CustomerGroup]\n+  currentPage: Int!\n+  total: Int!\n+  currentFilters: [Filter]\n+}\n+\n+\n+extend type Query {\n+  customerGroup: CustomerGroup\n+  customerGroups: CustomerGroupCollection\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/CustomerGroup/CustomerGroup.admin.resolvers.js",
            "diff": "@@ -0,0 +1,39 @@\n+const { select } = require('@evershop/postgres-query-builder');\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n+const {\n+  getCustomerGroupsBaseQuery\n+} = require('../../../services/getCustomerGroupsBaseQuery');\n+const {\n+  CustomerGroupCollection\n+} = require('../../../services/CustomerGroupCollection');\n+\n+module.exports = {\n+  Query: {\n+    customerGroup: async (root, { id }, { pool }) => {\n+      const group = await select()\n+        .from('customer_group')\n+        .where('customer_group.customer_group_id', '=', id)\n+        .load(pool);\n+\n+      return group ? camelCase(group) : null;\n+    },\n+    customerGroups: async (_, { filters = [] }) => {\n+      const query = getCustomerGroupsBaseQuery();\n+      const root = new CustomerGroupCollection(query);\n+      await root.init({}, { filters });\n+      return root;\n+    }\n+  },\n+  CustomerGroup: {\n+    customers: async (group, _, { pool }) => {\n+      const customers = await select()\n+        .from('customer')\n+        .where('customer.group_id', '=', group.customerGroupId)\n+        .execute(pool);\n+      return customers.map((customer) => camelCase(customer));\n+    },\n+    editUrl: (group) =>\n+      buildUrl('customerGroupEdit', { id: group.customerGroupId })\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/CustomerGroup/CustomerGroup.graphql",
            "diff": "@@ -4,11 +4,8 @@ Represents a customer group.\n type CustomerGroup {\n   customerGroupId: Int!\n   groupName: String!\n-  editUrl: String!\n-  customers: [Customer]\n }\n \n-extend type Query {\n-  customerGroup: CustomerGroup\n-  customerGroups: [CustomerGroup]\n-}\n+extend type Customer {\n+  group: CustomerGroup\n+}\n\\ No newline at end of file"
        },
        {
            "filename": "packages/evershop/src/modules/customer/graphql/types/CustomerGroup/CustomerGroup.resolvers.js",
            "diff": "@@ -1,37 +1,14 @@\n const { select } = require('@evershop/postgres-query-builder');\n-const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n \n module.exports = {\n-  Query: {\n-    customerGroup: async (root, { id }, { pool, user }) => {\n-      if (!user) {\n-        return null;\n-      }\n+  Customer: {\n+    group: async ({ groupId }, _, { pool }) => {\n       const group = await select()\n         .from('customer_group')\n-        .where('customer_group.customer_group_id', '=', id)\n+        .where('customer_group.customer_group_id', '=', groupId)\n         .load(pool);\n-\n       return group ? camelCase(group) : null;\n-    },\n-    customerGroups: async (root, _, { pool, user }) => {\n-      if (!user) {\n-        return [];\n-      }\n-      const groups = await select().from('customer_group').execute(pool);\n-      return groups.map((group) => camelCase(group));\n     }\n-  },\n-  CustomerGroup: {\n-    customers: async (group, _, { pool }) => {\n-      const customers = await select()\n-        .from('customer')\n-        .where('customer.group_id', '=', group.customerGroupId)\n-        .execute(pool);\n-      return customers.map((customer) => camelCase(customer));\n-    },\n-    editUrl: (group) =>\n-      buildUrl('customerGroupEdit', { id: group.customerGroupId })\n   }\n };"
        },
        {
            "filename": "packages/evershop/src/modules/customer/pages/frontStore/checkout/CustomerInfoStep.jsx",
            "diff": "@@ -10,7 +10,7 @@ import { _ } from '@evershop/evershop/src/lib/locale/translate';\n \n export default function ContactInformationStep({\n   cart: { customerEmail, addContactInfoApi },\n-  customer,\n+  currentCustomer,\n   loginUrl\n }) {\n   const steps = useCheckoutSteps();\n@@ -28,7 +28,7 @@ export default function ContactInformationStep({\n       isCompleted: !!customerEmail,\n       preview: customerEmail || '',\n       sortOrder: 5,\n-      editable: !customer\n+      editable: !currentCustomer\n     });\n   }, []);\n \n@@ -42,7 +42,7 @@ export default function ContactInformationStep({\n     <div className=\"checkout-contact checkout-step\">\n       {display && (\n         <Edit\n-          customer={customer}\n+          customer={currentCustomer}\n           step={step}\n           cartId={cartId}\n           email={email}\n@@ -57,7 +57,7 @@ export default function ContactInformationStep({\n \n ContactInformationStep.propTypes = {\n   loginUrl: PropTypes.string.isRequired,\n-  customer: PropTypes.shape({\n+  currentCustomer: PropTypes.shape({\n     email: PropTypes.string.isRequired\n   }),\n   cart: PropTypes.shape({\n@@ -67,7 +67,7 @@ ContactInformationStep.propTypes = {\n };\n \n ContactInformationStep.defaultProps = {\n-  customer: null\n+  currentCustomer: null\n };\n \n export const layout = {\n@@ -81,7 +81,7 @@ export const query = `\n       customerEmail\n       addContactInfoApi\n     }\n-    customer(id: getContextValue(\"customerId\", null)) {\n+    currentCustomer {\n       email\n     }\n     loginUrl: url(routeId: \"login\")"
        },
        {
            "filename": "packages/evershop/src/modules/customer/services/CustomerGroupCollection.js",
            "diff": "@@ -0,0 +1,108 @@\n+const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n+const { pool } = require('@evershop/evershop/src/lib/postgres/connection');\n+\n+class CustomerGroupCollection {\n+  constructor(baseQuery) {\n+    this.baseQuery = baseQuery;\n+  }\n+\n+  async init(args, { filters = [] }) {\n+    const currentFilters = [];\n+\n+    // Name filter\n+    const nameFilter = filters.find((f) => f.key === 'group_name');\n+    if (nameFilter) {\n+      this.baseQuery.andWhere(\n+        'customer_group.group_name',\n+        'ILIKE',\n+        `%${nameFilter.value}%`\n+      );\n+      currentFilters.push({\n+        key: 'group_name',\n+        operation: '=',\n+        value: nameFilter.value\n+      });\n+    }\n+\n+    // Keyword search\n+    const keywordFilter = filters.find((f) => f.key === 'keyword');\n+    if (keywordFilter) {\n+      this.baseQuery.andWhere(\n+        'customer_group.group_name',\n+        'ILIKE',\n+        `%${keywordFilter.value}%`\n+      );\n+      currentFilters.push({\n+        key: 'keyword',\n+        operation: '=',\n+        value: keywordFilter.value\n+      });\n+    }\n+\n+    const sortBy = filters.find((f) => f.key === 'sortBy');\n+    const sortOrder = filters.find(\n+      (f) =>\n+        f.key === 'sortOrder' &&\n+        ['ASC', 'DESC', 'asc', 'desc'].includes(f.value)\n+    ) || { value: 'DESC' };\n+\n+    if (sortBy && sortBy.value === 'group_name') {\n+      this.baseQuery.orderBy('customer_group.group_name', sortOrder.value);\n+      currentFilters.push({\n+        key: 'sortBy',\n+        operation: '=',\n+        value: sortBy.value\n+      });\n+    } else {\n+      this.baseQuery.orderBy('customer_group.customer_group_id', 'DESC');\n+    }\n+    if (sortOrder.key) {\n+      currentFilters.push({\n+        key: 'sortOrder',\n+        operation: '=',\n+        value: sortOrder.value\n+      });\n+    }\n+\n+    // Clone the main query for getting total right before doing the paging\n+    const totalQuery = this.baseQuery.clone();\n+    totalQuery.select('COUNT(*)', 'total');\n+    totalQuery.removeOrderBy();\n+    // Paging\n+    const page = filters.find((f) => f.key === 'page') || { value: 1 };\n+    const limit = filters.find((f) => f.key === 'limit') || { value: 20 }; // TODO: Get from the config\n+    currentFilters.push({\n+      key: 'page',\n+      operation: '=',\n+      value: page.value\n+    });\n+    currentFilters.push({\n+      key: 'limit',\n+      operation: '=',\n+      value: limit.value\n+    });\n+    this.baseQuery.limit(\n+      (page.value - 1) * parseInt(limit.value, 10),\n+      parseInt(limit.value, 10)\n+    );\n+    this.currentFilters = currentFilters;\n+    this.totalQuery = totalQuery;\n+  }\n+\n+  async items() {\n+    const items = await this.baseQuery.execute(pool);\n+    return items.map((row) => camelCase(row));\n+  }\n+\n+  async total() {\n+    // Call items to get the total\n+    const total = await this.totalQuery.execute(pool);\n+    return total[0].total;\n+  }\n+\n+  currentFilters() {\n+    return this.currentFilters;\n+  }\n+}\n+\n+module.exports.CustomerGroupCollection = CustomerGroupCollection;"
        },
        {
            "filename": "packages/evershop/src/modules/customer/services/getCustomerGroupsBaseQuery.js",
            "diff": "@@ -0,0 +1,7 @@\n+const { select } = require('@evershop/postgres-query-builder');\n+\n+module.exports.getCustomerGroupsBaseQuery = () => {\n+  const query = select().from('customer_group');\n+\n+  return query;\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/api/adminGraphql/[bodyParser]graphql.js",
            "diff": "@@ -1,3 +1,5 @@\n-const graphqlMiddleware = require('@evershop/evershop/src/modules/graphql/api/graphql/[bodyParser]graphql');\n+const schema = require('../../services/buildSchema');\n+const { graphqlMiddleware } = require('../../services/graphqlMiddleware');\n \n-module.exports = graphqlMiddleware;\n+const middleware = graphqlMiddleware(schema);\n+module.exports = middleware;"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/api/graphql/[bodyParser]graphql.js",
            "diff": "@@ -1,56 +1,5 @@\n-const { execute } = require('graphql');\n-const { validate } = require('graphql/validation');\n-const { parse } = require('graphql');\n-const isDevelopmentMode = require('@evershop/evershop/src/lib/util/isDevelopmentMode');\n-const { OK } = require('@evershop/evershop/src/lib/util/httpStatus');\n-let schema = require('../../services/buildSchema');\n-const { getContext } = require('../../services/contextHelper');\n+const schema = require('../../services/buildStoreFrontSchema');\n+const { graphqlMiddleware } = require('../../services/graphqlMiddleware');\n \n-module.exports = async function graphql(request, response, delegate, next) {\n-  const { body } = request;\n-  const { query, variables } = body;\n-  try {\n-    const promises = [];\n-    Object.keys(delegate).forEach((id) => {\n-      // Check if middleware is async\n-      if (delegate[id] instanceof Promise) {\n-        promises.push(delegate[id]);\n-      }\n-    });\n-\n-    if (!query) {\n-      response.status(OK).json({\n-        data: {}\n-      });\n-      return;\n-    }\n-\n-    const document = parse(query);\n-    // Validate the query\n-    const validationErrors = validate(schema, document);\n-    if (validationErrors.length > 0) {\n-      next(new Error(validationErrors[0].message));\n-    } else {\n-      if (isDevelopmentMode()) {\n-        // eslint-disable-next-line global-require\n-        schema = require('../../services/buildSchema');\n-      }\n-      const data = await execute({\n-        schema,\n-        contextValue: getContext(request),\n-        document,\n-        variableValues: variables\n-      });\n-      if (data.errors) {\n-        // Create an Error instance with message and stack trace\n-        next(new Error(data.errors[0].message));\n-      } else {\n-        response.status(OK).json({\n-          data: data.data\n-        });\n-      }\n-    }\n-  } catch (error) {\n-    next(error);\n-  }\n-};\n+const middleware = graphqlMiddleware(schema);\n+module.exports = middleware;"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/pages/global/[buildQuery]graphql[notification].js",
            "diff": "@@ -1,15 +1,18 @@\n const { execute } = require('graphql');\n const { parse } = require('graphql');\n const { validate } = require('graphql/validation');\n-const isDevelopmentMode = require('@evershop/evershop/src/lib/util/isDevelopmentMode');\n const { debug } = require('@evershop/evershop/src/lib/log/debuger');\n-let schema = require('../../services/buildSchema');\n+const adminSchema = require('../../services/buildSchema');\n+const storeFrontSchema = require('../../services/buildStoreFrontSchema');\n const { getContext } = require('../../services/contextHelper');\n const {\n   graphqlErrorMessageFormat\n } = require('../../services/graphqlErrorMessageFormat');\n \n module.exports = async function graphql(request, response, delegate, next) {\n+  const {currentRoute} = request;\n+  const schema =\n+    currentRoute && currentRoute.isAdmin ? adminSchema : storeFrontSchema;\n   // TODO: Should we wait for previous async middlewares?\n   try {\n     const { body } = request;\n@@ -25,6 +28,7 @@ module.exports = async function graphql(request, response, delegate, next) {\n       } else {\n         const document = parse(graphqlQuery);\n         // Validate the query\n+\n         const validationErrors = validate(schema, document);\n         if (validationErrors.length > 0) {\n           const formatedErrorMessage = graphqlErrorMessageFormat(\n@@ -38,10 +42,6 @@ module.exports = async function graphql(request, response, delegate, next) {\n           );\n           next(validationErrors[0]);\n         } else {\n-          if (isDevelopmentMode()) {\n-            // eslint-disable-next-line global-require\n-            schema = require('../../services/buildSchema');\n-          }\n           const context = getContext(request);\n           // Add current user to context\n           context.user = request.locals.user;"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/services/buildResolvers.js",
            "diff": "@@ -4,18 +4,23 @@ const { mergeResolvers } = require('@graphql-tools/merge');\n const { CONSTANTS } = require('@evershop/evershop/src/lib/helpers');\n const { getEnabledExtensions } = require('../../../../bin/extension');\n \n-module.exports.buildResolvers = function buildResolvers() {\n+module.exports.buildResolvers = function buildResolvers(isAdmin = false) {\n   const typeSources = [\n     path.join(CONSTANTS.MOLDULESPATH, '*/graphql/types/**/*.resolvers.js')\n   ];\n+\n   const extensions = getEnabledExtensions();\n   extensions.forEach((extension) => {\n     typeSources.push(\n-      path.join(extension.path, 'graphql', 'types', '**', '*.resolvers.js')\n+      path.join(extension.path, 'graphql/types/**/*.resolvers.js')\n     );\n   });\n   const resolvers = mergeResolvers(\n-    typeSources.map((source) => loadFilesSync(source))\n+    typeSources.map((source) =>\n+      loadFilesSync(source, {\n+        ignoredExtensions: isAdmin ? [] : ['.admin.resolvers.js']\n+      })\n+    )\n   );\n \n   return resolvers;"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/services/buildSchema.js",
            "diff": "@@ -3,8 +3,8 @@ const { buildTypeDefs } = require('./buildTypes');\n const { buildResolvers } = require('./buildResolvers');\n \n const schema = makeExecutableSchema({\n-  typeDefs: buildTypeDefs(),\n-  resolvers: buildResolvers()\n+  typeDefs: buildTypeDefs(true),\n+  resolvers: buildResolvers(true)\n });\n \n module.exports = schema;"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/services/buildStoreFrontSchema.js",
            "diff": "@@ -0,0 +1,10 @@\n+const { makeExecutableSchema } = require('@graphql-tools/schema');\n+const { buildTypeDefs } = require('./buildTypes');\n+const { buildResolvers } = require('./buildResolvers');\n+\n+const schema = makeExecutableSchema({\n+  typeDefs: buildTypeDefs(),\n+  resolvers: buildResolvers()\n+});\n+\n+module.exports = schema;"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/services/buildTypes.js",
            "diff": "@@ -4,18 +4,21 @@ const { mergeTypeDefs } = require('@graphql-tools/merge');\n const { CONSTANTS } = require('@evershop/evershop/src/lib/helpers');\n const { getEnabledExtensions } = require('../../../../bin/extension');\n \n-module.exports.buildTypeDefs = function buildTypeDefs() {\n+module.exports.buildTypeDefs = function buildTypeDefs(isAdmin = false) {\n   const typeSources = [\n     path.join(CONSTANTS.MOLDULESPATH, '*/graphql/types/**/*.graphql')\n   ];\n+\n   const extensions = getEnabledExtensions();\n   extensions.forEach((extension) => {\n-    typeSources.push(\n-      path.join(extension.path, 'graphql', 'types', '**', '*.graphql')\n-    );\n+    typeSources.push(path.join(extension.path, 'graphql/types/**/*.graphql'));\n   });\n   const typeDefs = mergeTypeDefs(\n-    typeSources.map((source) => loadFilesSync(source))\n+    typeSources.map((source) =>\n+      loadFilesSync(source, {\n+        ignoredExtensions: isAdmin ? [] : ['.admin.graphql']\n+      })\n+    )\n   );\n \n   return typeDefs;"
        },
        {
            "filename": "packages/evershop/src/modules/graphql/services/graphqlMiddleware.js",
            "diff": "@@ -0,0 +1,56 @@\n+const { execute } = require('graphql');\n+const { validate } = require('graphql/validation');\n+const { parse } = require('graphql');\n+const { OK } = require('@evershop/evershop/src/lib/util/httpStatus');\n+const isDevelopmentMode = require('@evershop/evershop/src/lib/util/isDevelopmentMode');\n+const { getContext } = require('./contextHelper');\n+\n+module.exports.graphqlMiddleware = (schema) =>\n+  async function graphqlMiddleware(request, response, delegate, next) {\n+    const { body } = request;\n+    const { query, variables } = body;\n+    try {\n+      const promises = [];\n+      Object.keys(delegate).forEach((id) => {\n+        // Check if middleware is async\n+        if (delegate[id] instanceof Promise) {\n+          promises.push(delegate[id]);\n+        }\n+      });\n+\n+      if (!query) {\n+        response.status(OK).json({\n+          data: {}\n+        });\n+        return;\n+      }\n+\n+      const document = parse(query);\n+      // Validate the query\n+      const validationErrors = validate(schema, document);\n+      if (validationErrors.length > 0) {\n+        next(new Error(validationErrors[0].message));\n+      } else {\n+        if (isDevelopmentMode()) {\n+          // eslint-disable-next-line global-require, no-param-reassign\n+          schema = require('../../services/buildSchema');\n+        }\n+        const data = await execute({\n+          schema,\n+          contextValue: getContext(request),\n+          document,\n+          variableValues: variables\n+        });\n+        if (data.errors) {\n+          // Create an Error instance with message and stack trace\n+          next(new Error(data.errors[0].message));\n+        } else {\n+          response.status(OK).json({\n+            data: data.data\n+          });\n+        }\n+      }\n+    } catch (error) {\n+      next(error);\n+    }\n+  };"
        },
        {
            "filename": "packages/evershop/src/modules/oms/graphql/types/Order/Order.admin.graphql",
            "diff": "@@ -0,0 +1,14 @@\n+extend type Order {\n+  customerUrl: String\n+  editUrl: String!\n+  createShipmentApi: String!\n+  shipment: Shipment\n+}\n+\n+extend type Shipment {\n+  updateShipmentApi: String!\n+}\n+\n+extend type Query {\n+  orders(filters: [FilterInput]): OrderCollection\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/oms/graphql/types/Order/Order.admin.resolvers.js",
            "diff": "@@ -0,0 +1,30 @@\n+const { select } = require('@evershop/postgres-query-builder');\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+const { getOrdersBaseQuery } = require('../../../services/getOrdersBaseQuery');\n+const { OrderCollection } = require('../../../services/OrderCollection');\n+\n+module.exports = {\n+  Query: {\n+    orders: async (_, { filters = [] }) => {\n+      const query = getOrdersBaseQuery();\n+      const root = new OrderCollection(query);\n+      await root.init({}, { filters });\n+      return root;\n+    }\n+  },\n+  Order: {\n+    editUrl: ({ uuid }) => buildUrl('orderEdit', { id: uuid }),\n+    createShipmentApi: ({ uuid }) => buildUrl('createShipment', { id: uuid }),\n+    customerUrl: async ({ customerId }, _, { pool }) => {\n+      const customer = await select()\n+        .from('customer')\n+        .where('customer_id', '=', customerId)\n+        .load(pool);\n+      return customer ? buildUrl('customerEdit', { id: customer.uuid }) : null;\n+    }\n+  },\n+  Shipment: {\n+    updateShipmentApi: ({ orderUuid, uuid }) =>\n+      buildUrl('updateShipment', { order_id: orderUuid, shipment_id: uuid })\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/oms/graphql/types/Order/Order.graphql",
            "diff": "@@ -1,5 +1,5 @@\n \"\"\"\n-Retrieve an Order Address.\n+Represents an Order Address.\n \"\"\"\n type OrderAddress implements Address {\n   orderAddressId: Int!\n@@ -15,7 +15,7 @@ type OrderAddress implements Address {\n }\n \n \"\"\"\n-Retrieve an Order Item.\n+Represents an Order Item.\n \"\"\"\n type OrdertItem implements ShoppingCartItem {\n   orderItemId: ID!\n@@ -42,7 +42,7 @@ type OrdertItem implements ShoppingCartItem {\n }\n \n \"\"\"\n-Retrieve an Order.\n+Represents an Order.\n \"\"\"\n type Order implements ShoppingCart {\n   orderId: ID!\n@@ -53,7 +53,6 @@ type Order implements ShoppingCart {\n   billingAddress: OrderAddress\n   currency: String!\n   customerId: Int\n-  customerUrl: String\n   customerGroupId: Int\n   customerEmail: String\n   customerFullName: String\n@@ -78,14 +77,12 @@ type Order implements ShoppingCart {\n   shippingNote: String\n   createdAt: Date!\n   updatedAt: String!\n-  editUrl: String!\n-  createShipmentApi: String!\n   activities: [Activity]\n   shipment: Shipment\n }\n \n \"\"\"\n-Retrieve an Order Activity.\n+Represents an Order Activity.\n \"\"\"\n type Activity {\n   orderActivityId: Int!\n@@ -96,7 +93,7 @@ type Activity {\n }\n \n \"\"\"\n-Retrieve an Order Shipment.\n+Represents a Shipment.\n \"\"\"\n type Shipment {\n   shipmentId: Int!\n@@ -105,7 +102,6 @@ type Shipment {\n   trackingNumber: String\n   createdAt: DateTime!\n   updatedAt: DateTime\n-  updateShipmentApi: String!\n }\n \n \"\"\"\n@@ -118,7 +114,10 @@ type OrderCollection {\n   currentFilters: [Filter]\n }\n \n+extend type Customer {\n+  orders: [Order]\n+}\n+\n extend type Query {\n-  order(id: String!): Order\n-  orders(filters: [FilterInput]): OrderCollection\n+  order(uuid: String!): Order\n }"
        },
        {
            "filename": "packages/evershop/src/modules/oms/graphql/types/Order/Order.resolvers.js",
            "diff": "@@ -1,32 +1,19 @@\n const { select } = require('@evershop/postgres-query-builder');\n-const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n const { getConfig } = require('@evershop/evershop/src/lib/util/getConfig');\n-const { getOrdersBaseQuery } = require('../../../services/getOrdersBaseQuery');\n-const { OrderCollection } = require('../../../services/OrderCollection');\n \n module.exports = {\n   Query: {\n-    order: async (_, { id }, { pool }) => {\n+    order: async (_, { uuid }, { pool }) => {\n       const query = select().from('order');\n-      query.where('uuid', '=', id);\n+      query.where('uuid', '=', uuid);\n       const order = await query.load(pool);\n       if (!order) {\n         return null;\n       } else {\n         return camelCase(order);\n       }\n     },\n-    orders: async (_, { filters = [] }, { user }) => {\n-      // This field is for admin only\n-      if (!user) {\n-        return [];\n-      }\n-      const query = getOrdersBaseQuery();\n-      const root = new OrderCollection(query);\n-      await root.init({}, { filters });\n-      return root;\n-    },\n     shipmentStatusList: () => getConfig('oms.order.shipmentStatus', {}),\n     paymentStatusList: () => getConfig('oms.order.paymentStatus', {})\n   },\n@@ -68,17 +55,6 @@ module.exports = {\n         .load(pool);\n       return shipment ? { ...camelCase(shipment), orderUuid: uuid } : null;\n     },\n-    editUrl: ({ uuid }) => buildUrl('orderEdit', { id: uuid }),\n-    createShipmentApi: ({ uuid }) => buildUrl('createShipment', { id: uuid }),\n-    customerUrl: async ({ customerId }, _, { pool }) => {\n-      const customer = await select()\n-        .from('customer')\n-        .where('customer_id', '=', customerId)\n-        .load(pool);\n-      return customer\n-        ? buildUrl('customerEdit', { id: customer.uuid })\n-        : null;\n-    },\n     shipmentStatus: ({ shipmentStatus }) => {\n       const statusList = getConfig('oms.order.shipmentStatus', {});\n       const status = statusList[shipmentStatus] || {\n@@ -108,8 +84,13 @@ module.exports = {\n       };\n     }\n   },\n-  Shipment: {\n-    updateShipmentApi: ({ orderUuid, uuid }) =>\n-      buildUrl('updateShipment', { order_id: orderUuid, shipment_id: uuid })\n+  Customer: {\n+    orders: async ({ customerId }, _, { pool }) => {\n+      const orders = await select()\n+        .from('order')\n+        .where('order.customer_id', '=', customerId)\n+        .execute(pool);\n+      return orders.map((row) => camelCase(row));\n+    }\n   }\n };"
        },
        {
            "filename": "packages/evershop/src/modules/oms/graphql/types/Status/Status.graphql",
            "diff": "@@ -1,5 +1,5 @@\n \"\"\"\n-The `PaymentStatus` type defines the status of a payment.\n+Represents a payment status.\n \"\"\"\n type PaymentStatus {\n   name: String\n@@ -9,7 +9,7 @@ type PaymentStatus {\n }\n \n \"\"\"\n-The `ShipmentStatus` type defines the status of a shipment.\n+Represents a shipment status.\n \"\"\"\n type ShipmentStatus {\n   name: String"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/Activities.jsx",
            "diff": "@@ -97,7 +97,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       activities {\n         comment\n         customerNotified"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/AddTrackingButton.jsx",
            "diff": "@@ -116,7 +116,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       shipment {\n         shipmentId\n         carrier"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/Customer.jsx",
            "diff": "@@ -117,7 +117,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       customerFullName\n       customerEmail\n       customerUrl"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/CustomerNotes.jsx",
            "diff": "@@ -48,7 +48,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       shippingNote\n     }\n   }"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/Items.jsx",
            "diff": "@@ -121,7 +121,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       currency\n       shipment {\n         shipmentId"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/MarkDeliveredButton.jsx",
            "diff": "@@ -64,7 +64,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       orderId\n       shipmentStatus {\n         code"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/PageHeading.jsx",
            "diff": "@@ -22,7 +22,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\", null)) {\n+    order(uuid: getContextValue(\"orderId\", null)) {\n       orderNumber\n     }\n     backUrl: url(routeId: \"orderGrid\")"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/Payment.jsx",
            "diff": "@@ -141,7 +141,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       orderId\n       totalQty\n       coupon"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/PaymentStatus.jsx",
            "diff": "@@ -33,7 +33,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       paymentStatus {\n         code\n         badge"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/ShipButton.jsx",
            "diff": "@@ -122,7 +122,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       shipment {\n         shipmentId\n         carrier"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/ShipmentStatus.jsx",
            "diff": "@@ -33,7 +33,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       shipmentStatus {\n         code\n         badge"
        },
        {
            "filename": "packages/evershop/src/modules/oms/pages/admin/orderEdit/TrackingButton.jsx",
            "diff": "@@ -55,7 +55,7 @@ export const layout = {\n \n export const query = `\n   query Query {\n-    order(id: getContextValue(\"orderId\")) {\n+    order(uuid: getContextValue(\"orderId\")) {\n       shipment {\n         shipmentId\n         carrier"
        },
        {
            "filename": "packages/evershop/src/modules/paypal/graphql/types/PaypalSetting/PaypalSetting.admin.graphql",
            "diff": "@@ -0,0 +1,7 @@\n+extend type Setting {\n+  paypalPaymentStatus: Int\n+  paypalClientId: String\n+  paypalClientSecret: String\n+  paypalWebhookSecret: String\n+  paypalPaymentIntent: String\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/paypal/graphql/types/PaypalSetting/PaypalSetting.admin.resolvers.js",
            "diff": "@@ -0,0 +1,78 @@\n+const { getConfig } = require('@evershop/evershop/src/lib/util/getConfig');\n+\n+module.exports = {\n+  Setting: {\n+    paypalPaymentStatus: (setting) => {\n+      const paypalConfig = getConfig('system.paypal', {});\n+      if (paypalConfig.status) {\n+        return paypalConfig.status;\n+      }\n+      const paypalPaymentStatus = setting.find(\n+        (s) => s.name === 'paypalPaymentStatus'\n+      );\n+      if (paypalPaymentStatus) {\n+        return parseInt(paypalPaymentStatus.value, 10);\n+      } else {\n+        return 0;\n+      }\n+    },\n+    paypalPaymentIntent: (setting) => {\n+      const paypalPaymentIntent = setting.find(\n+        (s) => s.name === 'paypalPaymentIntent'\n+      );\n+      if (paypalPaymentIntent) {\n+        return paypalPaymentIntent.value;\n+      } else {\n+        return 'CAPTURE';\n+      }\n+    },\n+    paypalClientId: (setting) => {\n+      const paypalConfig = getConfig('system.paypal', {});\n+      if (paypalConfig.clientId) {\n+        return paypalConfig.clientId;\n+      }\n+      const paypalClientId = setting.find((s) => s.name === 'paypalClientId');\n+      if (paypalClientId) {\n+        return paypalClientId.value;\n+      } else {\n+        return null;\n+      }\n+    },\n+    paypalClientSecret: (setting, _, { user }) => {\n+      const paypalConfig = getConfig('system.paypal', {});\n+      if (paypalConfig.clientSecret) {\n+        return '*******************************';\n+      }\n+      if (user) {\n+        const paypalClientSecret = setting.find(\n+          (s) => s.name === 'paypalClientSecret'\n+        );\n+        if (paypalClientSecret) {\n+          return paypalClientSecret.value;\n+        } else {\n+          return null;\n+        }\n+      } else {\n+        return null;\n+      }\n+    },\n+    paypalWebhookSecret: (setting, _, { user }) => {\n+      const paypalConfig = getConfig('system.paypal', {});\n+      if (paypalConfig.webhookSecret) {\n+        return '*******************************';\n+      }\n+      if (user) {\n+        const paypalWebhookSecret = setting.find(\n+          (s) => s.name === 'paypalWebhookSecret'\n+        );\n+        if (paypalWebhookSecret) {\n+          return paypalWebhookSecret.value;\n+        } else {\n+          return null;\n+        }\n+      } else {\n+        return null;\n+      }\n+    }\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/paypal/graphql/types/PaypalSetting/PaypalSetting.graphql",
            "diff": "@@ -1,9 +1,4 @@\n extend type Setting {\n-  paypalPaymentStatus: Int\n   paypalDislayName: String\n-  paypalClientId: String\n-  paypalClientSecret: String\n-  paypalWebhookSecret: String\n-  paypalPaymentIntent: String\n   paypalEnvironment: String\n }"
        },
        {
            "filename": "packages/evershop/src/modules/paypal/graphql/types/PaypalSetting/PaypalSetting.resolvers.js",
            "diff": "@@ -2,20 +2,6 @@ const { getConfig } = require('@evershop/evershop/src/lib/util/getConfig');\n \n module.exports = {\n   Setting: {\n-    paypalPaymentStatus: (setting) => {\n-      const paypalConfig = getConfig('system.paypal', {});\n-      if (paypalConfig.status) {\n-        return paypalConfig.status;\n-      }\n-      const paypalPaymentStatus = setting.find(\n-        (s) => s.name === 'paypalPaymentStatus'\n-      );\n-      if (paypalPaymentStatus) {\n-        return parseInt(paypalPaymentStatus.value, 10);\n-      } else {\n-        return 0;\n-      }\n-    },\n     paypalDislayName: (setting) => {\n       const paypalDislayName = setting.find(\n         (s) => s.name === 'paypalDislayName'\n@@ -26,64 +12,6 @@ module.exports = {\n         return 'Paypal';\n       }\n     },\n-    paypalPaymentIntent: (setting) => {\n-      const paypalPaymentIntent = setting.find(\n-        (s) => s.name === 'paypalPaymentIntent'\n-      );\n-      if (paypalPaymentIntent) {\n-        return paypalPaymentIntent.value;\n-      } else {\n-        return 'CAPTURE';\n-      }\n-    },\n-    paypalClientId: (setting) => {\n-      const paypalConfig = getConfig('system.paypal', {});\n-      if (paypalConfig.clientId) {\n-        return paypalConfig.clientId;\n-      }\n-      const paypalClientId = setting.find((s) => s.name === 'paypalClientId');\n-      if (paypalClientId) {\n-        return paypalClientId.value;\n-      } else {\n-        return null;\n-      }\n-    },\n-    paypalClientSecret: (setting, _, { user }) => {\n-      const paypalConfig = getConfig('system.paypal', {});\n-      if (paypalConfig.clientSecret) {\n-        return '*******************************';\n-      }\n-      if (user) {\n-        const paypalClientSecret = setting.find(\n-          (s) => s.name === 'paypalClientSecret'\n-        );\n-        if (paypalClientSecret) {\n-          return paypalClientSecret.value;\n-        } else {\n-          return null;\n-        }\n-      } else {\n-        return null;\n-      }\n-    },\n-    paypalWebhookSecret: (setting, _, { user }) => {\n-      const paypalConfig = getConfig('system.paypal', {});\n-      if (paypalConfig.webhookSecret) {\n-        return '*******************************';\n-      }\n-      if (user) {\n-        const paypalWebhookSecret = setting.find(\n-          (s) => s.name === 'paypalWebhookSecret'\n-        );\n-        if (paypalWebhookSecret) {\n-          return paypalWebhookSecret.value;\n-        } else {\n-          return null;\n-        }\n-      } else {\n-        return null;\n-      }\n-    },\n     paypalEnvironment: (setting) => {\n       const paypalConfig = getConfig('system.paypal', {});\n       if (paypalConfig.environment) {"
        },
        {
            "filename": "packages/evershop/src/modules/promotion/graphql/types/Coupon/Coupon.admin.graphql",
            "diff": "@@ -0,0 +1,89 @@\n+scalar JSON\n+\n+\"\"\"\n+Represents a coupon\n+\"\"\"\n+type Coupon {\n+  couponId: Int\n+  uuid: String!\n+  status: Int!\n+  description: String!\n+  discountAmount: Float!\n+  freeShipping: Int!\n+  discountType: String!\n+  coupon: String!\n+  usedTime: Int\n+  targetProducts: TargetProducts\n+  condition: OrderCondition\n+  userCondition: UserCondition\n+  buyxGety: [ByXGetY]\n+  maxUsesTimePerCoupon: Int\n+  maxUsesTimePerCustomer: Int\n+  startDate: DateTime\n+  endDate: DateTime\n+  editUrl: String!\n+  updateApi: String!\n+  deleteApi: String!\n+}\n+\n+\"\"\"\n+Represents a signle product used in the condition of a coupon.\n+\"\"\"\n+type MatchProductFilter {\n+  key: String!\n+  operator: String!\n+  value: JSON\n+  qty: String\n+}\n+\n+\"\"\"\n+Represents the target products of a coupon.\n+\"\"\"\n+type TargetProducts {\n+  maxQty: String\n+  products: [MatchProductFilter]\n+}\n+\n+\"\"\"\n+Represents the condition of a coupon.\n+\"\"\"\n+type OrderCondition {\n+  orderTotal: String\n+  orderQty: String\n+  requiredProducts: [MatchProductFilter]\n+}\n+\n+\"\"\"\n+Represents the buy x get y condition of a coupon.\n+\"\"\"\n+type ByXGetY {\n+  sku: String!\n+  buyQty: String\n+  getQty: String\n+  maxY: String\n+  discount: String\n+}\n+\n+\"\"\"\n+Represents the user condition of a coupon.\n+\"\"\"\n+type UserCondition {\n+  groups: [String]\n+  emails: String\n+  purchased: String\n+}\n+\n+\"\"\"\n+Returns a collection of coupons\n+\"\"\"\n+type CouponCollection {\n+  items: [Coupon]\n+  currentPage: Int!\n+  total: Int!\n+  currentFilters: [Filter]\n+}\n+\n+extend type Query {\n+  coupon(id: Int): Coupon\n+  coupons(filters: [FilterInput]): CouponCollection\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/promotion/graphql/types/Coupon/Coupon.admin.resolvers.js",
            "diff": "@@ -0,0 +1,67 @@\n+const { GraphQLJSON } = require('graphql-type-json');\n+const { select } = require('@evershop/postgres-query-builder');\n+const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n+const {\n+  getCouponsBaseQuery\n+} = require('../../../services/getCouponsBaseQuery');\n+const { CouponCollection } = require('../../../services/CouponCollection');\n+\n+module.exports = {\n+  JSON: GraphQLJSON,\n+  Query: {\n+    coupon: async (root, { id }, { pool }) => {\n+      const query = select().from('coupon');\n+      query.where('coupon_id', '=', id);\n+      // if (admin !== true) {\n+      //   query.where('cms_page.status', '=', 1);\n+      // }\n+\n+      const coupon = await query.load(pool);\n+      return coupon ? camelCase(coupon) : null;\n+    },\n+    coupons: async (_, { filters = [] }, { user }) => {\n+      // This field is for admin only\n+      if (!user) {\n+        return [];\n+      }\n+      const query = getCouponsBaseQuery();\n+      const root = new CouponCollection(query);\n+      await root.init({}, { filters });\n+      return root;\n+    }\n+  },\n+  Coupon: {\n+    targetProducts: ({ targetProducts }) => {\n+      if (!targetProducts) {\n+        return null;\n+      } else {\n+        return camelCase(targetProducts);\n+      }\n+    },\n+    condition: ({ condition }) => {\n+      if (!condition) {\n+        return null;\n+      } else {\n+        return camelCase(condition);\n+      }\n+    },\n+    userCondition: ({ userCondition }) => {\n+      if (!userCondition) {\n+        return null;\n+      } else {\n+        return camelCase(userCondition);\n+      }\n+    },\n+    buyxGety: ({ buyxGety }) => {\n+      if (!buyxGety) {\n+        return [];\n+      } else {\n+        return buyxGety.map((item) => camelCase(item));\n+      }\n+    },\n+    editUrl: ({ uuid }) => buildUrl('couponEdit', { id: uuid }),\n+    updateApi: (coupon) => buildUrl('updateCoupon', { id: coupon.uuid }),\n+    deleteApi: (coupon) => buildUrl('deleteCoupon', { id: coupon.uuid })\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/promotion/graphql/types/Coupon/Coupon.graphql",
            "diff": "@@ -1,93 +1,3 @@\n-scalar JSON\n-\n-\"\"\"\n-Represents a coupon\n-\"\"\"\n-type Coupon {\n-  couponId: Int\n-  uuid: String!\n-  status: Int!\n-  description: String!\n-  discountAmount: Float!\n-  freeShipping: Int!\n-  discountType: String!\n-  coupon: String!\n-  usedTime: Int\n-  targetProducts: TargetProducts\n-  condition: OrderCondition\n-  userCondition: UserCondition\n-  buyxGety: [ByXGetY]\n-  maxUsesTimePerCoupon: Int\n-  maxUsesTimePerCustomer: Int\n-  startDate: DateTime\n-  endDate: DateTime\n-  editUrl: String!\n-  updateApi: String!\n-  deleteApi: String!\n-}\n-\n-\"\"\"\n-Represents a signle product used in the condition of a coupon.\n-\"\"\"\n-type MatchProductFilter {\n-  key: String!\n-  operator: String!\n-  value: JSON\n-  qty: String\n-}\n-\n-\"\"\"\n-Represents the target products of a coupon.\n-\"\"\"\n-type TargetProducts {\n-  maxQty: String\n-  products: [MatchProductFilter]\n-}\n-\n-\"\"\"\n-Represents the condition of a coupon.\n-\"\"\"\n-type OrderCondition {\n-  orderTotal: String\n-  orderQty: String\n-  requiredProducts: [MatchProductFilter]\n-}\n-\n-\"\"\"\n-Represents the buy x get y condition of a coupon.\n-\"\"\"\n-type ByXGetY {\n-  sku: String!\n-  buyQty: String\n-  getQty: String\n-  maxY: String\n-  discount: String\n-}\n-\n-\"\"\"\n-Represents the user condition of a coupon.\n-\"\"\"\n-type UserCondition {\n-  groups: [String]\n-  emails: String\n-  purchased: String\n-}\n-\n-\"\"\"\n-Returns a collection of coupons\n-\"\"\"\n-type CouponCollection {\n-  items: [Coupon]\n-  currentPage: Int!\n-  total: Int!\n-  currentFilters: [Filter]\n-}\n-\n extend type Cart {\n   applyCouponApi: String!\n }\n-\n-extend type Query {\n-  coupon(id: Int): Coupon\n-  coupons(filters: [FilterInput]): CouponCollection\n-}"
        },
        {
            "filename": "packages/evershop/src/modules/promotion/graphql/types/Coupon/Coupon.resolvers.js",
            "diff": "@@ -1,69 +1,6 @@\n-const { GraphQLJSON } = require('graphql-type-json');\n-const { select } = require('@evershop/postgres-query-builder');\n const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n-const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n-const {\n-  getCouponsBaseQuery\n-} = require('../../../services/getCouponsBaseQuery');\n-const { CouponCollection } = require('../../../services/CouponCollection');\n \n module.exports = {\n-  JSON: GraphQLJSON,\n-  Query: {\n-    coupon: async (root, { id }, { pool }) => {\n-      const query = select().from('coupon');\n-      query.where('coupon_id', '=', id);\n-      // if (admin !== true) {\n-      //   query.where('cms_page.status', '=', 1);\n-      // }\n-\n-      const coupon = await query.load(pool);\n-      return coupon ? camelCase(coupon) : null;\n-    },\n-    coupons: async (_, { filters = [] }, { user }) => {\n-      // This field is for admin only\n-      if (!user) {\n-        return [];\n-      }\n-      const query = getCouponsBaseQuery();\n-      const root = new CouponCollection(query);\n-      await root.init({}, { filters });\n-      return root;\n-    }\n-  },\n-  Coupon: {\n-    targetProducts: ({ targetProducts }) => {\n-      if (!targetProducts) {\n-        return null;\n-      } else {\n-        return camelCase(targetProducts);\n-      }\n-    },\n-    condition: ({ condition }) => {\n-      if (!condition) {\n-        return null;\n-      } else {\n-        return camelCase(condition);\n-      }\n-    },\n-    userCondition: ({ userCondition }) => {\n-      if (!userCondition) {\n-        return null;\n-      } else {\n-        return camelCase(userCondition);\n-      }\n-    },\n-    buyxGety: ({ buyxGety }) => {\n-      if (!buyxGety) {\n-        return [];\n-      } else {\n-        return buyxGety.map((item) => camelCase(item));\n-      }\n-    },\n-    editUrl: ({ uuid }) => buildUrl('couponEdit', { id: uuid }),\n-    updateApi: (coupon) => buildUrl('updateCoupon', { id: coupon.uuid }),\n-    deleteApi: (coupon) => buildUrl('deleteCoupon', { id: coupon.uuid })\n-  },\n   Cart: {\n     applyCouponApi: (cart) => buildUrl('couponApply', { cart_id: cart.uuid })\n   }"
        },
        {
            "filename": "packages/evershop/src/modules/promotion/pages/admin/couponEdit+couponNew/CustomerCondition.jsx",
            "diff": "@@ -11,14 +11,19 @@ const customStyles = {\n   })\n };\n \n-export default function CustomerCondition({ coupon = {}, groups }) {\n+export default function CustomerCondition({\n+  coupon = {},\n+  groups: { items: customerGroups }\n+}) {\n   const condition = coupon?.userCondition || {};\n   const selectedGroups = (condition.groups || [])\n     .filter((g) =>\n-      groups.find((group) => parseInt(group.value, 10) === parseInt(g, 10))\n+      customerGroups.find(\n+        (group) => parseInt(group.value, 10) === parseInt(g, 10)\n+      )\n     )\n     .map((g) => {\n-      const group = groups.find(\n+      const group = customerGroups.find(\n         (e) => parseInt(e.value, 10) === parseInt(g, 10)\n       );\n       return {\n@@ -36,7 +41,7 @@ export default function CustomerCondition({ coupon = {}, groups }) {\n             default: (\n               <Select\n                 name=\"user_condition[groups][]\"\n-                options={groups.map((group) => ({\n+                options={customerGroups.map((group) => ({\n                   value: group.value.toString(),\n                   label: group.name\n                 }))}\n@@ -108,17 +113,21 @@ CustomerCondition.propTypes = {\n       purchased: PropTypes.number\n     })\n   }),\n-  groups: PropTypes.arrayOf(\n-    PropTypes.shape({\n-      value: PropTypes.number,\n-      name: PropTypes.string\n-    })\n-  )\n+  groups: PropTypes.shape({\n+    items: PropTypes.arrayOf(\n+      PropTypes.shape({\n+        value: PropTypes.number,\n+        name: PropTypes.string\n+      })\n+    )\n+  })\n };\n \n CustomerCondition.defaultProps = {\n   coupon: {},\n-  groups: []\n+  groups: {\n+    items: []\n+  }\n };\n \n export const layout = {\n@@ -136,8 +145,10 @@ export const query = `\n       }\n     }\n     groups: customerGroups {\n-      value: customerGroupId\n-      name: groupName\n+      items {\n+        value: customerGroupId\n+        name: groupName\n+      }\n     }\n   }\n `;"
        },
        {
            "filename": "packages/evershop/src/modules/promotion/services/DiscountCalculator.js",
            "diff": "@@ -40,6 +40,8 @@ exports.DiscountCalculator = class DiscountCalculator {\n               (cartDiscountAmount * precisionFix -\n                 distributedAmount * precisionFix) /\n               precisionFix;\n+            // Fix for rounding error\n+            sharedDiscount = parseFloat(sharedDiscount.toFixed(precision));\n           } else {\n             const rowTotal = item.getData('final_price') * item.getData('qty');\n             sharedDiscount = toPrice(\n@@ -87,6 +89,8 @@ exports.DiscountCalculator = class DiscountCalculator {\n               (cartDiscountAmount * precisionFix -\n                 distributedAmount * precisionFix) /\n               precisionFix;\n+            // Fix for rounding error\n+            sharedDiscount = parseFloat(sharedDiscount.toFixed(precision));\n           } else {\n             const rowTotal = item.getData('final_price') * item.getData('qty');\n             sharedDiscount = toPrice("
        },
        {
            "filename": "packages/evershop/src/modules/stripe/graphql/types/StripeSetting/StripeSetting.admin.graphql",
            "diff": "@@ -0,0 +1,4 @@\n+extend type Setting {\n+  stripeSecretKey: String\n+  stripeEndpointSecret: String\n+}"
        },
        {
            "filename": "packages/evershop/src/modules/stripe/graphql/types/StripeSetting/StripeSetting.admin.resolvers.js",
            "diff": "@@ -0,0 +1,62 @@\n+const { getConfig } = require('@evershop/evershop/src/lib/util/getConfig');\n+\n+module.exports = {\n+  Setting: {\n+    stripePublishableKey: (setting) => {\n+      const stripeConfig = getConfig('system.stripe', {});\n+      if (stripeConfig.publishableKey) {\n+        return stripeConfig.publishableKey;\n+      }\n+      const stripePublishableKey = setting.find(\n+        (s) => s.name === 'stripePublishableKey'\n+      );\n+      if (stripePublishableKey) {\n+        return stripePublishableKey.value;\n+      } else {\n+        return null;\n+      }\n+    },\n+    stripeSecretKey: (setting, _, { user }) => {\n+      const stripeConfig = getConfig('system.stripe', {});\n+      if (stripeConfig.secretKey) {\n+        return `${stripeConfig.secretKey.substr(\n+          0,\n+          5\n+        )}*******************************`;\n+      }\n+      if (user) {\n+        const stripeSecretKey = setting.find(\n+          (s) => s.name === 'stripeSecretKey'\n+        );\n+        if (stripeSecretKey) {\n+          return stripeSecretKey.value;\n+        } else {\n+          return null;\n+        }\n+      } else {\n+        return null;\n+      }\n+    },\n+    stripeEndpointSecret: (setting, _, { user }) => {\n+      const stripeConfig = getConfig('system.stripe', {});\n+      if (stripeConfig.endpointSecret) {\n+        return `${stripeConfig.endpointSecret.substr(\n+          0,\n+          5\n+        )}*******************************`;\n+      }\n+      if (user) {\n+        const stripeEndpointSecret = setting.find(\n+          (s) => s.name === 'stripeEndpointSecret'\n+        );\n+        if (stripeEndpointSecret) {\n+          return stripeEndpointSecret.value;\n+        } else {\n+          return null;\n+        }\n+      } else {\n+        return null;\n+      }\n+    }\n+  }\n+};"
        },
        {
            "filename": "packages/evershop/src/modules/stripe/graphql/types/StripeSetting/StripeSetting.graphql",
            "diff": "@@ -2,6 +2,4 @@ extend type Setting {\n   stripePaymentStatus: Int\n   stripeDislayName: String\n   stripePublishableKey: String\n-  stripeSecretKey: String\n-  stripeEndpointSecret: String\n }"
        },
        {
            "filename": "packages/evershop/src/modules/stripe/graphql/types/StripeSetting/StripeSetting.resolvers.js",
            "diff": "@@ -39,42 +39,6 @@ module.exports = {\n       } else {\n         return null;\n       }\n-    },\n-    stripeSecretKey: (setting, _, { user }) => {\n-      const stripeConfig = getConfig('system.stripe', {});\n-      if (stripeConfig.secretKey) {\n-        return '*******************************';\n-      }\n-      if (user) {\n-        const stripeSecretKey = setting.find(\n-          (s) => s.name === 'stripeSecretKey'\n-        );\n-        if (stripeSecretKey) {\n-          return stripeSecretKey.value;\n-        } else {\n-          return null;\n-        }\n-      } else {\n-        return null;\n-      }\n-    },\n-    stripeEndpointSecret: (setting, _, { user }) => {\n-      const stripeConfig = getConfig('system.stripe', {});\n-      if (stripeConfig.endpointSecret) {\n-        return '*******************************';\n-      }\n-      if (user) {\n-        const stripeEndpointSecret = setting.find(\n-          (s) => s.name === 'stripeEndpointSecret'\n-        );\n-        if (stripeEndpointSecret) {\n-          return stripeEndpointSecret.value;\n-        } else {\n-          return null;\n-        }\n-      } else {\n-        return null;\n-      }\n     }\n   }\n };"
        },
        {
            "filename": "packages/evershop/src/modules/tax/graphql/types/TaxClass/TaxClass.admin.graphql",
            "diff": "@@ -27,7 +27,17 @@ type TaxClass {\n   addRateApi: String!\n }\n \n+\"\"\"\n+Returns a collection of tax classes.\n+\"\"\"\n+type TaxClassCollection {\n+  items: [TaxClass]\n+  currentPage: Int!\n+  total: Int!\n+  currentFilters: [Filter]\n+}\n+\n extend type Query {\n-  taxClasses: [TaxClass]\n+  taxClasses: TaxClassCollection\n   taxClass(id: String!): TaxClass\n }\n\\ No newline at end of file"
        },
        {
            "filename": "packages/evershop/src/modules/tax/graphql/types/TaxClass/TaxClass.admin.resolvers.js",
            "diff": "@@ -2,16 +2,15 @@ const { select } = require('@evershop/postgres-query-builder');\n const { pool } = require('@evershop/evershop/src/lib/postgres/connection');\n const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n const { buildUrl } = require('@evershop/evershop/src/lib/router/buildUrl');\n+const { TaxClassCollection } = require('../../../services/TaxClassCollection');\n \n module.exports = {\n   Query: {\n-    taxClasses: async () => {\n-      const taxClasses = await select()\n-        .from('tax_class')\n-        .orderBy('tax_class_id', 'DESC')\n-        .execute(pool);\n-      // Parse the provinces field into an array\n-      return taxClasses.map((row) => camelCase(row));\n+    taxClasses: async (_, { filters }) => {\n+      const query = select().from('tax_class');\n+      const root = new TaxClassCollection(query);\n+      await root.init({}, { filters });\n+      return root;\n     },\n     taxClass: async (_, { id }) => {\n       const taxClass = await select()"
        },
        {
            "filename": "packages/evershop/src/modules/tax/pages/admin/taxSetting/TaxSetting.jsx",
            "diff": "@@ -28,23 +28,25 @@ const CountriesQuery = `\n const TaxClassesQuery = `\n   query TaxClasses {\n     taxClasses {\n-      taxClassId\n-      uuid\n-      name\n-      rates {\n-        taxRateId\n+      items {\n+        taxClassId\n         uuid\n         name\n-        rate\n-        isCompound\n-        country\n-        province\n-        postcode\n-        priority\n-        updateApi\n-        deleteApi\n+        rates {\n+          taxRateId\n+          uuid\n+          name\n+          rate\n+          isCompound\n+          country\n+          province\n+          postcode\n+          priority\n+          updateApi\n+          deleteApi\n+        }\n+        addRateApi\n       }\n-      addRateApi\n     }\n   }\n `;\n@@ -124,10 +126,12 @@ export default function TaxSetting({\n                           text: 'Higest tax rate based on cart items'\n                         }\n                       ].concat(\n-                        taxClassesQueryData.data.taxClasses.map((taxClass) => ({\n+                        taxClassesQueryData.data.taxClasses.items.map(\n+                          (taxClass) => ({\n                             value: taxClass.taxClassId,\n                             text: taxClass.name\n-                          })) || []\n+                          })\n+                        ) || []\n                       )}\n                     />\n                   </div>\n@@ -159,7 +163,7 @@ export default function TaxSetting({\n           </Card>\n           <Card title=\"Tax classes\">\n             <TaxClasses\n-              classes={taxClassesQueryData.data.taxClasses}\n+              classes={taxClassesQueryData.data.taxClasses.items}\n               countries={countriesQueryData.data.countries}\n               getTaxClasses={reexecuteQuery}\n             />"
        },
        {
            "filename": "packages/evershop/src/modules/tax/services/TaxClassCollection.js",
            "diff": "@@ -0,0 +1,91 @@\n+const { camelCase } = require('@evershop/evershop/src/lib/util/camelCase');\n+const { pool } = require('@evershop/evershop/src/lib/postgres/connection');\n+\n+class TaxClassCollection {\n+  constructor(baseQuery) {\n+    this.baseQuery = baseQuery;\n+  }\n+\n+  async init(args, { filters = [] }) {\n+    const currentFilters = [];\n+    // Name filter\n+    const nameFilter = filters.find((f) => f.key === 'name');\n+    if (nameFilter) {\n+      this.baseQuery.andWhere(\n+        'tax_class.name',\n+        'ILIKE',\n+        `%${nameFilter.value}%`\n+      );\n+      currentFilters.push({\n+        key: 'name',\n+        operation: '=',\n+        value: nameFilter.value\n+      });\n+    }\n+\n+    const sortBy = filters.find((f) => f.key === 'sortBy');\n+    const sortOrder = filters.find(\n+      (f) =>\n+        f.key === 'sortOrder' &&\n+        ['ASC', 'DESC', 'asc', 'desc'].includes(f.value)\n+    ) || { value: 'DESC' };\n+    if (sortBy && sortBy.value === 'name') {\n+      this.baseQuery.orderBy('tax_class.name', sortOrder.value);\n+      currentFilters.push({\n+        key: 'sortBy',\n+        operation: '=',\n+        value: sortBy.value\n+      });\n+    } else {\n+      this.baseQuery.orderBy('tax_class.tax_class_id', 'DESC');\n+    }\n+    if (sortOrder.key) {\n+      currentFilters.push({\n+        key: 'sortOrder',\n+        operation: '=',\n+        value: sortOrder.value\n+      });\n+    }\n+\n+    // Clone the main query for getting total right before doing the paging\n+    const totalQuery = this.baseQuery.clone();\n+    totalQuery.select('COUNT(*)', 'total');\n+    totalQuery.removeOrderBy();\n+    // Paging\n+    const page = filters.find((f) => f.key === 'page') || { value: 1 };\n+    const limit = filters.find((f) => f.key === 'limit') || { value: 20 }; // TODO: Get from the config\n+    currentFilters.push({\n+      key: 'page',\n+      operation: '=',\n+      value: page.value\n+    });\n+    currentFilters.push({\n+      key: 'limit',\n+      operation: '=',\n+      value: limit.value\n+    });\n+    this.baseQuery.limit(\n+      (page.value - 1) * parseInt(limit.value, 10),\n+      parseInt(limit.value, 10)\n+    );\n+    this.currentFilters = currentFilters;\n+    this.totalQuery = totalQuery;\n+  }\n+\n+  async items() {\n+    const items = await this.baseQuery.execute(pool);\n+    return items.map((row) => camelCase(row));\n+  }\n+\n+  async total() {\n+    // Call items to get the total\n+    const total = await this.totalQuery.execute(pool);\n+    return total[0].total;\n+  }\n+\n+  currentFilters() {\n+    return this.currentFilters;\n+  }\n+}\n+\n+module.exports.TaxClassCollection = TaxClassCollection;"
        }
    ],
    "commitTime": "2023-10-01 09:36:51"
}