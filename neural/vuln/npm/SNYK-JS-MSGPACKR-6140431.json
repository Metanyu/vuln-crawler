{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "NONE",
        "integrity": "NONE",
        "availability": "HIGH"
    },
    "credit": [
        "o5k"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 6.5,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "LOW",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "NONE",
                "integrity": "NONE",
                "availability": "HIGH"
            },
            "severity": "medium"
        }
    ],
    "cvssScore": 5.9,
    "disclosureTime": "2023-12-28 16:43:05",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.06913",
        "probability": "0.00043"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-JS-MSGPACKR-6140431",
    "identifiers": {
        "CVE": [
            "CVE-2023-52079"
        ],
        "CWE": [
            "CWE-400"
        ]
    },
    "language": "js",
    "malicious": false,
    "packageManager": "npm",
    "publicationTime": "2023-12-29 08:31:59",
    "remediation": "Upgrade msgpackr to version 1.10.1 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Denial of Service (DoS)",
    "vulnDescription": {
        "Overview": "msgpackr is an Ultra-fast MessagePack implementation with extensions for records and structured cloning Affected versions of this package are vulnerable to Denial of Service (DoS) via crafted MessagePack messages. A user can trigger stuck threads by crafting messages that keep the decoder stuck in a loop. "
    },
    "source_code": [
        {
            "filename": "unpack.js",
            "diff": "@@ -914,7 +914,7 @@ function readKey() {\n \t\t\treturn readFixedString(length)\n \t} else { // not cacheable, go back and do a standard read\n \t\tposition--\n-\t\treturn read().toString()\n+\t\treturn asSafeString(read())\n \t}\n \tlet key = ((length << 5) ^ (length > 1 ? dataView.getUint16(position) : length > 0 ? src[position] : 0)) & 0xfff\n \tlet entry = keyCache[key]\n@@ -966,9 +966,15 @@ function readKey() {\n \treturn entry.string = readFixedString(length)\n }\n \n+function asSafeString(property) {\n+\tif (typeof property === 'string') return property;\n+\tif (typeof property === 'number') return property.toString();\n+\tthrow new Error('Invalid property type for record', typeof property);\n+}\n // the registration of the record definition extension (as \"r\")\n const recordDefinition = (id, highByte) => {\n-\tlet structure = read().map(property => property.toString()) // ensure that all keys are strings and that the array is mutable\n+\tlet structure = read().map(asSafeString) // ensure that all keys are strings and\n+\t// that the array is mutable\n \tlet firstByte = id\n \tif (highByte !== undefined) {\n \t\tid = id < 32 ? -((highByte << 5) + id) : ((highByte << 5) + id)"
        }
    ],
    "commitTime": "2023-12-26 02:59:59"
}