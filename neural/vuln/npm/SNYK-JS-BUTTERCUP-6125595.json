{
    "CVSSv3": {
        "CVSS": "3.1",
        "E": "P",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "LOW",
        "integrity": "NONE",
        "availability": "NONE"
    },
    "credit": [
        "perry-mitchell"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 5.3,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "LOW",
                "integrity": "NONE",
                "availability": "NONE"
            },
            "severity": "medium"
        }
    ],
    "cvssScore": 5.3,
    "disclosureTime": "2023-09-08 00:31:02",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.13990",
        "probability": "0.00046"
    },
    "exploitMaturity": "Proof of Concept",
    "id": "SNYK-JS-BUTTERCUP-6125595",
    "identifiers": {
        "CVE": [
            "CVE-2023-41646"
        ],
        "CWE": [
            "CWE-916"
        ]
    },
    "language": "js",
    "malicious": false,
    "packageManager": "npm",
    "publicationTime": "2023-12-14 13:23:29",
    "remediation": "Upgrade buttercup to version 7.4.0 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Use of Password Hash Instead of Password for Authentication",
    "vulnDescription": {
        "Overview": "buttercup is an A NodeJS password vault. Affected versions of this package are vulnerable to Use of Password Hash Instead of Password for Authentication via accessing the /vaults.json/ file. An attacker can obtain the hash of the master password by accessing this file. ",
        "PoC": " cat ~/local/share/Buttercup-nodejs/vaults.json "
    },
    "source_code": [
        {
            "filename": "source/core/VaultManager.ts",
            "diff": "@@ -165,6 +165,7 @@ export class VaultManager extends EventEmitter {\n     /**\n      * Fetch all currently available Live Snapshots of vaults\n      * @returns An array of snapshot objects\n+     * @deprecated Will be removed in next major - insecure\n      */\n     getLiveSnapshots(): Array<VaultLiveSnapshot> {\n         return this.unlockedSources.map((source) => source.getLiveSnapshot());\n@@ -353,6 +354,7 @@ export class VaultManager extends EventEmitter {\n     /**\n      * Restore all sources from snapshots that were taken previously\n      * @param snapshots An array of snapshot objects\n+     * @deprecated Will be removed in next major - insecure\n      */\n     async restoreLiveSnapshots(snapshots: Array<VaultLiveSnapshot>) {\n         await Promise.all("
        },
        {
            "filename": "source/core/VaultSource.ts",
            "diff": "@@ -3,7 +3,8 @@ import { ChannelQueue } from \"@buttercup/channel-queue\";\n import { Layerr } from \"layerr\";\n import { Vault } from \"./Vault.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { getCredentials, setCredentials } from \"../credentials/channel.js\";\n+import { getCredentials, setCredentials } from \"../credentials/memory/credentials.js\";\n+import { getMasterPassword, setMasterPassword } from \"../credentials/memory/password.js\";\n import { getUniqueID } from \"../tools/encoding.js\";\n import {\n     getSourceOfflineArchive,\n@@ -17,8 +18,8 @@ import { TextDatasource } from \"../datasources/TextDatasource.js\";\n import { VaultManager } from \"./VaultManager.js\";\n import { convertFormatAVault } from \"../io/formatB/conversion.js\";\n import { VaultFormatB } from \"../index.common.js\";\n-import { VaultFormatID, VaultLiveSnapshot, VaultSourceID, VaultSourceStatus } from \"../types.js\";\n import { getFormatForID } from \"../io/formatRouter.js\";\n+import { VaultFormatID, VaultLiveSnapshot, VaultSourceID, VaultSourceStatus } from \"../types.js\";\n \n interface StateChangeEnqueuedFunction {\n     (): void | Promise<any>;\n@@ -272,8 +273,8 @@ export class VaultSource extends EventEmitter {\n             await this.unlock(Credentials.fromPassword(oldPassword));\n         } else {\n             // Unlocked, so check password..\n-            const credentials = getCredentials((<Credentials>this._credentials).id);\n-            if (credentials.masterPassword !== oldPassword) {\n+            const masterPassword = getMasterPassword((<Credentials>this._credentials).id);\n+            if (masterPassword !== oldPassword) {\n                 throw new Error(\"Old password does not match current unlocked instance value\");\n             }\n             // ..and then update\n@@ -296,8 +297,7 @@ export class VaultSource extends EventEmitter {\n             this._credentials as Credentials,\n             oldPassword\n         );\n-        const newCreds = getCredentials(newCredentials.id);\n-        newCreds.masterPassword = newPassword;\n+        setMasterPassword(newCredentials.id, newPassword);\n         await this._updateVaultCredentials(newCredentials);\n         // Re-lock if it was locked earlier\n         if (wasLocked) {\n@@ -385,19 +385,23 @@ export class VaultSource extends EventEmitter {\n     /**\n      * Get a live snapshot of the current unlocked state\n      * @returns A snapshot object\n+     * @deprecated Will be removed in next major - insecure\n      */\n     getLiveSnapshot(): VaultLiveSnapshot {\n         if (this.status !== VaultSourceStatus.Unlocked) {\n             throw new Layerr(\"Not possible to fetch live snapshot: Vault is not unlocked\");\n         }\n-        const credentials = getCredentials((this._credentials as Credentials).id);\n+        const credentialsID = (this._credentials as Credentials).id;\n+        const credentials = getCredentials(credentialsID);\n         if (!credentials) {\n             throw new Layerr(\"Failed fetching live snapshot: Invalid credentials data\");\n         }\n+        const masterPassword = getMasterPassword(credentialsID);\n         return {\n             credentials,\n             formatID: this.vault._format.getFormat().getFormatID(),\n             formatSource: this.vault._format.source,\n+            masterPassword,\n             sourceID: this.id,\n             version: \"1a\"\n         };\n@@ -533,6 +537,7 @@ export class VaultSource extends EventEmitter {\n     /**\n      * Restore unlocked state from a live snapshot\n      * @param snapshot The snapshot taken previously\n+     * @deprecated Will be removed in next major - insecure\n      */\n     async restoreFromLiveSnapshot(snapshot: VaultLiveSnapshot): Promise<void> {\n         if (this.status !== VaultSourceStatus.Locked) {\n@@ -546,12 +551,12 @@ export class VaultSource extends EventEmitter {\n         // Setup credentials and datasource\n         const credentials = (this._credentials = new Credentials(\n             snapshot.credentials.data,\n-            snapshot.credentials.masterPassword\n+            snapshot.masterPassword\n         ));\n         setCredentials(credentials.id, snapshot.credentials);\n         // Initialise datasource\n         const datasource = (this._datasource = credentialsToDatasource(\n-            Credentials.fromCredentials(credentials, snapshot.credentials.masterPassword)\n+            Credentials.fromCredentials(credentials, snapshot.masterPassword)\n         ));\n         datasource.sourceID = this.id;\n         // Setup vault\n@@ -650,7 +655,7 @@ export class VaultSource extends EventEmitter {\n                 `Failed unlocking source: Source in invalid state (${this.status}): ${this.id}`\n             );\n         }\n-        const { masterPassword } = getCredentials(vaultCredentials.id);\n+        const masterPassword = getMasterPassword(vaultCredentials.id);\n         const originalCredentials = this._credentials;\n         this._status = VaultSource.STATUS_PENDING;\n         await this._enqueueStateChange(async () => {\n@@ -813,7 +818,7 @@ export class VaultSource extends EventEmitter {\n                 `Failed updating source credentials: Source is not unlocked: ${this.id}`\n             );\n         }\n-        const { masterPassword } = getCredentials((<Credentials>this._credentials).id);\n+        const masterPassword = getMasterPassword((<Credentials>this._credentials).id);\n         this._credentials = Credentials.fromCredentials(\n             this._datasource.credentials,\n             masterPassword"
        },
        {
            "filename": "source/credentials/Credentials.ts",
            "diff": "@@ -1,6 +1,7 @@\n import { generateUUID } from \"../tools/uuid.js\";\n-import { credentialsAllowsPurpose, getCredentials, setCredentials } from \"./channel.js\";\n+import { credentialsAllowsPurpose, getCredentials, setCredentials } from \"./memory/credentials.js\";\n import { getSharedAppEnv } from \"../env/appEnv.js\";\n+import { getMasterPassword, setMasterPassword } from \"./memory/password.js\";\n import { CredentialsData, CredentialsPayload, DatasourceConfiguration } from \"../types.js\";\n \n /**\n@@ -85,7 +86,8 @@ export class Credentials {\n             throw new Error(\"Master password is required for credentials cloning\");\n         }\n         const credentialsData = getCredentials(credentials.id);\n-        if (credentialsData.masterPassword !== masterPassword) {\n+        const credentialsPassword = getMasterPassword(credentials.id);\n+        if (credentialsPassword !== masterPassword) {\n             throw new Error(\"Master password does not match that of the credentials to be cloned\");\n         }\n         const newData = JSON.parse(JSON.stringify(credentialsData.data));\n@@ -134,29 +136,27 @@ export class Credentials {\n      * @param masterPassword The password for decryption\n      * @returns A promise that resolves with the new instance\n      */\n-    static fromSecureString(content: string, masterPassword: string): Promise<Credentials> {\n+    static async fromSecureString(content: string, masterPassword: string): Promise<Credentials> {\n         const decrypt = getSharedAppEnv().getProperty(\"crypto/v1/decryptText\");\n-        return decrypt(unsignEncryptedContent(content), masterPassword)\n-            .then((decryptedContent: string) => JSON.parse(decryptedContent))\n-            .then((credentialsData: any) => {\n-                // Handle compatibility updates for legacy credentials\n-                if (credentialsData.datasource) {\n-                    if (typeof credentialsData.datasource === \"string\") {\n-                        credentialsData.datasource = JSON.parse(credentialsData.datasource);\n-                    }\n-                    // Move username and password INTO the datasource config, as\n-                    // they relate to the remote connection/source\n-                    if (credentialsData.username) {\n-                        credentialsData.datasource.username = credentialsData.username;\n-                        delete credentialsData.username;\n-                    }\n-                    if (credentialsData.password) {\n-                        credentialsData.datasource.password = credentialsData.password;\n-                        delete credentialsData.password;\n-                    }\n-                }\n-                return new Credentials(credentialsData, masterPassword);\n-            });\n+        const decryptedContent = await decrypt(unsignEncryptedContent(content), masterPassword);\n+        const credentialsData = JSON.parse(decryptedContent);\n+        // Handle compatibility updates for legacy credentials\n+        if (credentialsData.datasource) {\n+            if (typeof credentialsData.datasource === \"string\") {\n+                credentialsData.datasource = JSON.parse(credentialsData.datasource);\n+            }\n+            // Move username and password INTO the datasource config, as\n+            // they relate to the remote connection/source\n+            if (credentialsData.username) {\n+                credentialsData.datasource.username = credentialsData.username;\n+                delete credentialsData.username;\n+            }\n+            if (credentialsData.password) {\n+                credentialsData.datasource.password = credentialsData.password;\n+                delete credentialsData.password;\n+            }\n+        }\n+        return new Credentials(credentialsData, masterPassword);\n     }\n \n     /**\n@@ -190,10 +190,10 @@ export class Credentials {\n         });\n         setCredentials(id, {\n             data: obj,\n-            masterPassword,\n             purposes: Credentials.allPurposes(),\n             open: false\n         });\n+        setMasterPassword(id, masterPassword);\n     }\n \n     /**\n@@ -279,7 +279,8 @@ export class Credentials {\n             throw new Error(\"Credential purposes don't allow for secure exports\");\n         }\n         const encrypt = getSharedAppEnv().getProperty(\"crypto/v1/encryptText\");\n-        const { data, masterPassword } = getCredentials(this.id);\n+        const { data } = getCredentials(this.id);\n+        const masterPassword = getMasterPassword(this.id);\n         if (typeof masterPassword !== \"string\") {\n             throw new Error(\n                 \"Cannot convert Credentials to string: master password was not set or is invalid\""
        },
        {
            "filename": "source/credentials/memory/credentials.ts",
            "diff": "@@ -1,6 +1,6 @@\n-import { CredentialsPayload } from \"../types.js\";\n+import { CredentialsPayload } from \"../../types.js\";\n \n-const __store = {};\n+const __store: Record<string, CredentialsPayload | null> = {};\n \n export function credentialsAllowsPurpose(id: string, purpose: string): boolean {\n     const { purposes } = getCredentials(id);"
        },
        {
            "filename": "source/credentials/memory/password.ts",
            "diff": "@@ -0,0 +1,14 @@\n+const __store: Record<string, string | null> = {};\n+\n+export function getMasterPassword(id: string): string | null {\n+    return __store[id] || null;\n+}\n+\n+export function removeMasterPassword(id: string) {\n+    __store[id] = null;\n+    delete __store[id];\n+}\n+\n+export function setMasterPassword(id: string, value: string) {\n+    __store[id] = value;\n+}"
        },
        {
            "filename": "source/datasources/DropboxDatasource.ts",
            "diff": "@@ -1,7 +1,7 @@\n import { TextDatasource } from \"./TextDatasource.js\";\n import { fireInstantiationHandlers, registerDatasource } from \"./register.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n import { getSharedAppEnv } from \"../env/appEnv.js\";\n import {\n     DatasourceConfigurationDropbox,"
        },
        {
            "filename": "source/datasources/FileDatasource.ts",
            "diff": "@@ -4,7 +4,7 @@ import pify from \"pify\";\n import { TextDatasource } from \"./TextDatasource.js\";\n import { fireInstantiationHandlers, registerDatasource } from \"./register.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n import { ATTACHMENT_EXT } from \"../tools/attachments.js\";\n import {\n     AttachmentDetails,"
        },
        {
            "filename": "source/datasources/GoogleDriveDatasource.ts",
            "diff": "@@ -4,8 +4,8 @@ import DatasourceAuthManager from \"./DatasourceAuthManager.js\";\n import { TextDatasource } from \"./TextDatasource.js\";\n import { fireInstantiationHandlers, registerDatasource } from \"./register.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n-import { DatasourceConfigurationGoogleDrive } from \"../types.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n+import { DatasourceConfigurationGoogleDrive, DatasourceLoadedData, History } from \"../types.js\";\n \n const DATASOURCE_TYPE = \"googledrive\";\n \n@@ -23,7 +23,7 @@ export default class GoogleDriveDatasource extends TextDatasource {\n \n     /**\n      * Datasource for Google Drive connections\n-     * @param {Credentials} credentials The credentials instance with which to\n+     * @param credentials The credentials instance with which to\n      *  configure the datasource with\n      */\n     constructor(credentials: Credentials) {\n@@ -57,11 +57,11 @@ export default class GoogleDriveDatasource extends TextDatasource {\n \n     /**\n      * Load an archive from the datasource\n-     * @param {Credentials} credentials The credentials for decryption\n-     * @returns {Promise.<LoadedVaultData>} A promise that resolves archive history\n+     * @param credentials The credentials for decryption\n+     * @returns A promise that resolves archive history\n      * @memberof GoogleDriveDatasource\n      */\n-    load(credentials, hasAuthed = false) {\n+    load(credentials: Credentials, hasAuthed: boolean = false): Promise<DatasourceLoadedData> {\n         if (this.hasContent) {\n             return super.load(credentials);\n         }\n@@ -89,12 +89,12 @@ export default class GoogleDriveDatasource extends TextDatasource {\n \n     /**\n      * Save an archive using the datasource\n-     * @param {Array.<String>} history The archive history to save\n-     * @param {Credentials} credentials The credentials to save with\n-     * @returns {Promise} A promise that resolves when saving has completed\n+     * @param history The archive history to save\n+     * @param credentials The credentials to save with\n+     * @returns A promise that resolves when saving has completed\n      * @memberof GoogleDriveDatasource\n      */\n-    save(history, credentials, hasAuthed = false) {\n+    save(history: History, credentials: Credentials, hasAuthed: boolean = false) {\n         return super\n             .save(history, credentials)\n             .then((encryptedContent) => this.client.putFileContents(encryptedContent, this.fileID))\n@@ -116,7 +116,7 @@ export default class GoogleDriveDatasource extends TextDatasource {\n \n     /**\n      * Whether or not the datasource supports bypassing remote fetch operations\n-     * @returns {Boolean} True if content can be set to bypass fetch operations,\n+     * @returns True if content can be set to bypass fetch operations,\n      *  false otherwise\n      * @memberof GoogleDriveDatasource\n      */"
        },
        {
            "filename": "source/datasources/MemoryDatasource.ts",
            "diff": "@@ -1,7 +1,7 @@\n import { TextDatasource } from \"./TextDatasource.js\";\n import { fireInstantiationHandlers, registerDatasource } from \"./register.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n import {\n     AttachmentDetails,\n     BufferLike,"
        },
        {
            "filename": "source/datasources/TextDatasource.ts",
            "diff": "@@ -1,7 +1,7 @@\n import EventEmitter from \"eventemitter3\";\n import hash from \"hash.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { credentialsAllowsPurpose, getCredentials } from \"../credentials/channel.js\";\n+import { credentialsAllowsPurpose, getCredentials } from \"../credentials/memory/credentials.js\";\n import { detectFormat, getFormatForID } from \"../io/formatRouter.js\";\n import { fireInstantiationHandlers, registerDatasource } from \"./register.js\";\n import {"
        },
        {
            "filename": "source/datasources/WebDAVDatasource.ts",
            "diff": "@@ -4,7 +4,7 @@ import { TextDatasource } from \"./TextDatasource.js\";\n import { fireInstantiationHandlers, registerDatasource } from \"./register.js\";\n import { getSharedAppEnv } from \"../env/appEnv.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n import { ATTACHMENT_EXT } from \"../tools/attachments.js\";\n import {\n     AttachmentDetails,"
        },
        {
            "filename": "source/datasources/register.ts",
            "diff": "@@ -1,4 +1,5 @@\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n+import { getMasterPassword } from \"../credentials/memory/password.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n import { TextDatasource } from \"./TextDatasource.js\";\n \n@@ -61,9 +62,9 @@ export function prepareDatasourceCredentials(\n     typeOverride: string = null\n ): Credentials {\n     const {\n-        data: { datasource },\n-        masterPassword\n+        data: { datasource }\n     } = getCredentials(credentials.id);\n+    const masterPassword = getMasterPassword(credentials.id);\n     const datasourceType = typeOverride || datasource.type || \"\";\n     const { open = false } = __datasourceFlags[datasourceType] || {};\n     if (!open) {"
        },
        {
            "filename": "source/io/VaultFormatA.ts",
            "diff": "@@ -43,7 +43,7 @@ import VaultComparator from \"./formatA/VaultComparator.js\";\n import { getSharedAppEnv } from \"../env/appEnv.js\";\n import { decodeStringValue, isEncoded } from \"../tools/encoding.js\";\n import { generateUUID } from \"../tools/uuid.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getMasterPassword } from \"../credentials/memory/password.js\";\n import { historyArrayToString, historyStringToArray } from \"./common.js\";\n import { smartStripRemovedAssets } from \"./formatA/merge.js\";\n import {\n@@ -99,7 +99,7 @@ export class VaultFormatA extends VaultFormat {\n     static async encodeRaw(rawContent: History, credentials: Credentials): Promise<string> {\n         const compress = getSharedAppEnv().getProperty(\"compression/v1/compressText\");\n         const encrypt = getSharedAppEnv().getProperty(\"crypto/v1/encryptText\");\n-        const { masterPassword } = getCredentials(credentials.id);\n+        const masterPassword = getMasterPassword(credentials.id);\n         return Promise.resolve()\n             .then(() => historyArrayToString(rawContent))\n             .then((history) => compress(history))\n@@ -152,7 +152,7 @@ export class VaultFormatA extends VaultFormat {\n     static parseEncrypted(encryptedContent: string, credentials: Credentials): Promise<History> {\n         const decompress = getSharedAppEnv().getProperty(\"compression/v1/decompressText\");\n         const decrypt = getSharedAppEnv().getProperty(\"crypto/v1/decryptText\");\n-        const { masterPassword } = getCredentials(credentials.id);\n+        const masterPassword = getMasterPassword(credentials.id);\n         return Promise.resolve()\n             .then(() => {\n                 if (!hasValidSignature(encryptedContent)) {"
        },
        {
            "filename": "source/io/VaultFormatB.ts",
            "diff": "@@ -2,7 +2,7 @@ import { ORPHANS_GROUP_TITLE, VaultFormat } from \"./VaultFormat.js\";\n import { Vault } from \"../core/Vault.js\";\n import { generateUUID } from \"../tools/uuid.js\";\n import { getSharedAppEnv } from \"../env/appEnv.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getMasterPassword } from \"../credentials/memory/password.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n import { historyArrayToString, historyStringToArray } from \"./common.js\";\n import {\n@@ -51,7 +51,7 @@ export class VaultFormatB extends VaultFormat {\n     static encodeRaw(rawContent: History, credentials: Credentials): Promise<string> {\n         const compress = getSharedAppEnv().getProperty(\"compression/v2/compressText\");\n         const encrypt = getSharedAppEnv().getProperty(\"crypto/v1/encryptText\");\n-        const { masterPassword } = getCredentials(credentials.id);\n+        const masterPassword = getMasterPassword(credentials.id);\n         return Promise.resolve()\n             .then(() => historyArrayToString(rawContent))\n             .then((history) => compress(history))\n@@ -78,7 +78,7 @@ export class VaultFormatB extends VaultFormat {\n     static parseEncrypted(encryptedContent: string, credentials: Credentials): Promise<History> {\n         const decompress = getSharedAppEnv().getProperty(\"compression/v2/decompressText\");\n         const decrypt = getSharedAppEnv().getProperty(\"crypto/v1/decryptText\");\n-        const { masterPassword } = getCredentials(credentials.id);\n+        const masterPassword = getMasterPassword(credentials.id);\n         return Promise.resolve()\n             .then(() => {\n                 if (!hasValidSignature(encryptedContent)) {"
        },
        {
            "filename": "source/tools/attachments.ts",
            "diff": "@@ -1,18 +1,18 @@\n import { getSharedAppEnv } from \"../env/appEnv.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getMasterPassword } from \"../credentials/memory/password.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n import { BufferLike } from \"../types.js\";\n \n export const ATTACHMENT_EXT = \"bcatt\";\n \n export function decryptAttachment(buff: BufferLike, credentials: Credentials): Promise<BufferLike> {\n-    const { masterPassword } = getCredentials(credentials.id);\n+    const masterPassword = getMasterPassword(credentials.id);\n     const decrypt = getSharedAppEnv().getProperty(\"crypto/v2/decryptBuffer\");\n     return decrypt(buff, masterPassword);\n }\n \n export function encryptAttachment(buff: BufferLike, credentials: Credentials): Promise<BufferLike> {\n-    const { masterPassword } = getCredentials(credentials.id);\n+    const masterPassword = getMasterPassword(credentials.id);\n     const encrypt = getSharedAppEnv().getProperty(\"crypto/v2/encryptBuffer\");\n     return encrypt(buff, masterPassword);\n }"
        },
        {
            "filename": "source/types.ts",
            "diff": "@@ -17,7 +17,6 @@ export interface CredentialsData {\n \n export interface CredentialsPayload {\n     data: CredentialsData;\n-    masterPassword: string | null;\n     purposes: Array<string>;\n     open: boolean;\n }\n@@ -262,6 +261,7 @@ export interface VaultLiveSnapshot {\n     credentials: CredentialsPayload;\n     formatID: VaultFormatID;\n     formatSource: FormatAVault | FormatBVault;\n+    masterPassword: string;\n     sourceID: VaultSourceID;\n     version: \"1a\";\n }"
        },
        {
            "filename": "source/web/LocalFileDatasource.ts",
            "diff": "@@ -1,6 +1,6 @@\n import { fireInstantiationHandlers, registerDatasource } from \"../datasources/register.js\";\n import { TextDatasource } from \"../datasources/TextDatasource.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n import { buildClient } from \"./localFileClient.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n import {"
        },
        {
            "filename": "source/web/LocalStorageDatasource.ts",
            "diff": "@@ -1,7 +1,7 @@\n import { TextDatasource } from \"../datasources/TextDatasource.js\";\n import { fireInstantiationHandlers, registerDatasource } from \"../datasources/register.js\";\n import { Credentials } from \"../credentials/Credentials.js\";\n-import { getCredentials } from \"../credentials/channel.js\";\n+import { getCredentials } from \"../credentials/memory/credentials.js\";\n import LocalStorageInterface from \"./LocalStorageInterface.js\";\n import {\n     CredentialsPayload,"
        },
        {
            "filename": "test/integration/core/VaultSource.spec.js",
            "diff": "@@ -93,8 +93,8 @@ describe(\"VaultSource\", function () {\n                     it(\"can collect relevant data\", function () {\n                         const snapshot = this.vaultSource.getLiveSnapshot();\n                         expect(snapshot)\n-                            .to.have.nested.property(\"credentials.masterPassword\")\n-                            .that.is.a(\"string\");\n+                            .to.have.nested.property(\"credentials.data\")\n+                            .that.is.an(\"object\");\n                         expect(snapshot).to.have.property(\"formatID\", Format.getFormatID());\n                         expect(snapshot).to.have.property(\"version\", \"1a\");\n                     });"
        },
        {
            "filename": "test/integration/openCredentials.spec.js",
            "diff": "@@ -67,14 +67,20 @@ describe(\"VaultSource with custom datasource\", function () {\n \n     it(\"provides open credentials on unlock\", function () {\n         const { _datasource: datasource } = this.vaultSourceOpen;\n-        expect(datasource.initData).to.have.property(\"masterPassword\", \"test\");\n+        expect(datasource.initData).to.have.nested.property(\n+            \"data.datasource.type\",\n+            this.datasourceTypeOpen\n+        );\n         expect(datasource.initData).to.have.property(\"open\", true);\n     });\n \n     it(\"provides open credentials on load\", async function () {\n         await this.vaultSourceOpen.localDiffersFromRemote();\n         const { _datasource: datasource } = this.vaultSourceOpen;\n-        expect(datasource.loadData).to.have.property(\"masterPassword\", \"test\");\n+        expect(datasource.loadData).to.have.nested.property(\n+            \"data.datasource.type\",\n+            this.datasourceTypeOpen\n+        );\n         expect(datasource.loadData).to.have.property(\"open\", true);\n     });\n "
        },
        {
            "filename": "test/unit/datasources/GoogleDriveDatasource.spec.js",
            "diff": "@@ -1,6 +1,6 @@\n import { expect } from \"chai\";\n import { Credentials, GoogleDriveDatasource } from \"../../../dist/node/index.js\";\n-import { getCredentials } from \"../../../dist/node/credentials/channel.js\";\n+import { getCredentials } from \"../../../dist/node/credentials/memory/credentials.js\";\n \n describe(\"datasources/GoogleDriveDatasource\", function () {\n     beforeEach(function () {"
        }
    ],
    "commitTime": "2023-12-09 20:15:47"
}