{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "LOW",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "NONE",
        "integrity": "LOW",
        "availability": "NONE"
    },
    "credit": [
        "roie-shmuel"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 4.3,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "LOW",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "NONE",
                "integrity": "LOW",
                "availability": "NONE"
            },
            "severity": "medium"
        }
    ],
    "cvssScore": 4.3,
    "disclosureTime": "2023-12-12 18:44:01",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.06909",
        "probability": "0.00043"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-DOTNET-UMBRACOCMSWEB-6123906",
    "identifiers": {
        "CVE": [
            "CVE-2023-48227"
        ],
        "CWE": [
            "CWE-863"
        ]
    },
    "language": "dotnet",
    "malicious": false,
    "packageManager": "nuget",
    "publicationTime": "2023-12-13 13:26:20",
    "remediation": "Upgrade UmbracoCms.Web to version 8.18.10 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Incorrect Authorization",
    "vulnDescription": {
        "Overview": "UmbracoCms.Web is an ASP.NET CMS. Affected versions of this package are vulnerable to Incorrect Authorization due to improper authorization mechanism. An attacker with only send for approval permissions could exploit this weakness to publish content without the required publish permissions. "
    },
    "source_code": [
        {
            "filename": "src/Umbraco.Core/Security/ContentPermissionsHelper.cs",
            "diff": "@@ -100,29 +100,32 @@ public enum ContentAccess\n             if (userService == null) throw new ArgumentNullException(\"userService\");\n             if (entityService == null) throw new ArgumentNullException(\"entityService\");\n \n-            bool? hasPathAccess = null;\n+            bool hasPathAccess;\n             entity = null;\n \n             if (nodeId == Constants.System.Root)\n                 hasPathAccess = user.HasContentRootAccess(entityService, appCaches);\n             else if (nodeId == Constants.System.RecycleBinContent)\n                 hasPathAccess = user.HasContentBinAccess(entityService, appCaches);\n-\n-            if (hasPathAccess.HasValue)\n-                return hasPathAccess.Value ? ContentAccess.Granted : ContentAccess.Denied;\n-\n-            entity = entityService.Get(nodeId, UmbracoObjectTypes.Document);\n-            if (entity == null) return ContentAccess.NotFound;\n-            hasPathAccess = user.HasContentPathAccess(entity, entityService, appCaches);\n+            else\n+            {\n+                entity = entityService.Get(nodeId, UmbracoObjectTypes.Document);\n+                if (entity == null)\n+                    return ContentAccess.NotFound;\n+                hasPathAccess = user.HasContentPathAccess(entity, entityService, appCaches);\n+            }\n \n             if (hasPathAccess == false)\n                 return ContentAccess.Denied;\n \n             if (permissionsToCheck == null || permissionsToCheck.Length == 0)\n                 return ContentAccess.Granted;\n \n+            // if there is no entity for this id, then just use the id as the path (i.e. -1 or -20)\n+            var path = entity == null ? nodeId.ToString() : entity.Path;\n+\n             //get the implicit/inherited permissions for the user for this path\n-            return CheckPermissionsPath(entity.Path, user, userService, permissionsToCheck)\n+            return CheckPermissionsPath(path, user, userService, permissionsToCheck)\n                 ? ContentAccess.Granted\n                 : ContentAccess.Denied;\n         }\n@@ -153,37 +156,39 @@ public enum ContentAccess\n             if (contentService == null) throw new ArgumentNullException(\"contentService\");\n             if (entityService == null) throw new ArgumentNullException(\"entityService\");\n \n-            bool? hasPathAccess = null;\n+            bool hasPathAccess;\n             contentItem = null;\n \n             if (nodeId == Constants.System.Root)\n                 hasPathAccess = user.HasContentRootAccess(entityService, appCaches);\n             else if (nodeId == Constants.System.RecycleBinContent)\n                 hasPathAccess = user.HasContentBinAccess(entityService, appCaches);\n-\n-            if (hasPathAccess.HasValue)\n-                return hasPathAccess.Value ? ContentAccess.Granted : ContentAccess.Denied;\n-\n-            contentItem = contentService.GetById(nodeId);\n-            if (contentItem == null) return ContentAccess.NotFound;\n-            hasPathAccess = user.HasPathAccess(contentItem, entityService, appCaches);\n+            else\n+            {\n+                contentItem = contentService.GetById(nodeId);\n+                if (contentItem == null)\n+                    return ContentAccess.NotFound;\n+                hasPathAccess = user.HasPathAccess(contentItem, entityService, appCaches);\n+            }\n \n             if (hasPathAccess == false)\n                 return ContentAccess.Denied;\n \n             if (permissionsToCheck == null || permissionsToCheck.Length == 0)\n                 return ContentAccess.Granted;\n \n+            // if there is no content item for this id, then just use the id as the path (i.e. -1 or -20)\n+            var path = contentItem == null ? nodeId.ToString() : contentItem.Path;\n+\n             //get the implicit/inherited permissions for the user for this path\n-            return CheckPermissionsPath(contentItem.Path, user, userService, permissionsToCheck)\n+            return CheckPermissionsPath(path, user, userService, permissionsToCheck)\n                 ? ContentAccess.Granted\n                 : ContentAccess.Denied;\n         }\n \n         private static bool CheckPermissionsPath(string path, IUser user, IUserService userService, params char[] permissionsToCheck)\n         {\n-            //get the implicit/inherited permissions for the user for this path,\n-            //if there is no content item for this id, than just use the id as the path (i.e. -1 or -20)\n+            //get the implicit/inherited permissions for the user for this path\n             var permission = userService.GetPermissionsForPath(user, path);\n \n             var allowed = true;"
        },
        {
            "filename": "src/Umbraco.Web/Editors/Filters/ContentSaveValidationAttribute.cs",
            "diff": "@@ -16,6 +16,7 @@\n using Umbraco.Web.Composing;\n using Umbraco.Web.Models.ContentEditing;\n using Umbraco.Web.Security;\n+using Umbraco.Web.WebApi;\n \n namespace Umbraco.Web.Editors.Filters\n {\n@@ -117,7 +118,7 @@ private bool ValidateUserAccess(ContentItemSave contentItem, HttpActionContext a\n                     break;\n                 case ContentSaveAction.Schedule:\n                     permissionToCheck.Add(ActionUpdate.ActionLetter);\n-                    permissionToCheck.Add(ActionToPublish.ActionLetter);\n+                    permissionToCheck.Add(ActionPublish.ActionLetter);\n                     contentToCheck = contentItem.PersistedContent;\n                     contentIdToCheck = contentToCheck.Id;\n                     break;\n@@ -217,6 +218,9 @@ private bool ValidateUserAccess(ContentItemSave contentItem, HttpActionContext a\n             if (accessResult == ContentPermissionsHelper.ContentAccess.NotFound)\n                 throw new HttpResponseException(HttpStatusCode.NotFound);\n \n+            if(accessResult == ContentPermissionsHelper.ContentAccess.Denied)\n+                actionContext.Response = actionContext.Request.CreateUserNoAccessResponse();\n+\n             return accessResult == ContentPermissionsHelper.ContentAccess.Granted;\n         }\n     }"
        }
    ],
    "commitTime": "2023-12-11 12:39:56"
}