{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "LOW",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "NONE",
        "integrity": "LOW",
        "availability": "NONE"
    },
    "credit": [
        "Abdikani Mahamoud"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 4.3,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "LOW",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "NONE",
                "integrity": "LOW",
                "availability": "NONE"
            },
            "severity": "medium"
        }
    ],
    "cvssScore": 4.3,
    "disclosureTime": "2023-12-22 19:51:53",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.12298",
        "probability": "0.00045"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-PYTHON-NAUTOBOT-6139193",
    "identifiers": {
        "CVE": [
            "CVE-2023-51649"
        ],
        "CWE": [
            "CWE-1220"
        ]
    },
    "language": "python",
    "malicious": false,
    "packageManager": "pip",
    "publicationTime": "2023-12-24 08:42:18",
    "remediation": "Upgrade nautobot to version 1.6.8, 2.1.0 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Insufficient Granularity of Access Control",
    "vulnDescription": {
        "Overview": "nautobot is a Source of truth and network automation platform. Affected versions of this package are vulnerable to Insufficient Granularity of Access Control due to improper enforcement of object-level permissions in the JobButtonReceiver subclass. An attacker can execute any configured JobButton Jobs by submitting a request to the vulnerable endpoint without the required specific job permissions. This is only exploitable if the attacker has permissions to run at least one Job in the system. "
    },
    "source_code": [
        {
            "filename": "changes/4988.housekeeping",
            "diff": "@@ -0,0 +1 @@\n+Fixed some bugs in `example_plugin.jobs.ExampleComplexJobButtonReceiver`."
        },
        {
            "filename": "changes/4988.removed",
            "diff": "@@ -0,0 +1 @@\n+Removed redundant `/extras/job-button/<uuid>/run/` URL endpoint; Job Buttons now use `/extras/jobs/<uuid>/run/` endpoint like any other job."
        },
        {
            "filename": "changes/4988.security",
            "diff": "@@ -0,0 +1,2 @@\n+Fixed missing object-level permissions enforcement when running a JobButton.\n+Removed the requirement for users to have both `extras.run_job` and `extras.run_jobbutton` permissions to run a Job via a Job Button. Only `extras.run_job` permission is now required."
        },
        {
            "filename": "examples/example_plugin/example_plugin/jobs.py",
            "diff": "@@ -152,18 +152,19 @@ def _run_device_job(self, obj):\n         # Run Device Job function\n \n     def receive_job_button(self, obj):\n-        user = self.request.user\n+        user = self.user\n         if isinstance(obj, Location):\n             if not user.has_perm(\"dcim.add_location\"):\n                 self.logger.error(\"User '%s' does not have permission to add a Location.\", user, extra={\"object\": obj})\n             else:\n                 self._run_location_job(obj)\n-        if isinstance(obj, Device):\n+        elif isinstance(obj, Device):\n             if not user.has_perm(\"dcim.add_device\"):\n                 self.logger.error(\"User '%s' does not have permission to add a Device.\", user, extra={\"object\": obj})\n             else:\n                 self._run_device_job(obj)\n-        self.logger.error(\"Unable to run Job Button for type %s.\", type(obj).__name__, extra={\"object\": obj})\n+        else:\n+            self.logger.error(\"Unable to run Job Button for type %s.\", type(obj).__name__, extra={\"object\": obj})\n \n \n jobs = ("
        },
        {
            "filename": "nautobot/docs/user-guide/platform-functionality/jobs/jobbutton.md",
            "diff": "@@ -29,7 +29,10 @@ For any Job that is loaded into Nautobot, the Job must be enabled to run. See [E\n ## Required Permissions\n \n !!! note\n-    In order to run any job via a Job Button, a user must be assigned the `extras.run_job` **as well as** the `extras.run_jobbutton` permissions. This is achieved by assigning the user (or group) a permission on the `extras > job` and `extras > jobbutton` objects and specifying the `run` action in the **Additional actions** section. Any user lacking these permissions may still see the button on the respective page(s) - if not using [conditional rendering](#conditional-rendering) - but they will be disabled.\n+    In order to run any job via a Job Button, a user must be assigned the `extras.run_job` permission. This is achieved by assigning the user (or group) a permission on the `extras > job` objects and specifying the `run` action in the **Additional actions** section. Any user lacking this permissions may still see the button on the respective page(s) - if not using [conditional rendering](#conditional-rendering) - but it will be disabled.\n+\n++/- 2.1.0\n+    In prior versions, users also had to have `extras.run_jobbutton` permission as well. This requirement has been removed.\n \n ## Context Data\n "
        },
        {
            "filename": "nautobot/extras/templatetags/job_buttons.py",
            "diff": "@@ -6,7 +6,7 @@\n from django.utils.html import format_html\n from django.utils.safestring import mark_safe\n \n-from nautobot.extras.models import JobButton\n+from nautobot.extras.models import Job, JobButton\n from nautobot.core.utils.data import render_jinja2\n \n \n@@ -27,7 +27,8 @@\n <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"{csrf_token}\">\n <input type=\"hidden\" name=\"object_pk\" value=\"{object_pk}\">\n <input type=\"hidden\" name=\"object_model_name\" value=\"{object_model_name}\">\n-<input type=\"hidden\" name=\"redirect_path\" value=\"{redirect_path}\">\n+<input type=\"hidden\" name=\"_schedule_type\" value=\"immediately\">\n+<input type=\"hidden\" name=\"_return_url\" value=\"{redirect_path}\">\n \"\"\"\n \n NO_CONFIRM_BUTTON = \"\"\"\n@@ -69,115 +70,108 @@\n </div>\n \"\"\"\n \n+SAFE_EMPTY_STR = mark_safe(\"\")  # noqa: S308\n \n-@register.simple_tag(takes_context=True)\n-def job_buttons(context, obj):\n-    \"\"\"\n-    Render all applicable job buttons for the given object.\n+\n+def _render_job_button_for_obj(job_button, obj, context, content_type):\n     \"\"\"\n-    content_type = ContentType.objects.get_for_model(obj)\n-    buttons = JobButton.objects.filter(content_types=content_type)\n-    if not buttons:\n-        return \"\"\n+    Helper method for job_buttons templatetag to reduce repetition of code.\n \n-    # Pass select context data when rendering the JobButton\n+    Returns:\n+       (str, str): (button_html, form_html)\n+    \"\"\"\n+    # Pass select context data when rendering the JobButton text as Jinja2\n     button_context = {\n         \"obj\": obj,\n         \"debug\": context.get(\"debug\", False),  # django.template.context_processors.debug\n         \"request\": context[\"request\"],  # django.template.context_processors.request\n         \"user\": context[\"user\"],  # django.contrib.auth.context_processors.auth\n         \"perms\": context[\"perms\"],  # django.contrib.auth.context_processors.auth\n     }\n-    buttons_html = forms_html = mark_safe(\"\")  # noqa: S308\n-    group_names = OrderedDict()\n-\n+    try:\n+        text_rendered = render_jinja2(job_button.text, button_context)\n+    except Exception as exc:\n+        return (\n+            format_html(\n+                '<a class=\"btn btn-sm btn-{}\" disabled=\"disabled\" title=\"{}\"><i class=\"mdi mdi-alert\"></i> {}</a>\\n',\n+                \"default\" if not job_button.group_name else \"link\",\n+                exc,\n+                job_button.name,\n+            ),\n+            SAFE_EMPTY_STR,\n+        )\n+\n+    if not text_rendered:\n+        return (SAFE_EMPTY_STR, SAFE_EMPTY_STR)\n+\n+    # Disable buttons if the user doesn't have permission to run the underlying Job.\n+    has_run_perm = Job.objects.check_perms(context[\"user\"], instance=job_button.job, action=\"run\")\n     hidden_inputs = format_html(\n         HIDDEN_INPUTS,\n         csrf_token=context[\"csrf_token\"],\n         object_pk=obj.pk,\n         object_model_name=f\"{content_type.app_label}.{content_type.model}\",\n         redirect_path=context[\"request\"].path,\n     )\n+    template_args = {\n+        \"button_id\": job_button.pk,\n+        \"button_text\": text_rendered,\n+        \"button_class\": job_button.button_class if not job_button.group_name else \"link\",\n+        \"button_url\": reverse(\"extras:job_run\", kwargs={\"pk\": job_button.job.pk}),\n+        \"object\": obj,\n+        \"job\": job_button.job,\n+        \"hidden_inputs\": hidden_inputs,\n+        \"disabled\": \"\" if has_run_perm else \"disabled\",\n+    }\n+\n+    if job_button.confirmation:\n+        return (\n+            format_html(CONFIRM_BUTTON, **template_args),\n+            format_html(CONFIRM_MODAL, **template_args),\n+        )\n+    else:\n+        return (\n+            format_html(NO_CONFIRM_BUTTON, **template_args),\n+            format_html(NO_CONFIRM_FORM, **template_args),\n+        )\n+\n+\n+@register.simple_tag(takes_context=True)\n+def job_buttons(context, obj):\n+    \"\"\"\n+    Render all applicable job buttons for the given object.\n+    \"\"\"\n+    content_type = ContentType.objects.get_for_model(obj)\n+    # We will enforce \"run\" permission later in deciding which buttons to show as disabled.\n+    buttons = JobButton.objects.filter(content_types=content_type)\n+    if not buttons:\n+        return SAFE_EMPTY_STR\n+\n+    buttons_html = forms_html = SAFE_EMPTY_STR\n+    group_names = OrderedDict()\n \n     for jb in buttons:\n-        template_args = {\n-            \"button_id\": jb.pk,\n-            \"button_text\": jb.text,\n-            \"button_class\": jb.button_class,\n-            \"button_url\": reverse(\"extras:jobbutton_run\", kwargs={\"pk\": jb.pk}),\n-            \"object\": obj,\n-            \"job\": jb.job,\n-            \"hidden_inputs\": hidden_inputs,\n-            \"disabled\": \"\" if context[\"user\"].has_perms((\"extras.run_jobbutton\", \"extras.run_job\")) else \"disabled\",\n-        }\n-\n-        # Organize job buttons by group\n+        # Organize job buttons by group for later processing\n         if jb.group_name:\n-            group_names.setdefault(jb.group_name, [])\n-            group_names[jb.group_name].append(jb)\n+            group_names.setdefault(jb.group_name, []).append(jb)\n \n-        # Add non-grouped buttons\n+        # Render and add non-grouped buttons\n         else:\n-            try:\n-                text_rendered = render_jinja2(jb.text, button_context)\n-                if text_rendered:\n-                    template_args[\"button_text\"] = text_rendered\n-                    if jb.confirmation:\n-                        buttons_html += format_html(CONFIRM_BUTTON, **template_args)\n-                        forms_html += format_html(CONFIRM_MODAL, **template_args)\n-                    else:\n-                        buttons_html += format_html(NO_CONFIRM_BUTTON, **template_args)\n-                        forms_html += format_html(NO_CONFIRM_FORM, **template_args)\n-            except Exception as e:\n-                buttons_html += format_html(\n-                    '<a class=\"btn btn-sm btn-default\" disabled=\"disabled\" title=\"{}\">'\n-                    '<i class=\"mdi mdi-alert\"></i> {}</a>\\n',\n-                    e,\n-                    jb.name,\n-                )\n+            button_html, form_html = _render_job_button_for_obj(jb, obj, context, content_type)\n+            buttons_html += button_html\n+            forms_html += form_html\n \n     # Add grouped buttons to template\n     for group_name, buttons in group_names.items():\n         group_button_class = buttons[0].button_class\n \n-        buttons_rendered = mark_safe(\"\")  # noqa: S308\n+        buttons_rendered = SAFE_EMPTY_STR\n \n         for jb in buttons:\n-            template_args = {\n-                \"button_id\": jb.pk,\n-                \"button_text\": jb.text,\n-                \"button_class\": \"link\",\n-                \"button_url\": reverse(\"extras:jobbutton_run\", kwargs={\"pk\": jb.pk}),\n-                \"object\": obj,\n-                \"job\": jb.job,\n-                \"hidden_inputs\": hidden_inputs,\n-                \"disabled\": \"\" if context[\"user\"].has_perms((\"extras.run_jobbutton\", \"extras.run_job\")) else \"disabled\",\n-            }\n-            try:\n-                text_rendered = render_jinja2(jb.text, button_context)\n-                if text_rendered:\n-                    template_args[\"button_text\"] = text_rendered\n-                    if jb.confirmation:\n-                        buttons_rendered += (\n-                            mark_safe(\"<li>\")  # noqa: S308\n-                            + format_html(CONFIRM_BUTTON, **template_args)\n-                            + mark_safe(\"</li>\")  # noqa: S308\n-                        )\n-                        forms_html += format_html(CONFIRM_MODAL, **template_args)\n-                    else:\n-                        buttons_rendered += (\n-                            mark_safe(\"<li>\")  # noqa: S308\n-                            + format_html(NO_CONFIRM_BUTTON, **template_args)\n-                            + mark_safe(\"</li>\")  # noqa: S308\n-                        )\n-                        forms_html += format_html(NO_CONFIRM_FORM, **template_args)\n-            except Exception as e:\n-                buttons_rendered += format_html(\n-                    '<li><a disabled=\"disabled\" title=\"{}\"><span class=\"text-muted\">'\n-                    '<i class=\"mdi mdi-alert\"></i> {}</span></a></li>',\n-                    e,\n-                    jb.name,\n-                )\n+            # Render grouped buttons as list items\n+            button_html, form_html = _render_job_button_for_obj(jb, obj, context, content_type)\n+            buttons_rendered += format_html(\"<li>{}</li>\", button_html)\n+            forms_html += form_html\n \n         if buttons_rendered:\n             buttons_html += format_html("
        },
        {
            "filename": "nautobot/extras/tests/test_views.py",
            "diff": "@@ -51,6 +51,7 @@\n     Tag,\n     Webhook,\n )\n+from nautobot.extras.templatetags.job_buttons import NO_CONFIRM_BUTTON\n from nautobot.extras.tests.constants import BIG_GRAPHQL_DEVICE_QUERY\n from nautobot.extras.tests.test_relationships import RequiredRelationshipTestMixin\n from nautobot.extras.utils import RoleModelsQuery, TaggableClassesQuery\n@@ -1995,14 +1996,24 @@ class JobButtonRenderingTestCase(TestCase):\n \n     def setUp(self):\n         super().setUp()\n-        self.job_button = JobButton(\n-            name=\"JobButton\",\n+        self.job_button_1 = JobButton(\n+            name=\"JobButton 1\",\n             text=\"JobButton {{ obj.name }}\",\n             job=Job.objects.get(job_class_name=\"TestJobButtonReceiverSimple\"),\n             confirmation=False,\n         )\n-        self.job_button.validated_save()\n-        self.job_button.content_types.add(ContentType.objects.get_for_model(LocationType))\n+        self.job_button_1.validated_save()\n+        self.job_button_1.content_types.add(ContentType.objects.get_for_model(LocationType))\n+\n+        self.job_button_2 = JobButton(\n+            name=\"JobButton 2\",\n+            text=\"Click me!\",\n+            job=Job.objects.get(job_class_name=\"TestJobButtonReceiverComplex\"),\n+            confirmation=False,\n+        )\n+        self.job_button_2.validated_save()\n+        self.job_button_2.content_types.add(ContentType.objects.get_for_model(LocationType))\n+\n         self.location_type = LocationType.objects.get(name=\"Campus\")\n \n     def test_view_object_with_job_button(self):\n@@ -2011,20 +2022,21 @@ def test_view_object_with_job_button(self):\n         self.assertEqual(response.status_code, 200)\n         content = extract_page_body(response.content.decode(response.charset))\n         self.assertIn(f\"JobButton {self.location_type.name}\", content, content)\n+        self.assertIn(\"Click me!\", content, content)\n \n     def test_view_object_with_unsafe_text(self):\n         \"\"\"Ensure that JobButton text can't be used as a vector for XSS.\"\"\"\n-        self.job_button.text = '<script>alert(\"Hello world!\")</script>'\n-        self.job_button.validated_save()\n+        self.job_button_1.text = '<script>alert(\"Hello world!\")</script>'\n+        self.job_button_1.validated_save()\n         response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n         self.assertEqual(response.status_code, 200)\n         content = extract_page_body(response.content.decode(response.charset))\n         self.assertNotIn(\"<script>alert\", content, content)\n         self.assertIn(\"&lt;script&gt;alert\", content, content)\n \n         # Make sure grouped rendering is safe too\n-        self.job_button.group = '<script>alert(\"Goodbye\")</script>'\n-        self.job_button.validated_save()\n+        self.job_button_1.group_name = '<script>alert(\"Goodbye\")</script>'\n+        self.job_button_1.validated_save()\n         response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n         self.assertEqual(response.status_code, 200)\n         content = extract_page_body(response.content.decode(response.charset))\n@@ -2033,15 +2045,80 @@ def test_view_object_with_unsafe_text(self):\n \n     def test_view_object_with_unsafe_name(self):\n         \"\"\"Ensure that JobButton names can't be used as a vector for XSS.\"\"\"\n-        self.job_button.text = \"JobButton {{ obj\"\n-        self.job_button.name = '<script>alert(\"Yo\")</script>'\n-        self.job_button.validated_save()\n+        self.job_button_1.text = \"JobButton {{ obj\"\n+        self.job_button_1.name = '<script>alert(\"Yo\")</script>'\n+        self.job_button_1.validated_save()\n         response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n         self.assertEqual(response.status_code, 200)\n         content = extract_page_body(response.content.decode(response.charset))\n         self.assertNotIn(\"<script>alert\", content, content)\n         self.assertIn(\"&lt;script&gt;alert\", content, content)\n \n+    def test_render_constrained_run_permissions(self):\n+        obj_perm = ObjectPermission(\n+            name=\"Test permission\",\n+            constraints={\"pk\": self.job_button_1.job.pk},\n+            actions=[\"run\"],\n+        )\n+        obj_perm.save()\n+        obj_perm.users.add(self.user)\n+        obj_perm.object_types.add(ContentType.objects.get_for_model(Job))\n+\n+        with self.subTest(\"Ungrouped buttons\"):\n+            response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+            self.assertEqual(response.status_code, 200)\n+            content = extract_page_body(response.content.decode(response.charset))\n+            self.assertInHTML(\n+                NO_CONFIRM_BUTTON.format(\n+                    button_id=self.job_button_1.pk,\n+                    button_text=f\"JobButton {self.location_type.name}\",\n+                    button_class=self.job_button_1.button_class,\n+                    disabled=\"\",\n+                ),\n+                content,\n+            )\n+            self.assertInHTML(\n+                NO_CONFIRM_BUTTON.format(\n+                    button_id=self.job_button_2.pk,\n+                    button_text=\"Click me!\",\n+                    button_class=self.job_button_2.button_class,\n+                    disabled=\"disabled\",\n+                ),\n+                content,\n+            )\n+\n+        with self.subTest(\"Grouped buttons\"):\n+            self.job_button_1.group_name = \"Grouping\"\n+            self.job_button_1.validated_save()\n+            self.job_button_2.group_name = \"Grouping\"\n+            self.job_button_2.validated_save()\n+\n+            response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+            self.assertEqual(response.status_code, 200)\n+            content = extract_page_body(response.content.decode(response.charset))\n+            self.assertInHTML(\n+                \"<li>\"\n+                + NO_CONFIRM_BUTTON.format(\n+                    button_id=self.job_button_1.pk,\n+                    button_text=f\"JobButton {self.location_type.name}\",\n+                    button_class=\"link\",\n+                    disabled=\"\",\n+                )\n+                + \"</li>\",\n+                content,\n+            )\n+            self.assertInHTML(\n+                \"<li>\"\n+                + NO_CONFIRM_BUTTON.format(\n+                    button_id=self.job_button_2.pk,\n+                    button_text=\"Click me!\",\n+                    button_class=\"link\",\n+                    disabled=\"disabled\",\n+                )\n+                + \"</li>\",\n+                content,\n+            )\n+\n \n # TODO: Convert to StandardTestCases.Views\n class ObjectChangeTestCase(TestCase):"
        },
        {
            "filename": "nautobot/extras/urls.py",
            "diff": "@@ -479,8 +479,6 @@\n         views.JobResultDeleteView.as_view(),\n         name=\"jobresult_delete\",\n     ),\n-    # Job Button Run\n-    path(\"job-button/<uuid:pk>/run/\", views.JobButtonRunView.as_view(), name=\"jobbutton_run\"),\n     # Notes\n     path(\"notes/\", views.NoteListView.as_view(), name=\"note_list\"),\n     path(\"notes/add/\", views.NoteEditView.as_view(), name=\"note_add\"),"
        },
        {
            "filename": "nautobot/extras/views.py",
            "diff": "@@ -1138,14 +1138,23 @@ def post(self, request, class_path=None, pk=None):\n         schedule_form = forms.JobScheduleForm(request.POST)\n         task_queue = request.POST.get(\"_task_queue\")\n \n+        return_url = request.POST.get(\"_return_url\")\n+        if return_url is not None and url_has_allowed_host_and_scheme(url=return_url, allowed_hosts=request.get_host()):\n+            return_url = iri_to_uri(return_url)\n+        else:\n+            return_url = None\n+\n         # Allow execution only if a worker process is running and the job is runnable.\n         if not get_worker_count(queue=task_queue):\n             messages.error(request, \"Unable to run or schedule job: Celery worker process not running.\")\n         elif not job_model.installed or job_model.job_class is None:\n             messages.error(request, \"Unable to run or schedule job: Job is not presently installed.\")\n         elif not job_model.enabled:\n             messages.error(request, \"Unable to run or schedule job: Job is not enabled to be run.\")\n-        elif job_model.has_sensitive_variables and request.POST[\"_schedule_type\"] != JobExecutionType.TYPE_IMMEDIATELY:\n+        elif (\n+            job_model.has_sensitive_variables\n+            and request.POST.get(\"_schedule_type\") != JobExecutionType.TYPE_IMMEDIATELY\n+        ):\n             messages.error(request, \"Unable to schedule job: Job may have sensitive input variables.\")\n         elif job_model.has_sensitive_variables and job_model.approval_required:\n             messages.error(\n@@ -1207,10 +1216,10 @@ def post(self, request, class_path=None, pk=None):\n \n                 if job_model.approval_required:\n                     messages.success(request, f\"Job {schedule_name} successfully submitted for approval\")\n-                    return redirect(\"extras:scheduledjob_approval_queue_list\")\n+                    return redirect(return_url if return_url else \"extras:scheduledjob_approval_queue_list\")\n                 else:\n                     messages.success(request, f\"Job {schedule_name} successfully scheduled\")\n-                    return redirect(\"extras:scheduledjob_list\")\n+                    return redirect(return_url if return_url else \"extras:scheduledjob_list\")\n \n             else:\n                 # Enqueue job for immediate execution\n@@ -1223,8 +1232,21 @@ def post(self, request, class_path=None, pk=None):\n                     **job_model.job_class.serialize_data(job_kwargs),\n                 )\n \n+                if return_url:\n+                    messages.info(\n+                        request,\n+                        format_html(\n+                            'Job enqueued. <a href=\"{}\">Click here for the results.</a>',\n+                            job_result.get_absolute_url(),\n+                        ),\n+                    )\n+                    return redirect(return_url)\n+\n                 return redirect(\"extras:jobresult\", pk=job_result.pk)\n \n+        if return_url:\n+            return redirect(return_url)\n+\n         template_name = \"extras/job.html\"\n         if job_model.job_class is not None and hasattr(job_model.job_class, \"template_name\"):\n             try:\n@@ -1542,31 +1564,6 @@ class JobButtonUIViewSet(NautobotUIViewSet):\n     table_class = tables.JobButtonTable\n \n \n-class JobButtonRunView(ObjectPermissionRequiredMixin, View):\n-    \"\"\"\n-    View to run the Job linked to the Job Button.\n-    \"\"\"\n-\n-    queryset = JobButton.objects.all()\n-\n-    def get_required_permission(self):\n-        return \"extras.run_job\"\n-\n-    def post(self, request, pk):\n-        post_data = request.POST\n-        job_button = JobButton.objects.get(pk=pk)\n-        job_model = job_button.job\n-        result = JobResult.enqueue_job(\n-            job_model=job_model,\n-            user=request.user,\n-            object_pk=post_data[\"object_pk\"],\n-            object_model_name=post_data[\"object_model_name\"],\n-        )\n-        msg = format_html('Job enqueued. <a href=\"{}\">Click here for the results.</a>', result.get_absolute_url())\n-        messages.info(request=request, message=msg)\n-        return redirect(post_data[\"redirect_path\"])\n-\n-\n #\n # Change logging\n #"
        }
    ],
    "commitTime": "2023-12-20 20:27:42"
}