{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "LOW",
        "userInteraction": "REQUIRED",
        "scope": "CHANGED",
        "confidentiality": "NONE",
        "integrity": "LOW",
        "availability": "NONE"
    },
    "credit": [
        "Andrey Anshin,Jens Scheffler"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 5.4,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "LOW",
                "userInteraction": "REQUIRED",
                "scope": "CHANGED",
                "confidentiality": "LOW",
                "integrity": "LOW",
                "availability": "NONE"
            },
            "severity": "medium"
        }
    ],
    "cvssScore": 4.1,
    "disclosureTime": "2023-12-21 12:30:27",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.12303",
        "probability": "0.00045"
    },
    "exploitMaturity": "Not Defined",
    "id": "SNYK-PYTHON-APACHEAIRFLOW-6137746",
    "identifiers": {
        "CVE": [
            "CVE-2023-47265"
        ],
        "CWE": [
            "CWE-79"
        ]
    },
    "language": "python",
    "malicious": false,
    "packageManager": "pip",
    "publicationTime": "2023-12-21 19:31:33",
    "remediation": "Upgrade apache-airflow to version 2.8.0b1 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Cross-site Scripting (XSS)",
    "vulnDescription": {
        "Details": "A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source. This is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML) in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy. Injecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability. Escaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, < can be coded as &lt ; and > can be coded as &gt ; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses < and > as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted. The most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. Types of attacks There are a few methods by which XSS can be manipulated: Type Origin Description Stored Server The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. Reflected Server The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser. DOM-based Client The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. Mutated The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. Affected environments The following environments are susceptible to an XSS attack: Web servers Application servers Web application environments How to prevent This section describes the top best practices designed to specifically protect your code: Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. Convert special characters such as ? , & , / , < , > and spaces to their respective HTML or URL encoded equivalents. Give users the option to disable client-side scripts. Redirect invalid requests. Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions. Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack. Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML. ",
        "Overview": "apache-airflow is a platform to programmatically author, schedule, and monitor workflows. Affected versions of this package are vulnerable to Cross-site Scripting (XSS) via the parameter description field of a DAG. A DAG author can embed JavaScript, which can be executed on the client side when a user views the DAG details in the browser. This could lead to misleading information being displayed to the user. "
    },
    "source_code": [
        {
            "filename": "airflow/config_templates/config.yml",
            "diff": "@@ -1828,6 +1828,21 @@ webserver:\n       type: boolean\n       example: ~\n       default: \"False\"\n+    allow_raw_html_descriptions:\n+      description: |\n+        A DAG author is able to provide any raw HTML into ``doc_md`` or params description in\n+        ``description_md`` for text formatting. This is including potentially unsafe javascript.\n+        Displaying the DAG or trigger form in web UI provides the DAG author the potential to\n+        inject malicious code into clients browsers. To ensure the web UI is safe by default,\n+        raw HTML is disabled by default. If you trust your DAG authors, you can enable HTML\n+        support in markdown by setting this option to True.\n+\n+        This parameter also enables the deprecated fields ``description_html`` and\n+        ``custom_html_form`` in DAG params until the feature is removed in a future version.\n+      version_added: 2.8.0\n+      type: boolean\n+      example: \"False\"\n+      default: \"False\"\n email:\n   description: |\n     Configuration email backend and whether to"
        },
        {
            "filename": "airflow/example_dags/example_params_ui_tutorial.py",
            "diff": "@@ -47,18 +47,17 @@\n         \"flag\": False,\n         \"a_simple_list\": [\"one\", \"two\", \"three\", \"actually one value is made per line\"],\n         # But of course you might want to have it nicer! Let's add some description to parameters.\n-        # Note if you can add any HTML formatting to the description, you need to use the description_html\n+        # Note if you can add any Markdown formatting to the description, you need to use the description_md\n         # attribute.\n         \"most_loved_number\": Param(\n             42,\n             type=\"integer\",\n             title=\"Your favorite number\",\n-            description_html=\"\"\"Everybody should have a favorite number. Not only math teachers.\n-            If you can not think of any at the moment please think of the 42 which is very famous because\n-            of the book\n-            <a href='https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#\n-            The_Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_is_42'>\n-            The Hitchhiker's Guide to the Galaxy</a>\"\"\",\n+            description_md=\"Everybody should have a **favorite** number. Not only _math teachers_. \"\n+            \"If you can not think of any at the moment please think of the 42 which is very famous because\"\n+            \"of the book [The Hitchhiker's Guide to the Galaxy]\"\n+            \"(https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#\"\n+            \"The_Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_is_42).\",\n         ),\n         # If you want to have a selection list box then you can use the enum feature of JSON schema\n         \"pick_one\": Param(\n@@ -177,8 +176,8 @@\n             \"optional text, you can trigger also w/o text\",\n             type=[\"null\", \"string\"],\n             title=\"Optional text field\",\n-            description_html=\"This field is optional. As field content is JSON schema validated you must \"\n-            \"allow the <code>null</code> type.\",\n+            description_md=\"This field is optional. As field content is JSON schema validated you must \"\n+            \"allow the `null` type.\",\n         ),\n         # You can arrange the entry fields in sections so that you can have a better overview for the user\n         # Therefore you can add the \"section\" attribute.\n@@ -188,10 +187,10 @@\n             \"length-checked-field\",\n             type=\"string\",\n             title=\"Text field with length check\",\n-            description_html=\"\"\"This field is required. And you need to provide something between 10 and 30\n-            characters. See the\n-            <a href='https://json-schema.org/understanding-json-schema/reference/string.html'>\n-            JSON schema description (string)</a> in for more details\"\"\",\n+            description_md=\"\"\"This field is required. And you need to provide something between 10 and 30\n+            characters. See the JSON\n+            [schema description (string)](https://json-schema.org/understanding-json-schema/reference/string.html)\n+            for more details\"\"\",\n             minLength=10,\n             maxLength=20,\n             section=\"JSON Schema validation options\",\n@@ -200,9 +199,10 @@\n             100,\n             type=\"number\",\n             title=\"Number field with value check\",\n-            description_html=\"\"\"This field is required. You need to provide any number between 64 and 128.\n-            See the <a href='https://json-schema.org/understanding-json-schema/reference/numeric.html'>\n-            JSON schema description (numbers)</a> in for more details\"\"\",\n+            description_md=\"\"\"This field is required. You need to provide any number between 64 and 128.\n+            See the JSON\n+            [schema description (numbers)](https://json-schema.org/understanding-json-schema/reference/numeric.html)\n+            for more details\"\"\",\n             minimum=64,\n             maximum=128,\n             section=\"JSON Schema validation options\",\n@@ -217,9 +217,9 @@\n         ),\n         \"array_of_objects\": Param(\n             [{\"name\": \"account_name\", \"country\": \"country_name\"}],\n-            \"Array with complex objects and validation rules. \"\n-            \"See <a href='https://json-schema.org/understanding-json-schema\"\n-            \"/reference/array.html#items'>JSON Schema validation options in specs.</a>\",\n+            description_md=\"Array with complex objects and validation rules. \"\n+            \"See [JSON Schema validation options in specs]\"\n+            \"(https://json-schema.org/understanding-json-schema/reference/array.html#items).\",\n             type=\"array\",\n             title=\"JSON array field\",\n             items={\n@@ -233,69 +233,6 @@\n         # then you can use the JSON schema option of passing constant values. These parameters\n         # will not be displayed but passed to the DAG\n         \"hidden_secret_field\": Param(\"constant value\", const=\"constant value\"),\n-        # Finally besides the standard provided field generator you can have you own HTML form code\n-        # injected - but be careful, you can also mess-up the layout!\n-        \"color_picker\": Param(\n-            \"#FF8800\",\n-            type=\"string\",\n-            title=\"Pick a color\",\n-            description_html=\"\"\"This is a special HTML widget as custom implementation in the DAG code.\n-            It is templated with the following parameter to render proper HTML form fields:\n-            <ul>\n-                <li><code>{name}</code>: Name of the HTML input field that is expected.</li>\n-                <li><code>{value}</code>:\n-                    (Default) value that should be displayed when showing/loading the form.</li>\n-                <li>Note: If you have elements changing a value, call <code>updateJSONconf()</code> to update\n-                    the form data to be posted as <code>dag_run.conf</code>.</li>\n-            </ul>\n-            Example: <code>&lt;input name='{name}' value='{value}' onchange='updateJSONconf()' /&gt;</code>\n-            \"\"\",\n-            custom_html_form=\"\"\"\n-            <table width=\"100%\" cellspacing=\"5\"><tbody><tr><td>\n-                <label for=\"r_{name}\">Red:</label>\n-            </td><td width=\"80%\">\n-                <input id=\"r_{name}\" type=\"range\" min=\"0\" max=\"255\" value=\"0\" onchange=\"u_{name}()\"/>\n-            </td><td rowspan=\"3\" style=\"padding-left: 10px;\">\n-                <div id=\"preview_{name}\"\n-                style=\"line-height: 40px; margin-bottom: 7px; width: 100%; background-color: {value};\"\n-                >&nbsp;</div>\n-                <input class=\"form-control\" type=\"text\" maxlength=\"7\" id=\"{name}\" name=\"{name}\"\n-                value=\"{value}\" onchange=\"v_{name}()\" />\n-            </td></tr><tr><td>\n-                <label for=\"g_{name}\">Green:</label>\n-            </td><td>\n-                <input id=\"g_{name}\" type=\"range\" min=\"0\" max=\"255\" value=\"0\" onchange=\"u_{name}()\"/>\n-            </td></tr><tr><td>\n-                <label for=\"b_{name}\">Blue:</label>\n-            </td><td>\n-                <input id=\"b_{name}\" type=\"range\" min=\"0\" max=\"255\" value=\"0\" onchange=\"u_{name}()\"/>\n-            </td></tr></tbody></table>\n-            <script lang=\"javascript\">\n-                const hex_chars = \"0123456789ABCDEF\";\n-                function i2hex(name) {\n-                    var i = document.getElementById(name).value;\n-                    return hex_chars.substr(parseInt(i / 16), 1) + hex_chars.substr(parseInt(i % 16), 1)\n-                }\n-                function u_{name}() {\n-                    var hex_val = \"#\"+i2hex(\"r_{name}\")+i2hex(\"g_{name}\")+i2hex(\"b_{name}\");\n-                    document.getElementById(\"{name}\").value = hex_val;\n-                    document.getElementById(\"preview_{name}\").style.background = hex_val;\n-                    updateJSONconf();\n-                }\n-                function hex2i(text) {\n-                    return hex_chars.indexOf(text.substr(0,1)) * 16 + hex_chars.indexOf(text.substr(1,1));\n-                }\n-                function v_{name}() {\n-                    var value = document.getElementById(\"{name}\").value.toUpperCase();\n-                    document.getElementById(\"r_{name}\").value = hex2i(value.substr(1,2));\n-                    document.getElementById(\"g_{name}\").value = hex2i(value.substr(3,2));\n-                    document.getElementById(\"b_{name}\").value = hex2i(value.substr(5,2));\n-                    document.getElementById(\"preview_{name}\").style.background = value;\n-                }\n-                v_{name}();\n-            </script>\"\"\",\n-            section=\"Special advanced stuff with form fields\",\n-        ),\n     },\n ) as dag:\n "
        },
        {
            "filename": "airflow/www/utils.py",
            "diff": "@@ -38,6 +38,7 @@\n from sqlalchemy import delete, func, select, types\n from sqlalchemy.ext.associationproxy import AssociationProxy\n \n+from airflow.configuration import conf\n from airflow.exceptions import RemovedInAirflow3Warning\n from airflow.models import errors\n from airflow.models.dagrun import DagRun\n@@ -154,16 +155,16 @@ def get_mapped_summary(parent_instance, task_instances):\n def get_dag_run_conf(\n     dag_run_conf: Any, *, json_encoder: type[json.JSONEncoder] = json.JSONEncoder\n ) -> tuple[str | None, bool]:\n-    conf: str | None = None\n+    result: str | None = None\n \n     conf_is_json: bool = False\n     if isinstance(dag_run_conf, str):\n-        conf = dag_run_conf\n+        result = dag_run_conf\n     elif isinstance(dag_run_conf, (dict, list)) and any(dag_run_conf):\n-        conf = json.dumps(dag_run_conf, sort_keys=True, cls=json_encoder, ensure_ascii=False)\n+        result = json.dumps(dag_run_conf, sort_keys=True, cls=json_encoder, ensure_ascii=False)\n         conf_is_json = True\n \n-    return conf, conf_is_json\n+    return result, conf_is_json\n \n \n def encode_dag_run(\n@@ -172,7 +173,7 @@ def encode_dag_run(\n     if not dag_run:\n         return None\n \n-    conf, conf_is_json = get_dag_run_conf(dag_run.conf, json_encoder=json_encoder)\n+    dag_run_conf, conf_is_json = get_dag_run_conf(dag_run.conf, json_encoder=json_encoder)\n \n     return {\n         \"run_id\": dag_run.run_id,\n@@ -186,7 +187,7 @@ def encode_dag_run(\n         \"run_type\": dag_run.run_type,\n         \"last_scheduling_decision\": datetime_to_string(dag_run.last_scheduling_decision),\n         \"external_trigger\": dag_run.external_trigger,\n-        \"conf\": conf,\n+        \"conf\": dag_run_conf,\n         \"conf_is_json\": conf_is_json,\n         \"note\": dag_run.note,\n     }\n@@ -613,7 +614,7 @@ def json_render(obj, lexer):\n \n def wrapped_markdown(s, css_class=\"rich_doc\"):\n     \"\"\"Convert a Markdown string to HTML.\"\"\"\n-    md = MarkdownIt(\"gfm-like\")\n+    md = MarkdownIt(\"gfm-like\", {\"html\": conf.getboolean(\"webserver\", \"allow_raw_html_descriptions\")})\n     if s is None:\n         return None\n     s = textwrap.dedent(s)"
        },
        {
            "filename": "airflow/www/views.py",
            "diff": "@@ -1956,30 +1956,69 @@ def trigger(self, dag_id: str, session: Session = NEW_SESSION):\n \n         # Prepare form fields with param struct details to render a proper form with schema information\n         form_fields = {}\n+        allow_raw_html_descriptions = conf.getboolean(\"webserver\", \"allow_raw_html_descriptions\")\n+        form_trust_problems = []\n         for k, v in dag.params.items():\n             form_fields[k] = v.dump()\n+            form_field: dict = form_fields[k]\n             # If no schema is provided, auto-detect on default values\n-            if \"schema\" not in form_fields[k]:\n-                form_fields[k][\"schema\"] = {}\n-            if \"type\" not in form_fields[k][\"schema\"]:\n-                if isinstance(form_fields[k][\"value\"], bool):\n-                    form_fields[k][\"schema\"][\"type\"] = \"boolean\"\n-                elif isinstance(form_fields[k][\"value\"], int):\n-                    form_fields[k][\"schema\"][\"type\"] = [\"integer\", \"null\"]\n-                elif isinstance(form_fields[k][\"value\"], list):\n-                    form_fields[k][\"schema\"][\"type\"] = [\"array\", \"null\"]\n-                elif isinstance(form_fields[k][\"value\"], dict):\n-                    form_fields[k][\"schema\"][\"type\"] = [\"object\", \"null\"]\n-            # Mark markup fields as safe\n-            if (\n-                \"description_html\" in form_fields[k][\"schema\"]\n-                and form_fields[k][\"schema\"][\"description_html\"]\n-            ):\n-                form_fields[k][\"description\"] = Markup(form_fields[k][\"schema\"][\"description_html\"])\n-            if \"custom_html_form\" in form_fields[k][\"schema\"]:\n-                form_fields[k][\"schema\"][\"custom_html_form\"] = Markup(\n-                    form_fields[k][\"schema\"][\"custom_html_form\"]\n-                )\n+            if \"schema\" not in form_field:\n+                form_field[\"schema\"] = {}\n+            form_field_schema: dict = form_field[\"schema\"]\n+            if \"type\" not in form_field_schema:\n+                form_field_value = form_field[\"value\"]\n+                if isinstance(form_field_value, bool):\n+                    form_field_schema[\"type\"] = \"boolean\"\n+                elif isinstance(form_field_value, int):\n+                    form_field_schema[\"type\"] = [\"integer\", \"null\"]\n+                elif isinstance(form_field_value, list):\n+                    form_field_schema[\"type\"] = [\"array\", \"null\"]\n+                elif isinstance(form_field_value, dict):\n+                    form_field_schema[\"type\"] = [\"object\", \"null\"]\n+            # Mark HTML fields as safe if allowed\n+            if allow_raw_html_descriptions:\n+                if \"description_html\" in form_field_schema:\n+                    form_field[\"description\"] = Markup(form_field_schema[\"description_html\"])\n+                if \"custom_html_form\" in form_field_schema:\n+                    form_field_schema[\"custom_html_form\"] = Markup(form_field_schema[\"custom_html_form\"])\n+            else:\n+                if \"description_html\" in form_field_schema and \"description_md\" not in form_field_schema:\n+                    form_trust_problems.append(f\"Field {k} uses HTML description\")\n+                    form_field[\"description\"] = form_field_schema.pop(\"description_html\")\n+                if \"custom_html_form\" in form_field_schema:\n+                    form_trust_problems.append(f\"Field {k} uses custom HTML form definition\")\n+                    form_field_schema.pop(\"custom_html_form\")\n+            if \"description_md\" in form_field_schema:\n+                form_field[\"description\"] = wwwutils.wrapped_markdown(form_field_schema[\"description_md\"])\n+        if form_trust_problems:\n+            flash(\n+                Markup(\n+                    \"At least one field in the trigger form uses a raw HTML form definition. This is not allowed for \"\n+                    \"security. Please switch to markdown description via <code>description_md</code>. \"\n+                    \"Raw HTML is deprecated and must be enabled via \"\n+                    \"<code>webserver.allow_raw_html_descriptions</code> configuration parameter. Using plain text \"\n+                    \"as fallback for these fields. \"\n+                    f\"<ul><li>{'</li><li>'.join(form_trust_problems)}</li></ul>\"\n+                ),\n+                \"warning\",\n+            )\n+        if allow_raw_html_descriptions and any(\"description_html\" in p.schema for p in dag.params.values()):\n+            flash(\n+                Markup(\n+                    \"The form params use raw HTML in <code>description_html</code> which is deprecated. \"\n+                    \"Please migrate to <code>description_md</code>.\"\n+                ),\n+                \"warning\",\n+            )\n+        if allow_raw_html_descriptions and any(\"custom_html_form\" in p.schema for p in dag.params.values()):\n+            flash(\n+                Markup(\n+                    \"The form params use <code>custom_html_form</code> definition. \"\n+                    \"This is deprecated with Airflow 2.8.0 and will be removed in a future release.\"\n+                ),\n+                \"warning\",\n+            )\n+\n         ui_fields_defined = any(\"const\" not in f[\"schema\"] for f in form_fields.values())\n         show_trigger_form_if_no_params = conf.getboolean(\"webserver\", \"show_trigger_form_if_no_params\")\n "
        },
        {
            "filename": "docs/apache-airflow/core-concepts/params.rst",
            "diff": "@@ -173,6 +173,8 @@ JSON Schema Validation\n Use Params to Provide a Trigger UI Form\n ---------------------------------------\n \n+.. versionadded:: 2.6.0\n+\n :class:`~airflow.models.dag.DAG` level params are used to render a user friendly trigger form.\n This form is provided when a user clicks on the \"Trigger DAG\" button.\n \n@@ -189,8 +191,8 @@ The following features are supported in the Trigger UI Form:\n   - The :class:`~airflow.models.param.Param` attribute ``title`` is used to render the form field label of the entry box.\n     If no ``title`` is defined the parameter name/key is used instead.\n   - The :class:`~airflow.models.param.Param` attribute ``description`` is rendered below an entry field as help text in gray color.\n-    If you want to provide HTML tags for special formatting or links you need to use the Param attribute\n-    ``description_html``, see tutorial DAG ``example_params_ui_tutorial`` for an example.\n+    If you want to provide special formatting or links you need to use the Param attribute\n+    ``description_md``. See tutorial DAG ``example_params_ui_tutorial`` for an example.\n   - The :class:`~airflow.models.param.Param` attribute ``type`` influences how a field is rendered. The following types are supported:\n \n       .. list-table::\n@@ -313,7 +315,6 @@ The following features are supported in the Trigger UI Form:\n   The ``const`` value must match the default value to pass `JSON Schema validation <https://json-schema.org/understanding-json-schema/reference/generic.html#constant-values>`_.\n - On the bottom of the form the generated JSON configuration can be expanded.\n   If you want to change values manually, the JSON configuration can be adjusted. Changes are overridden when form fields change.\n-- If you want to render custom HTML as form on top of the provided features, you can use the ``custom_html_form`` attribute.\n \n .. note::\n     If the field is required the default value must be valid according to the schema as well. If the DAG is defined with\n@@ -324,9 +325,17 @@ For examples also please take a look to two example DAGs provided: ``example_par\n .. image:: ../img/trigger-dag-tutorial-form.png\n \n .. versionadded:: 2.7.0\n-\n-The trigger form can also be forced to be displayed also if no params are defined using the configuration switch\n-``webserver.show_trigger_form_if_no_params``.\n+    The trigger form can also be forced to be displayed also if no params are defined using the configuration switch\n+    ``webserver.show_trigger_form_if_no_params``.\n+\n+.. versionchanged:: 2.8.0\n+    By default custom HTML is not allowed to prevent injection of scripts or other malicious HTML code. If you trust your DAG authors\n+    you can change the trust level of parameter descriptions to allow raw HTML by setting the configuration entry\n+    ``webserver.allow_raw_html_descriptions`` to ``True``. With the default setting all HTML will be displayed as plain text.\n+    This relates to the previous feature to enable rich formatting with the attribute ``description_html`` which is now super-seeded\n+    with the attribute ``description_md``.\n+    Custom form elements using the attribute ``custom_html_form`` allow a DAG author to specify raw HTML form templates. These\n+    custom HTML form elements are deprecated as of version 2.8.0.\n \n Disabling Runtime Param Modification\n ------------------------------------"
        },
        {
            "filename": "newsfragments/35460.significant.rst",
            "diff": "@@ -0,0 +1,10 @@\n+Raw HTML code in DAG docs and DAG params descriptions is disabled by default\n+\n+To ensure that no malicious javascript can be injected with DAG descriptions or trigger UI forms by DAG authors\n+a new parameter ``webserver.allow_raw_html_descriptions`` was added with default value of ``False``.\n+If you trust your DAG authors code and want to allow using raw HTML in DAG descriptions and params, you can restore the previous\n+behavior by setting the configuration value to ``True``.\n+\n+To ensure Airflow is secure by default, the raw HTML support in trigger UI has been super-seeded by markdown support via\n+the ``description_md`` attribute. If you have been using ``description_html`` please migrate to ``description_md``.\n+The ``custom_html_form`` is now deprecated."
        },
        {
            "filename": "tests/www/test_utils.py",
            "diff": "@@ -32,6 +32,7 @@\n from airflow.utils import json as utils_json\n from airflow.www import utils\n from airflow.www.utils import DagRunCustomSQLAInterface, json_f, wrapped_markdown\n+from tests.test_utils.config import conf_vars\n \n \n class TestUtils:\n@@ -386,8 +387,9 @@ def test_wrapped_markdown_with_nested_list(self):\n         )\n \n     def test_wrapped_markdown_with_collapsible_section(self):\n-        rendered = wrapped_markdown(\n-            \"\"\"\n+        with conf_vars({(\"webserver\", \"allow_raw_html_descriptions\"): \"true\"}):\n+            rendered = wrapped_markdown(\n+                \"\"\"\n # A collapsible section with markdown\n <details>\n   <summary>Click to expand!</summary>\n@@ -399,10 +401,10 @@ def test_wrapped_markdown_with_collapsible_section(self):\n      * Sub bullets\n </details>\n             \"\"\"\n-        )\n+            )\n \n-        assert (\n-            \"\"\"<div class=\"rich_doc\" ><h1>A collapsible section with markdown</h1>\n+            assert (\n+                \"\"\"<div class=\"rich_doc\" ><h1>A collapsible section with markdown</h1>\n <details>\n   <summary>Click to expand!</summary>\n <h2>Heading</h2>\n@@ -417,8 +419,20 @@ def test_wrapped_markdown_with_collapsible_section(self):\n </ol>\n </details>\n </div>\"\"\"\n-            == rendered\n-        )\n+                == rendered\n+            )\n+\n+    @pytest.mark.parametrize(\"allow_html\", [False, True])\n+    def test_wrapped_markdown_with_raw_html(self, allow_html):\n+        with conf_vars({(\"webserver\", \"allow_raw_html_descriptions\"): str(allow_html)}):\n+            HTML = \"test <code>raw HTML</code>\"\n+            rendered = wrapped_markdown(HTML)\n+            if allow_html:\n+                assert HTML in rendered\n+            else:\n+                from markupsafe import escape\n+\n+                assert escape(HTML) in rendered\n \n \n @pytest.mark.db_test"
        },
        {
            "filename": "tests/www/views/test_views_trigger_dag.py",
            "diff": "@@ -31,7 +31,7 @@\n from airflow.utils.types import DagRunType\n from tests.test_utils.api_connexion_utils import create_test_client\n from tests.test_utils.config import conf_vars\n-from tests.test_utils.www import check_content_in_response\n+from tests.test_utils.www import check_content_in_response, check_content_not_in_response\n \n pytestmark = pytest.mark.db_test\n \n@@ -236,6 +236,55 @@ def test_trigger_dag_params_render(admin_client, dag_maker, session, app, monkey\n     )\n \n \n+@pytest.mark.parametrize(\"allow_html\", [False, True])\n+def test_trigger_dag_html_allow(admin_client, dag_maker, session, app, monkeypatch, allow_html):\n+    \"\"\"\n+    Test that HTML is escaped per default in description.\n+    \"\"\"\n+    from markupsafe import escape\n+\n+    DAG_ID = \"params_dag\"\n+    HTML_DESCRIPTION1 = \"HTML <code>raw code</code>.\"\n+    HTML_DESCRIPTION2 = \"HTML <code>in md text</code>.\"\n+    expect_escape = not allow_html\n+    with conf_vars({(\"webserver\", \"allow_raw_html_descriptions\"): str(allow_html)}):\n+        param1 = Param(\n+            42,\n+            description_html=HTML_DESCRIPTION1,\n+            type=\"integer\",\n+            minimum=1,\n+            maximum=100,\n+        )\n+        param2 = Param(\n+            42,\n+            description_md=HTML_DESCRIPTION2,\n+            type=\"integer\",\n+            minimum=1,\n+            maximum=100,\n+        )\n+        with monkeypatch.context() as m:\n+            with dag_maker(\n+                dag_id=DAG_ID, serialized=True, session=session, params={\"param1\": param1, \"param2\": param2}\n+            ):\n+                EmptyOperator(task_id=\"task1\")\n+\n+            m.setattr(app, \"dag_bag\", dag_maker.dagbag)\n+            resp = admin_client.get(f\"dags/{DAG_ID}/trigger\")\n+\n+        if expect_escape:\n+            check_content_in_response(escape(HTML_DESCRIPTION1), resp)\n+            check_content_in_response(escape(HTML_DESCRIPTION2), resp)\n+            check_content_in_response(\n+                \"At least one field in the trigger form uses a raw HTML form definition.\", resp\n+            )\n+        else:\n+            check_content_in_response(HTML_DESCRIPTION1, resp)\n+            check_content_in_response(HTML_DESCRIPTION2, resp)\n+            check_content_not_in_response(\n+                \"At least one field in the trigger form uses a raw HTML form definition.\", resp\n+            )\n+\n+\n def test_trigger_endpoint_uses_existing_dagbag(admin_client):\n     \"\"\"\n     Test that Trigger Endpoint uses the DagBag already created in views.py"
        }
    ],
    "commitTime": "2023-11-12 18:40:12"
}