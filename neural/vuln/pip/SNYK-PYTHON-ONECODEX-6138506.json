{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "LOW",
        "integrity": "NONE",
        "availability": "HIGH"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [],
    "cvssScore": 6.5,
    "disclosureTime": "2023-10-01 06:36:05",
    "epssDetails": null,
    "exploitMaturity": "Not Defined",
    "id": "SNYK-PYTHON-ONECODEX-6138506",
    "identifiers": {
        "CVE": [],
        "CWE": [
            "CWE-362"
        ],
        "PVE": [
            "PVE-2023-60986"
        ]
    },
    "language": "python",
    "malicious": false,
    "packageManager": "pip",
    "publicationTime": "2023-12-22 14:11:25",
    "remediation": "Upgrade onecodex to version 0.9.5 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Race Condition",
    "vulnDescription": {
        "Overview": "onecodex is an One Codex API client and Python library Affected versions of this package are vulnerable to Race Condition. It was possible to hit a race condition where multiple instances of the CLI would try to simultaneously read/write the ~/.onecodex file. "
    },
    "source_code": [
        {
            "filename": "onecodex/auth.py",
            "diff": "@@ -5,6 +5,7 @@\n from functools import wraps\n import json\n import logging\n+import filelock\n import os\n import sys\n \n@@ -52,52 +53,57 @@ def _login(server, creds_file=None, api_key=None, silent=False):\n         click.echo(\"Please check the permissions on {}\".format(collapse_user(creds_file)), err=True)\n         sys.exit(1)\n     else:\n-        # it is, so let's read it!\n-        with open(creds_file, \"r\") as fp:\n-            try:\n-                creds = json.load(fp)\n-            except ValueError:\n-                click.echo(\n-                    \"Your ~/.onecodex credentials file appears to be corrupted. \"  # noqa\n-                    \"Please delete it and re-authorize.\",\n-                    err=True,\n-                )\n-                sys.exit(1)\n-\n-        # check for updates if logged in more than one day ago\n-        last_update = creds.get(\"updated_at\") or creds.get(\"saved_at\")\n-        last_update = last_update if last_update else datetime.datetime.now().strftime(DATE_FORMAT)\n-        diff = datetime.datetime.now() - datetime.datetime.strptime(last_update, DATE_FORMAT)\n-\n-        if diff.days >= 1:\n-            # if creds_file is old, check for updates\n-            upgrade_required, msg = check_version(__version__, server)\n-            creds[\"updated_at\"] = datetime.datetime.now().strftime(DATE_FORMAT)\n-\n-            try:\n-                json.dump(creds, open(creds_file, \"w\"))\n-            except Exception as e:\n-                if e.errno == errno.EACCES:\n+        with filelock.FileLock(\"{}.lock\".format(creds_file)):\n+            # it is, so let's read it!\n+            with open(creds_file, \"r\") as fp:\n+                try:\n+                    creds = json.load(fp)\n+                except ValueError:\n                     click.echo(\n-                        \"Please check the permissions on {}\".format(collapse_user(creds_file)),\n+                        \"Your ~/.onecodex credentials file appears to be corrupted. \"  # noqa\n+                        \"Please delete it and re-authorize.\",\n                         err=True,\n                     )\n                     sys.exit(1)\n-                else:\n-                    raise\n-\n-            if upgrade_required:\n-                click.echo(\"\\nWARNING: {}\\n\".format(msg), err=True)\n \n-        # finally, give the user back what they want (whether silent or not)\n-        if silent:\n-            return creds.get(\"api_key\", None)\n+            # check for updates if logged in more than one day ago\n+            last_update = creds.get(\"updated_at\") or creds.get(\"saved_at\")\n+            last_update = (\n+                last_update if last_update else datetime.datetime.now().strftime(DATE_FORMAT)\n+            )\n+            diff = datetime.datetime.now() - datetime.datetime.strptime(last_update, DATE_FORMAT)\n+\n+            if diff.days >= 1:\n+                # if creds_file is old, check for updates\n+                upgrade_required, msg = check_version(__version__, server)\n+                creds[\"updated_at\"] = datetime.datetime.now().strftime(DATE_FORMAT)\n+\n+                try:\n+                    json.dump(creds, open(creds_file, \"w\"))\n+                except Exception as e:\n+                    if e.errno == errno.EACCES:\n+                        click.echo(\n+                            \"Please check the permissions on {}\".format(collapse_user(creds_file)),\n+                            err=True,\n+                        )\n+                        sys.exit(1)\n+                    else:\n+                        raise\n+\n+                if upgrade_required:\n+                    click.echo(\"\\nWARNING: {}\\n\".format(msg), err=True)\n+\n+            # finally, give the user back what they want (whether silent or not)\n+            if silent:\n+                return creds.get(\"api_key\", None)\n \n-        click.echo(\n-            \"Credentials file already exists ({}). Logout first.\".format(collapse_user(creds_file)),\n-            err=True,\n-        )\n-        return creds.get(\"email\", None)\n+            click.echo(\n+                \"Credentials file already exists ({}). Logout first.\".format(\n+                    collapse_user(creds_file)\n+                ),\n+                err=True,\n+            )\n+            return creds.get(\"email\", None)\n \n     # creds_file was not found and we're not silent, so prompt user to login\n     email, api_key = login_uname_pwd(server, api_key=api_key)\n@@ -119,14 +125,15 @@ def _login(server, creds_file=None, api_key=None, silent=False):\n         }\n     )\n \n-    try:\n-        json.dump(creds, open(creds_file, \"w\"))\n-    except Exception as e:\n-        if e.errno == errno.EACCES:\n-            click.echo(\"Please check the permissions on {}\".format(creds_file), err=True)\n-            sys.exit(1)\n-        else:\n-            raise\n+    with filelock.FileLock(\"{}.lock\".format(creds_file)):\n+        try:\n+            json.dump(creds, open(creds_file, \"w\"))\n+        except Exception as e:\n+            if e.errno == errno.EACCES:\n+                click.echo(\"Please check the permissions on {}\".format(creds_file), err=True)\n+                sys.exit(1)\n+            else:\n+                raise\n \n     click.echo(\"Your ~/.onecodex credentials file was successfully created.\", err=True)\n "
        },
        {
            "filename": "setup.py",
            "diff": "@@ -87,6 +87,7 @@ def run(self):\n         \"requests_toolbelt>=0.7.0\",\n         \"six>=1.10.0\",\n         \"unidecode==1.0.23\",\n+        \"filelock==3.0.12\",\n     ],\n     include_package_data=True,\n     zip_safe=False,"
        }
    ],
    "commitTime": "2021-03-16 21:26:16"
}