{
    "CVSSv3": {
        "CVSS": "3.1",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentiality": "LOW",
        "integrity": "LOW",
        "availability": "NONE"
    },
    "credit": [
        "Unknown"
    ],
    "cvssDetails": [],
    "cvssScore": 6.5,
    "disclosureTime": "2023-12-01 06:31:24",
    "epssDetails": null,
    "exploitMaturity": "Not Defined",
    "id": "SNYK-PYTHON-HIDDIFYPANEL-6133258",
    "identifiers": {
        "CVE": [],
        "CWE": [
            "CWE-285"
        ],
        "PVE": [
            "PVE-2023-62138"
        ]
    },
    "language": "python",
    "malicious": false,
    "packageManager": "pip",
    "publicationTime": "2023-12-20 15:19:03",
    "remediation": "Upgrade hiddifypanel to version 8.7.1, 9.0.0.dev25 or higher. ",
    "severity": "medium",
    "socialTrendAlert": false,
    "title": "Improper Authorization",
    "vulnDescription": {
        "Overview": "hiddifypanel is a hiddifypanel multi proxy panel Affected versions of this package are vulnerable to Improper Authorization through the AdminstratorAdmin.py and resources.py components "
    },
    "source_code": [
        {
            "filename": "hiddifypanel/drivers/user_driver.py",
            "diff": "@@ -41,15 +41,15 @@ def get_enabled_users():\n     return res\n \n \n-def add_client(user):\n+def add_client(user: User):\n     for driver in drivers:\n         try:\n             driver.add_client(user)\n         except Exception as e:\n             hiddify.error(f'ERROR! {driver.__class__.__name__} has error {e} in add client for user={user.uuid}')\n \n \n-def remove_client(user):\n+def remove_client(user: User):\n     for driver in drivers:\n         try:\n             driver.remove_client(user)"
        },
        {
            "filename": "hiddifypanel/models/admin.py",
            "diff": "@@ -69,6 +69,18 @@ def recursive_sub_admins_ids(self, depth=20, seen=None):\n                 sub_admin_ids += sub_admin.recursive_sub_admins_ids(depth-1, seen=seen)\n         return sub_admin_ids\n \n+    def remove(model):\n+        if model.id == 1 or model.id == g.admin.id:\n+            raise ValidationError(_(\"Owner can not be deleted!\"))\n+        users=model.recursive_users_query().all()\n+        for u in users:\n+            u.added_by=g.admin.id\n+        \n+        DailyUsage.query.filter(DailyUsage.admin_id.in_(model.recursive_sub_admins_ids())).update({'admin_id':g.admin.id})\n+        AdminUser.query.filter(AdminUser.id.in_(model.recursive_sub_admins_ids())).delete()\n+\n+        db.session.commit()\n+\n     def __str__(self):\n         return str(self.name)\n "
        },
        {
            "filename": "hiddifypanel/models/user.py",
            "diff": "@@ -152,6 +152,14 @@ def to_dict(d):\n         }\n \n \n+def remove(user: User, commit=True):\n+    from hiddifypanel.drivers import user_driver\n+    user_driver.remove_client(user)\n+    user.delete()\n+    if commit:\n+        db.session.commit()\n+\n+\n def is_user_active(u):\n     \"\"\"\n     The \"is_user_active\" function checks if the input user object \"u\" is active by verifying if their mode is not"
        },
        {
            "filename": "hiddifypanel/panel/admin/AdminstratorAdmin.py",
            "diff": "@@ -7,9 +7,9 @@\n from .adminlte import AdminLTEModelView\n from flask_babelex import gettext as __\n from flask_babelex import lazy_gettext as _\n-from hiddifypanel.panel import hiddify,cf_api\n+from hiddifypanel.panel import hiddify, cf_api\n from flask import Markup\n-from flask import Flask,g,url_for\n+from flask import Flask, g, url_for\n from flask_sqlalchemy import SQLAlchemy\n from flask_admin import Admin\n from flask_admin.contrib.sqla import ModelView\n@@ -19,166 +19,168 @@\n from wtforms.widgets import ListWidget, CheckboxInput\n from sqlalchemy.orm import backref\n # Define a custom field type for the related domains\n-from flask_admin.form.fields import Select2TagsField,Select2Field\n+from flask_admin.form.fields import Select2TagsField, Select2Field\n from wtforms import SelectField\n \n+\n class AdminModeField(SelectField):\n     def __init__(self, label=None, validators=None, **kwargs):\n         super(AdminModeField, self).__init__(label, validators, **kwargs)\n-        if g.admin.mode in [AdminMode.agent,AdminMode.admin]:\n-            self.choices = [ (AdminMode.agent.value, 'agent')]\n-        elif g.admin.mode==AdminMode.admin:\n-            self.choices = [ (AdminMode.agent.value, 'agent'),(AdminMode.admin.value, 'Admin'),]\n-        elif g.admin.mode==AdminMode.super_admin:\n-            self.choices = [(AdminMode.agent.value, 'agent'),(AdminMode.admin.value, 'Admin'),(AdminMode.super_admin.value, 'Super Admin')]\n-\n+        if g.admin.mode in [AdminMode.agent, AdminMode.admin]:\n+            self.choices = [(AdminMode.agent.value, 'agent')]\n+        elif g.admin.mode == AdminMode.admin:\n+            self.choices = [(AdminMode.agent.value, 'agent'), (AdminMode.admin.value, 'Admin'),]\n+        elif g.admin.mode == AdminMode.super_admin:\n+            self.choices = [(AdminMode.agent.value, 'agent'), (AdminMode.admin.value, 'Admin'), (AdminMode.super_admin.value, 'Super Admin')]\n \n \n class SubAdminsField(SelectField):\n-    def __init__(self, label=None, validators=None,*args, **kwargs):\n+    def __init__(self, label=None, validators=None, *args, **kwargs):\n         kwargs.pop(\"allow_blank\")\n-        super().__init__(label, validators,*args, **kwargs)\n-        self.choices=[(admin.id,admin.name) for admin in g.admin.sub_admins]\n-        self.choices+=[(g.admin.id,g.admin.name)]\n+        super().__init__(label, validators, *args, **kwargs)\n+        self.choices = [(admin.id, admin.name) for admin in g.admin.sub_admins]\n+        self.choices += [(g.admin.id, g.admin.name)]\n+\n+\n class AdminstratorAdmin(AdminLTEModelView):\n     column_hide_backrefs = False\n-    column_list = [\"name\",'UserLinks','mode','can_add_admin','max_active_users','max_users','online_users','comment']\n-    form_columns = [\"name\",'mode','can_add_admin','max_active_users','max_users','comment',\"uuid\"]\n+    column_list = [\"name\", 'UserLinks', 'mode', 'can_add_admin', 'max_active_users', 'max_users', 'online_users', 'comment']\n+    form_columns = [\"name\", 'mode', 'can_add_admin', 'max_active_users', 'max_users', 'comment', \"uuid\"]\n     list_template = 'model/admin_list.html'\n     # edit_modal = True\n     # form_overrides = {'work_with': Select2Field}\n-    \n+\n     form_overrides = {\n         'mode': AdminModeField,\n         'parent_admin': SubAdminsField\n     }\n     column_labels = {\n-        \"Actions\":_(\"actions\"),\n-        \"UserLinks\":_(\"user.user_links\"),\n+        \"Actions\": _(\"actions\"),\n+        \"UserLinks\": _(\"user.user_links\"),\n         \"name\": _(\"user.name\"),\n-        \"mode\":_(\"Mode\"),\n-        \"uuid\":_(\"user.UUID\"),\n-        \"comment\":_(\"Note\"),\n-        'max_active_users':_(\"Max Active Users\"),\n-        'max_users':_('Max Users'),\n-        \"online_users\":_(\"Online Users\"),\n-        'can_add_admin':_(\"Can add sub admin\")\n+        \"mode\": _(\"Mode\"),\n+        \"uuid\": _(\"user.UUID\"),\n+        \"comment\": _(\"Note\"),\n+        'max_active_users': _(\"Max Active Users\"),\n+        'max_users': _('Max Users'),\n+        \"online_users\": _(\"Online Users\"),\n+        'can_add_admin': _(\"Can add sub admin\")\n \n     }\n     form_args = {\n-    'uuid': {\n-        'validators': [Regexp(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',message=__(\"Should be a valid uuid\"))]\n-    #     'label': 'First Name',\n-    #     'validators': [required()]\n-    }}\n-    \n+        'uuid': {\n+            'validators': [Regexp(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', message=__(\"Should be a valid uuid\"))]\n+            #     'label': 'First Name',\n+            #     'validators': [required()]\n+        }}\n+\n     column_descriptions = dict(\n         comment=_(\"Add some text that is only visible to super_admin.\"),\n         mode=_(\"Define the admin mode. \"),\n     )\n     # create_modal = True\n     can_export = False\n-    \n+\n     # column_list = [\"domain\",'sub_link_only', \"mode\",\"alias\", \"domain_ip\", \"cdn_ip\"]\n     # column_editable_list=[\"domain\"]\n     # column_filters=[\"domain\",\"mode\"]\n-  \n-    \n+\n     column_searchable_list = [\"name\", \"uuid\"]\n-    \n+\n     # form_columns=['domain','sub_link_only','alias','mode','cdn_ip','show_domains']\n \n     def _ul_formatter(view, context, model, name):\n-        \n-        return Markup(\" \".join([hiddify.get_user_link(model.uuid,d,'admin',model.name) for d in get_panel_domains()]))\n-    \n+\n+        return Markup(\" \".join([hiddify.get_user_link(model.uuid, d, 'admin', model.name) for d in get_panel_domains()]))\n+\n     @property\n     def can_create(self):\n-        return g.admin.can_add_admin or g.admin.mode==AdminMode.super_admin\n+        return g.admin.can_add_admin or g.admin.mode == AdminMode.super_admin\n+\n     def _name_formatter(view, context, model, name):\n-        proxy_path=hconfig(ConfigEnum.proxy_path)\n-        d=get_panel_domains()[0]\n+        proxy_path = hconfig(ConfigEnum.proxy_path)\n+        d = get_panel_domains()[0]\n         if d:\n-            link=f\"<a target='_blank' href='/{proxy_path}/{model.uuid}/admin/#{model.name}'>{model.name} <i class='fa-solid fa-arrow-up-right-from-square'></i></a>\"\n+            link = f\"<a target='_blank' href='/{proxy_path}/{model.uuid}/admin/#{model.name}'>{model.name} <i class='fa-solid fa-arrow-up-right-from-square'></i></a>\"\n             if model.parent_admin:\n-                return Markup(model.parent_admin.name +\"&rlm;&lrm; / &rlm;&lrm;\"+link)\n+                return Markup(model.parent_admin.name + \"&rlm;&lrm; / &rlm;&lrm;\"+link)\n             return Markup(link)\n         else:\n             return model.name\n \n     def _online_users_formatter(view, context, model, name):\n-        last_day=datetime.datetime.now()-datetime.timedelta(days=1)\n-        u=model.recursive_users_query().filter(User.last_online>last_day).count()\n-        t=model.recursive_users_query().count()\n+        last_day = datetime.datetime.now()-datetime.timedelta(days=1)\n+        u = model.recursive_users_query().filter(User.last_online > last_day).count()\n+        t = model.recursive_users_query().count()\n         # actives=[u for u in model.recursive_users_query().all() if is_user_active(u)]\n         # allusers=model.recursive_users_query().count()\n         # onlines=[p for p in  users  if p.last_online and p.last_online>last_day]\n         # return Markup(f\"<a class='btn btn-xs btn-default' href='{url_for('flask.user.index_view',admin_id=model.id)}'> {_('Online')}: {onlines}</a>\")\n-        rate=round(u*100/(t+0.000001))\n-        state= \"danger\" if u>=t else ('warning' if  rate>80 else 'success')\n-        color= \"#ff7e7e\" if u>=t else ('#ffc107' if  rate>80 else '#9ee150')\n+        rate = round(u*100/(t+0.000001))\n+        state = \"danger\" if u >= t else ('warning' if rate > 80 else 'success')\n+        color = \"#ff7e7e\" if u >= t else ('#ffc107' if rate > 80 else '#9ee150')\n         return Markup(f\"\"\"\n         <div class=\"progress progress-lg position-relative\" style=\"min-width: 100px;\">\n           <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\" style=\"width: {rate}%;background-color: {color};\" aria-valuenow=\"{rate}\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n               <span class='badge position-absolute' style=\"left:auto;right:auto;width: 100%;font-size:1em\">{u} {_('user.home.usage.from')} {t}</span>\n \n         </div>\n         \"\"\")\n+\n     def _max_users_formatter(view, context, model, name):\n-        u=model.recursive_users_query().count()\n-        if model.mode== AdminMode.super_admin:\n+        u = model.recursive_users_query().count()\n+        if model.mode == AdminMode.super_admin:\n             return f\"{u} / \u221e\"\n-        t=model.max_users\n-        rate=round(u*100/(t+0.000001))\n-        state= \"danger\" if u>=t else ('warning' if  rate>80 else 'success')\n-        color= \"#ff7e7e\" if u>=t else ('#ffc107' if  rate>80 else '#9ee150')\n+        t = model.max_users\n+        rate = round(u*100/(t+0.000001))\n+        state = \"danger\" if u >= t else ('warning' if rate > 80 else 'success')\n+        color = \"#ff7e7e\" if u >= t else ('#ffc107' if rate > 80 else '#9ee150')\n         return Markup(f\"\"\"\n         <div class=\"progress progress-lg position-relative\" style=\"min-width: 100px;\">\n           <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\" style=\"width: {rate}%;background-color: {color};\" aria-valuenow=\"{rate}\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n               <span class='badge position-absolute' style=\"left:auto;right:auto;width: 100%;font-size:1em\">{u} {_('user.home.usage.from')} {t}</span>\n \n         </div>\n         \"\"\")\n-        \n+\n     def _max_active_users_formatter(view, context, model, name):\n-        \n-        actives=[u for u in model.recursive_users_query().all() if is_user_active(u)]\n-        u=len(actives)\n-        if model.mode== AdminMode.super_admin:\n+\n+        actives = [u for u in model.recursive_users_query().all() if is_user_active(u)]\n+        u = len(actives)\n+        if model.mode == AdminMode.super_admin:\n             return f\"{u} / \u221e\"\n-        t=model.max_active_users\n-        rate=round(u*100/(t+0.000001))\n-        state= \"danger\" if u>=t else ('warning' if  rate>80 else 'success')\n-        color= \"#ff7e7e\" if u>=t else ('#ffc107' if  rate>80 else '#9ee150')\n+        t = model.max_active_users\n+        rate = round(u*100/(t+0.000001))\n+        state = \"danger\" if u >= t else ('warning' if rate > 80 else 'success')\n+        color = \"#ff7e7e\" if u >= t else ('#ffc107' if rate > 80 else '#9ee150')\n         return Markup(f\"\"\"\n         <div class=\"progress progress-lg position-relative\" style=\"min-width: 100px;\">\n           <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\" style=\"width: {rate}%;background-color: {color};\" aria-valuenow=\"{rate}\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n               <span class='badge position-absolute' style=\"left:auto;right:auto;width: 100%;font-size:1em\">{u} {_('user.home.usage.from')} {t}</span>\n \n         </div>\n-        \"\"\")    \n+        \"\"\")\n \n     column_formatters = {\n         'name': _name_formatter,\n         'online_users': _online_users_formatter,\n         'max_users': _max_users_formatter,\n         'max_active_users': _max_active_users_formatter,\n-        'UserLinks':_ul_formatter\n-        \n+        'UserLinks': _ul_formatter\n+\n     }\n+\n     def search_placeholder(self):\n         return f\"{_('search')} {_('user.UUID')} {_('user.name')}\"\n \n-\n     # def is_accessible(self):\n     #     return g.admin.mode==AdminMode.super_admin\n \n-\n     def get_query(self):\n-            # Get the base query\n+        # Get the base query\n         query = super().get_query()\n \n-        admin_ids=g.admin.recursive_sub_admins_ids()\n+        admin_ids = g.admin.recursive_sub_admins_ids()\n         query = query.filter(AdminUser.id.in_(admin_ids))\n \n         return query\n@@ -188,67 +190,50 @@ def get_count_query(self):\n         # Get the base count query\n         query = super().get_count_query()\n \n-        admin_ids=g.admin.recursive_sub_admins_ids()\n+        admin_ids = g.admin.recursive_sub_admins_ids()\n         query = query.filter(AdminUser.id.in_(admin_ids))\n \n         return query\n \n-\n     def on_model_change(self, form, model, is_created):\n-        \n+\n         # if model.id==1:\n         #     model.parent_admin_id=0\n         #     model.parent_admin=None\n         # else:\n         #     model.parent_admin_id=1\n         #     model.parent_admin=AdminUser.query.filter(AdminUser.id==1).first()\n-        if model.id!=1 and model.parent_admin==None:\n-            model.parent_admin_id=g.admin.id\n-            model.parent_admin=g.admin\n+        if model.id != 1 and model.parent_admin == None:\n+            model.parent_admin_id = g.admin.id\n+            model.parent_admin = g.admin\n \n-        if g.admin.mode!=AdminMode.super_admin and model.mode==AdminMode.super_admin:\n+        if g.admin.mode != AdminMode.super_admin and model.mode == AdminMode.super_admin:\n             raise ValidationError(\"Sub-Admin can not have more power!!!!\")\n-        if model.mode==AdminMode.agent and model.mode!=AdminMode.agent:\n+        if model.mode == AdminMode.agent and model.mode != AdminMode.agent:\n             raise ValidationError(\"Sub-Admin can not have more power!!!!\")\n-        \n-    def on_model_delete(self, model):\n-        if model.id==1 or model.id==g.admin.id:\n-            raise ValidationError(_(\"Owner can not be deleted!\"))\n-        users=model.recursive_users_query().all()\n-        for u in users:\n-            u.added_by=g.admin.id\n-        \n-        DailyUsage.query.filter(DailyUsage.admin_id.in_(model.recursive_sub_admins_ids())).update({'admin_id':g.admin.id})\n-        AdminUser.query.filter(AdminUser.id.in_(model.recursive_sub_admins_ids())).delete()\n-\n-        db.session.commit()\n-\n \n+    def on_model_delete(self, model):\n+        model.remove()\n \n     def get_query_for_parent_admin(self):\n         admin_user_id = self.get_pk_value()\n         sub_admins_ids = set(recursive_sub_admins_ids(AdminUser.query.get(admin_user_id)))\n         return AdminUser.query.filter(AdminUser.id.in_(sub_admins_ids)).with_entities(AdminUser.id, AdminUser.name)\n \n-\n     def on_form_prefill(self, form, id=None):\n-        \n-        \n-        if g.admin.mode!=AdminMode.super_admin:\n+\n+        if g.admin.mode != AdminMode.super_admin:\n             del form.mode\n             del form.can_add_admin\n-            \n-        if g.admin.id==form._obj.id:\n+\n+        if g.admin.id == form._obj.id:\n             del form.max_users\n             del form.max_active_users\n             del form.comment\n             del form.can_add_admin\n             if getattr(form, 'mode'):\n                 del form.mode\n-        elif form._obj.mode==AdminMode.super_admin:\n+        elif form._obj.mode == AdminMode.super_admin:\n             del form.max_users\n             del form.max_active_users\n             del form.can_add_admin\n-        \n-        \n-        "
        },
        {
            "filename": "hiddifypanel/panel/commercial/restapi/resources.py",
            "diff": "@@ -14,44 +14,59 @@\n \n \n class UserResource(Resource):\n-    def get(self, uuid=None):\n-        uuid = request.args['uuid'] if 'uuid' in request.args else None\n+    decorators = [hiddify.super_admin]\n+\n+    def get(self):\n+        uuid = request.args.get('uuid')\n         if uuid:\n-            product = User.query.filter(User.uuid == uuid).first() or abort(204)\n-            return jsonify(product.to_dict())\n+            user = user_by_uuid(uuid) or abort(404, \"user not found\")\n+            return jsonify(user.to_dict())\n \n-        products = User.query.all() or abort(204)\n-        return jsonify(\n-            [product.to_dict() for product in products]\n-        )\n+        users = User.query.all() or abort(502, \"WTF!\")\n+        return jsonify([user.to_dict() for user in users])\n \n     def post(self):\n         data = request.json\n+        uuid = data.get('uuid') or abort(422, \"Parameter issue: 'uuid'\")\n         hiddify.add_or_update_user(**data)\n-        user_driver.add_client(data['uuid'])\n+        user = user_by_uuid(uuid) or abort(502, \"unknown issue! user is not added\")\n+        user_driver.add_client(user)\n         hiddify.quick_apply_users()\n+        return jsonify({'status': 200, 'msg': 'ok'})\n \n+    def delete(self):\n+        uuid = request.args.get('uuid') or abort(422, \"Parameter issue: 'uuid'\")\n+        user = user_by_uuid(uuid) or abort(404, \"user not found\")\n+        user.remove()\n+        hiddify.quick_apply_users()\n         return jsonify({'status': 200, 'msg': 'ok'})\n \n \n class AdminUserResource(Resource):\n+    decorators = [hiddify.super_admin]\n+\n     def get(self, uuid=None):\n-        uuid = request.args['uuid'] if 'uuid' in request.args else None\n+        uuid = request.args.get('uuid')\n         if uuid:\n-            product = AdminUser.query.filter(AdminUser.uuid == uuid).first() or abort(204)\n-            return jsonify(product.to_dict())\n+            admin = get_admin_user_db(uuid) or abort(404, \"user not found\")\n+            return jsonify(admin.to_dict())\n \n-        products = AdminUser.query.all() or abort(204)\n-        return jsonify(\n-            [product.to_dict() for product in products]\n-        )\n+        admins = AdminUser.query.all() or abort(502, \"WTF!\")\n+        return jsonify([admin.to_dict() for admin in admins])\n \n     def post(self):\n         data = request.json\n+        uuid = data.get('uuid') or abort(422, \"Parameter issue: 'uuid'\")\n         hiddify.add_or_update_admin(**data)\n \n         return jsonify({'status': 200, 'msg': 'ok'})\n \n+    def delete(self):\n+        uuid = request.args.get('uuid') or abort(422, \"Parameter issue: 'uuid'\")\n+        admin = get_admin_user_db(uuid) or abort(404, \"admin not found\")\n+        admin.remove()\n+        return jsonify({'status': 200, 'msg': 'ok'})\n+\n \n # class DomainResource(Resource):\n #     def get(self,domain=None):"
        }
    ],
    "commitTime": "2023-11-02 09:30:36"
}