{
    "CVSSv3": {
        "CVSS": "3.1",
        "E": "P",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "CHANGED",
        "confidentiality": "HIGH",
        "integrity": "NONE",
        "availability": "NONE"
    },
    "credit": [
        "Mizu"
    ],
    "cvssDetails": [
        {
            "assigner": "NVD",
            "cvssV3BaseScore": 9.8,
            "cvssV3Vector": {
                "CVSS": "3.1",
                "attackVector": "NETWORK",
                "attackComplexity": "LOW",
                "privilegesRequired": "NONE",
                "userInteraction": "NONE",
                "scope": "UNCHANGED",
                "confidentiality": "HIGH",
                "integrity": "HIGH",
                "availability": "HIGH"
            },
            "severity": "critical"
        }
    ],
    "cvssScore": 8.6,
    "disclosureTime": "2023-12-20 06:30:25",
    "epssDetails": {
        "modelVersion": "v2023.03.01",
        "percentile": "0.64018",
        "probability": "0.00264"
    },
    "exploitMaturity": "Proof of Concept",
    "id": "SNYK-PYTHON-MLFLOW-6134595",
    "identifiers": {
        "CVE": [
            "CVE-2023-6974"
        ],
        "CWE": [
            "CWE-918"
        ]
    },
    "language": "python",
    "malicious": false,
    "packageManager": "pip",
    "publicationTime": "2023-12-21 08:36:08",
    "remediation": "Upgrade mlflow to version 2.9.2 or higher. ",
    "severity": "high",
    "socialTrendAlert": false,
    "title": "Server-Side Request Forgery (SSRF)",
    "vulnDescription": {
        "Overview": "mlflow is a platform to streamline machine learning development, including tracking experiments, packaging code into reproducible runs, and sharing and deploying models. Affected versions of this package are vulnerable to Server-Side Request Forgery (SSRF) by exploiting the redirect behavior of the default HTTP protocol inside an http or runs: wrapper. An attacker can access internal resources and achieve arbitrary file writes by triggering the _download_file() function in HttpArtifactRepository . ",
        "PoC": " Create a model: curl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create' Create a model version: curl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"source\": \"runs:/b0895f2dd7cc4e56aa132acd2b47fe41/a\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create' Trigger a download of the payload: curl 'http://127.0.0.1:5000/model-versions/get-artifact?path=whatever&name=poc&version=1' "
    },
    "source_code": [
        {
            "filename": "mlflow/environment_variables.py",
            "diff": "@@ -493,3 +493,9 @@ def get(self):\n MLFLOW_MULTIPART_DOWNLOAD_CHUNK_SIZE = _EnvironmentVariable(\n     \"MLFLOW_MULTIPART_DOWNLOAD_CHUNK_SIZE\", int, 100 * 1024**2\n )\n+\n+#: Specifies whether or not to allow the MLflow server to follow redirects when\n+#: making HTTP requests. If set to False, the server will throw an exception if it\n+#: encounters a redirect response.\n+#: (default: ``True``)\n+MLFLOW_ALLOW_HTTP_REDIRECTS = _BooleanEnvironmentVariable(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", True)"
        },
        {
            "filename": "mlflow/utils/request_utils.py",
            "diff": "@@ -165,6 +165,7 @@ def _get_http_response_with_retries(\n     backoff_jitter,\n     retry_codes,\n     raise_on_status=True,\n+    allow_redirects=None,\n     **kwargs,\n ):\n     \"\"\"\n@@ -187,7 +188,13 @@ def _get_http_response_with_retries(\n     session = _get_request_session(\n         max_retries, backoff_factor, backoff_jitter, retry_codes, raise_on_status\n     )\n-    return session.request(method, url, **kwargs)\n+\n+    # the environment variable is hardcoded here to avoid importing mlflow.\n+    # however, documentation is available in environment_variables.py\n+    env_value = os.getenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", \"true\").lower() in [\"true\", \"1\"]\n+    allow_redirects = env_value if allow_redirects is None else allow_redirects\n+\n+    return session.request(method, url, allow_redirects=allow_redirects, **kwargs)\n \n \n def cloud_storage_http_request("
        },
        {
            "filename": "tests/projects/test_databricks.py",
            "diff": "@@ -449,6 +449,7 @@ def confirm_request_params(*args, **kwargs):\n         headers[\"Authorization\"] = \"Basic dXNlcjpwYXNz\"\n         assert args == (\"PUT\", \"host/clusters/list\")\n         assert kwargs == {\n+            \"allow_redirects\": True,\n             \"headers\": headers,\n             \"verify\": True,\n             \"json\": {\"a\": \"b\"},"
        },
        {
            "filename": "tests/store/artifact/test_databricks_artifact_repo.py",
            "diff": "@@ -258,6 +258,7 @@ def test_log_artifact_azure_with_headers(\n         request_mock.assert_called_with(\n             \"put\",\n             f\"{MOCK_AZURE_SIGNED_URI}?comp=blocklist\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n@@ -344,33 +345,38 @@ def test_log_artifact_adls_gen2_with_headers(\n         request_mock.assert_any_call(\n             \"put\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?resource=file\",\n+            allow_redirects=True,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_any_call(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=0\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_any_call(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=5\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_any_call(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=10\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_called_with(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=flush&position=14\",\n+            allow_redirects=True,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n@@ -402,12 +408,14 @@ def test_log_artifact_adls_gen2_flush_error(databricks_artifact_repo, test_file)\n             mock.call(\n                 \"put\",\n                 f\"{MOCK_ADLS_GEN2_SIGNED_URI}?resource=file\",\n+                allow_redirects=True,\n                 headers={},\n                 timeout=None,\n             ),\n             mock.call(\n                 \"patch\",\n                 f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=0&flush=true\",\n+                allow_redirects=True,\n                 data=ANY,\n                 headers={},\n                 timeout=None,\n@@ -434,7 +442,7 @@ def test_log_artifact_aws(databricks_artifact_repo, test_file, artifact_path, ex\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_AWS_SIGNED_URI, data=ANY, headers={}, timeout=None\n+            \"put\", MOCK_AWS_SIGNED_URI, allow_redirects=True, data=ANY, headers={}, timeout=None\n         )\n \n \n@@ -462,7 +470,12 @@ def test_log_artifact_aws_with_headers(\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_AWS_SIGNED_URI, data=ANY, headers=expected_headers, timeout=None\n+            \"put\",\n+            MOCK_AWS_SIGNED_URI,\n+            allow_redirects=True,\n+            data=ANY,\n+            headers=expected_headers,\n+            timeout=None,\n         )\n \n \n@@ -500,7 +513,7 @@ def test_log_artifact_gcp(databricks_artifact_repo, test_file, artifact_path, ex\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_GCP_SIGNED_URL, data=ANY, headers={}, timeout=None\n+            \"put\", MOCK_GCP_SIGNED_URL, allow_redirects=True, data=ANY, headers={}, timeout=None\n         )\n \n \n@@ -528,7 +541,12 @@ def test_log_artifact_gcp_with_headers(\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_GCP_SIGNED_URL, data=ANY, headers=expected_headers, timeout=None\n+            \"put\",\n+            MOCK_GCP_SIGNED_URL,\n+            allow_redirects=True,\n+            data=ANY,\n+            headers=expected_headers,\n+            timeout=None,\n         )\n \n \n@@ -1294,6 +1312,7 @@ def test_multipart_upload(databricks_artifact_repo, large_file, mock_chunk_size)\n                 mock.call(\n                     \"put\",\n                     f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\",\n+                    allow_redirects=True,\n                     data=f.read(mock_chunk_size),\n                     headers={\"header\": f\"part-{i + 1}\"},\n                     timeout=None,\n@@ -1383,6 +1402,7 @@ def test_multipart_upload_retry_part_upload(databricks_artifact_repo, large_file\n                 mock.call(\n                     \"put\",\n                     f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\",\n+                    allow_redirects=True,\n                     data=f.read(mock_chunk_size),\n                     headers={\"header\": f\"part-{i + 1}\"},\n                     timeout=None,\n@@ -1441,6 +1461,7 @@ def test_multipart_upload_abort(databricks_artifact_repo, large_file, mock_chunk\n                 mock.call(\n                     \"put\",\n                     f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\",\n+                    allow_redirects=True,\n                     data=f.read(mock_chunk_size),\n                     headers={\"header\": f\"part-{i + 1}\"},\n                     timeout=None,\n@@ -1459,6 +1480,7 @@ def test_multipart_upload_abort(databricks_artifact_repo, large_file, mock_chunk\n         assert abort_call == mock.call(\n             \"delete\",\n             f\"{MOCK_AWS_SIGNED_URI}uploadId=abort\",\n+            allow_redirects=True,\n             headers={\"header\": \"abort\"},\n             timeout=None,\n         )"
        },
        {
            "filename": "tests/store/tracking/test_rest_store.py",
            "diff": "@@ -70,6 +70,7 @@ def mock_request(*args, **kwargs):\n         assert args == (\"POST\", \"https://hello/api/2.0/mlflow/experiments/search\")\n         kwargs = {k: v for k, v in kwargs.items() if v is not None}\n         assert kwargs == {\n+            \"allow_redirects\": True,\n             \"json\": {\"view_type\": \"ACTIVE_ONLY\"},\n             \"headers\": DefaultRequestHeaderProvider().request_headers(),\n             \"verify\": True,"
        },
        {
            "filename": "tests/utils/test_request_utils.py",
            "diff": "@@ -58,3 +58,105 @@ def test_download_chunk_incomplete_read(tmp_path):\n                 download_path=download_path,\n                 http_uri=\"https://example.com\",\n             )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"0\", \"false\", \"False\", \"FALSE\"])\n+def test_redirects_disabled_if_env_var_set(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\"GET\", \"http://localhost:5000\")\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=False,\n+            timeout=None,\n+        )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"1\", \"true\", \"True\", \"TRUE\"])\n+def test_redirects_enabled_if_env_var_set(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=True,\n+            timeout=None,\n+        )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"0\", \"false\", \"False\", \"FALSE\"])\n+def test_redirect_kwarg_overrides_env_value_false(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\", \"http://localhost:5000\", allow_redirects=True\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=True,\n+            timeout=None,\n+        )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"1\", \"true\", \"True\", \"TRUE\"])\n+def test_redirect_kwarg_overrides_env_value_true(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\", \"http://localhost:5000\", allow_redirects=False\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=False,\n+            timeout=None,\n+        )\n+\n+\n+def test_redirects_enabled_by_default():\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=True,\n+            timeout=None,\n+        )"
        },
        {
            "filename": "tests/utils/test_rest_utils.py",
            "diff": "@@ -116,6 +116,7 @@ def test_http_request_hostonly(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -133,6 +134,7 @@ def test_http_request_cleans_hostname(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -151,6 +153,7 @@ def test_http_request_with_basic_auth(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=headers,\n         timeout=120,\n@@ -183,6 +186,7 @@ def __eq__(self, other):\n     request.assert_called_once_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=mock.ANY,\n         headers=mock.ANY,\n         timeout=mock.ANY,\n@@ -207,6 +211,7 @@ def test_http_request_with_auth(fetch_auth, request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=mock.ANY,\n         headers=mock.ANY,\n         timeout=mock.ANY,\n@@ -226,6 +231,7 @@ def test_http_request_with_token(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=headers,\n         timeout=120,\n@@ -242,6 +248,7 @@ def test_http_request_with_insecure(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=False,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -258,6 +265,7 @@ def test_http_request_client_cert_path(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         cert=\"/some/path\",\n         headers=DefaultRequestHeaderProvider().request_headers(),\n@@ -275,6 +283,7 @@ def test_http_request_server_cert_path(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=\"/some/path\",\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -295,6 +304,7 @@ def test_http_request_with_content_type_header(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=headers,\n         timeout=120,\n@@ -320,6 +330,7 @@ def test_http_request_request_headers(request):\n         request.assert_called_with(\n             \"GET\",\n             \"http://my-host/my/endpoint\",\n+            allow_redirects=True,\n             verify=\"/some/path\",\n             headers={**DefaultRequestHeaderProvider().request_headers(), \"test\": \"header\"},\n             timeout=120,\n@@ -356,6 +367,7 @@ def test_http_request_request_headers_user_agent(request):\n         request.assert_called_with(\n             \"GET\",\n             \"http://my-host/my/endpoint\",\n+            allow_redirects=True,\n             verify=\"/some/path\",\n             headers=expected_headers,\n             timeout=120,\n@@ -393,6 +405,7 @@ def test_http_request_request_headers_user_agent_and_extra_header(request):\n         request.assert_called_with(\n             \"GET\",\n             \"http://my-host/my/endpoint\",\n+            allow_redirects=True,\n             verify=\"/some/path\",\n             headers=expected_headers,\n             timeout=120,\n@@ -440,6 +453,7 @@ def test_http_request_wrapper(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=False,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -450,6 +464,7 @@ def test_http_request_wrapper(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=False,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -560,3 +575,26 @@ def test_augmented_raise_for_status():\n     assert e.value.response == response\n     assert e.value.request == response.request\n     assert response.text in str(e.value)\n+\n+\n+def test_provide_redirect_kwarg():\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = http_request(\n+            MlflowHostCreds(\"http://my-host\"),\n+            \"/my/endpoint\",\n+            \"GET\",\n+            allow_redirects=False,\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_with(\n+            \"GET\",\n+            \"http://my-host/my/endpoint\",\n+            allow_redirects=False,\n+            headers=mock.ANY,\n+            verify=mock.ANY,\n+            timeout=120,\n+        )"
        }
    ],
    "commitTime": "2023-12-13 03:43:32"
}